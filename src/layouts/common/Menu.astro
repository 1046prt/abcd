---
import "@/assets/styles/menu.css";
import HamIcon from "@/assets/icons/ham.svg";
import ArrowIcon from "@/assets/icons/arrow.svg";
import ToggleIcon from "@/assets/icons/toggle.svg";

import Navigation from "@/layouts/Navigation";
import { NavbarLinks } from "@/utils/constants";
---

<button class="menu-button" popovertarget="nav" popovertargetaction="toggle">
  <HamIcon width={24} height={24} />
</button>
<div class="layout">
  <aside popover="auto" id="nav">
    <button
      class="menu-button hider"
      popovertarget="nav"
      popovertargetaction="hide"
      class="hider"
      aria-label="Close drawer"
    >
      <span class="sr-only">Close drawer</span>
    </button>
    <Navigation pages={NavbarLinks} />
    <div class="actions">
      <button class="menu-button minimize-toggle" aria-label="Toggle menu size" title="Close sidebar">
        <ArrowIcon
          width={24}
          height={24}
          style={{
            transform: "rotate(-135deg)"
          }}
          title="Toggle sidebar"
        />
      </button>
      <button class="menu-button theme-toggle">
        <ToggleIcon width={24} height={24} />
      </button>
      <button class="menu-button placement-toggle">
        <ArrowIcon width={24} height={24} />
      </button>
    </div>
  </aside>
</div>

<script>
  // codepen: https://codepen.io/xkeshav/pen/GgKKBWm
  const popover = document.querySelector("#nav");
  const themer = document.querySelector(".theme-toggle");
  const placer = document.querySelector(".placement-toggle");
  const hider = document.querySelector(".hider");
  const minimizeBtn = document.querySelector(".minimize-toggle");

  const themeOptions = ["system", "light", "dark"];

  let debounce;
  document.documentElement.dataset.resizing = String(false);
  document.documentElement.dataset.placement = "top";

  // ðŸ‘‡ Load theme from localStorage or fallback to "system"
  let themeIndex = 0;
  const storedTheme = localStorage.getItem("theme");
  if (storedTheme && themeOptions.includes(storedTheme)) {
    themeIndex = themeOptions.indexOf(storedTheme);
  }
  const config = {
    theme: themeOptions[themeIndex],
  };

  const update = () => {
    document.documentElement.dataset.theme = config.theme;
    localStorage.setItem("theme", config.theme); // Save to localStorage
  };

  const sync = () => {
    if (!document.startViewTransition) return update();
    document.startViewTransition(() => update());
  };

  const switchTheme = () => {
    themeIndex += 1;
    config.theme = themeOptions[themeIndex % 3];
    sync();
  };

  themer.addEventListener("click", switchTheme);

  update(); // initial theme apply

  window.addEventListener("resize", () => {
    if (popover.matches(":popover-open")) popover.hidePopover();
    document.documentElement.dataset.resizing = String(true);
    if (debounce) clearTimeout(debounce);
    debounce = setTimeout(() => {
      document.documentElement.dataset.resizing = String(false);
    }, 200);
  });

  const switchPlace = () => {
    document.documentElement.dataset.placement =
      document.documentElement.dataset.placement === "top" ? "bottom" : "top";
  };
  placer.addEventListener("click", switchPlace);

  hider.removeAttribute("popovertargetaction");

  const reset = () => {
    document.documentElement.dataset.complete = String(false);
    document.documentElement.style.setProperty("--complete", "0");
    popover.style.setProperty("--ty", "0");
  };
  popover.addEventListener("toggle", reset);

  const toggleMinimize = () => {
    const nav = document.querySelector("#nav");
    nav?.classList.toggle("minimized");
    minimizeBtn?.classList.toggle("rotated");
    minimizeBtn.title = nav?.classList.contains("minimized") ? "Open sidebar" : "Close sidebar";
  };
  minimizeBtn?.addEventListener("click", toggleMinimize);
</script>

