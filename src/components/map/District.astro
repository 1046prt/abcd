---
const { state } = Astro.props;
---

<style>
  .map-container {
    position: relative;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 35px;
    aspect-ratio: 3/2;
  }

  .district {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    transform: scale(1.5);
  }

  .district svg {
    width: 100%;
    height: 20rem;
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
  }

  .district path {
    transition: fill 0.3s ease;
    fill: #e0f2f1;
  }

  .district path:hover {
    fill: orange;
    stroke: #333;
    stroke-width: 1px;
  }

  .district text {
    font-size: 16px;
    pointer-events: none;
  }

  .district-tooltip {
    position: absolute;
    background-color: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 8px 12px;
    border-radius: 4px;
    font-size: 14px;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 1000;
  }

  .district-tooltip.visible {
    opacity: 1;
  }

  @media (max-width: 768px) {
    .map-container {
      padding: 10px;
    }
    .district {
      transform: scale(1.2);
    }
  }
</style>

<div class="map-container">
  <div class="district">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      version="1.1"
      baseProfile="full"
      viewBox="0 0 800 533"
      preserveAspectRatio="xMidYMid meet"
    >
      <!-- SVG content will be loaded here -->
    </svg>
  </div>
  <div class="district-tooltip" id="tooltip"></div>
</div>

<script define:vars={{ state }}>
  async function loadSVG() {
    try {
      const response = await fetch(`../../../public/map/svg/statesvg/${state}.svg`);

      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }

      const svgText = await response.text();
      const svgContainer = document.querySelector(".district svg");

      if (svgContainer) {
        svgContainer.innerHTML = svgText;
        processPaths();
      }
    } catch (error) {
      console.error("Error loading SVG:", error);
    }
  }

  function processPaths() {
    const allPaths = Array.from(document.querySelectorAll(".district path"));
    const halfLength = Math.floor(allPaths.length / 2);
    const paths = allPaths.slice(halfLength);
    const tooltip = document.getElementById("tooltip");
    const texts = document.querySelectorAll("svg text");
    const labels = Array.from(texts)
      .map((el) => el.textContent.trim())
      .filter((text) => text.length > 1);

    paths.forEach((path, index) => {
      path.style.cursor = "pointer";
      const districtName = labels[index + 1];
      console.log(districtName);
      path.addEventListener("mouseenter", (e) => {
        path.style.fill = "orange";
        if (!tooltip || !districtName) return;

        tooltip.textContent = districtName;
        tooltip.classList.add("visible");

        const mouseX = e.clientX;
        const mouseY = e.clientY;

        // Position tooltip relative to mouse
        tooltip.style.left = `${mouseX - 250}px`;
        tooltip.style.top = `${mouseY - 120}px`;
      });

      path.addEventListener("mouseleave", () => {
        path.style.fill = "";
        // Hide tooltip
        if (tooltip) {
          tooltip.classList.remove("visible");
        }
      });

      /* path.addEventListener("click", (e) => {
        // add click event like; add links..etc
        console.log(districtName)
      });
      */
    });
  }

  document.addEventListener("DOMContentLoaded", loadSVG);
</script>
