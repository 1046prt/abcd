<div class="canvas-generator">

  <main class="controls">
    <div class="input-area">
      <input 
        type="text" 
        placeholder="Type your text here..." 
        id="name" 
        class="text-input"
      />
      <div class="buttons">
        <button data-variant="text" class="action-button">Draw</button>
        <button data-variant="time" class="action-button">Clock</button>
        <button data-variant="reset" class="action-button">Clear</button>
      </div>
      <div class="checkbox-area">
        <input type="checkbox" id="full" />
        <label for="full">Use Full Name</label>
      </div>
    </div>
    <!-- The image grid now has a max-height and vertical scrolling -->
    <div id="canvasDiv" class="image-grid"></div>
  </main>


</div>

<style>
  /* Global Styles for the Canvas Generator */
  .canvas-generator {
    min-height: 100vh;
    width: 100%;
    padding: 1rem;
    font-family: 'Comic Sans MS', 'Chalkboard SE', sans-serif;
    box-sizing: border-box;
    margin-top: -40px;
  }

  /* Controls Section */
  .controls {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .input-area {
    background: rgba(37, 53, 79, 0.8);
    padding: 2rem;
    border-radius: 20px;
    border: 2px solid #334155;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
    backdrop-filter: blur(8px);
  }

  .text-input {
    padding: 1rem 1.5rem;
    border: 2px solid #334155;
    border-radius: 12px;
    font-size: 1.2rem;
    width: 100%;
    background: rgba(15, 23, 42, 0.8);
    color: #e2e8f0;
    transition: border-color 0.3s ease;
    outline: none;
    box-sizing: border-box;
  }

  .text-input:focus {
    border-color: #2563eb;
  }

  .text-input::placeholder {
    color: #64748b;
  }

  .buttons {
    display: flex;
    gap: 1rem;
    margin-top: 1.5rem;
    flex-wrap: wrap;
  }

  .action-button {
    padding: 1rem 2rem;
    border-radius: 12px;
    font-size: 1.2rem;
    font-weight: bold;
    cursor: pointer;
    transition: background 0.3s ease;
    border: none;
    background: #1e40af;
    color: white;
    flex: 1;
    min-width: 120px;
  }

  .action-button:hover {
    background: #2563eb;
  }

  .checkbox-area {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-top: 1.5rem;
    font-size: 1.2rem;
    color: #e2e8f0;
  }

  /* Image Grid with Scrollbar */
  .image-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
    background: rgba(37, 53, 79, 0.8);
    border: 2px solid #334155;
    padding: 2rem;
    border-radius: 20px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
    backdrop-filter: blur(8px);
    min-height: 200px;
    max-height: 500px;  /* Adjust this value as needed */
    overflow-y: auto;   /* Enable vertical scrolling */
  }

  /* Custom Scrollbar Styling for Webkit Browsers */
  .image-grid::-webkit-scrollbar {
    width: 12px;
  }
  .image-grid::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
  }
  .image-grid::-webkit-scrollbar-thumb {
    background: rgba(0, 0, 0, 0.3);
    border-radius: 10px;
  }

  .image-grid img {
    width: 100%;
    height: auto;
    border-radius: 10px;
    object-fit: cover;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
    transition: transform 0.3s ease;
    cursor: pointer;
  }

  .image-grid img:hover {
    transform: scale(1.02);
  }

  /* Dialog Styles */
  dialog {
    background: #1e293b;
    border: 2px solid #334155;
    border-radius: 16px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
    padding: 2rem;
    max-width: 500px;
    width: 90%;
    color: #e2e8f0;
  }

  .dialog-content h2 {
    margin-top: 0;
    color: #e2e8f0;
  }

  .dialog-content ul {
    list-style-type: none;
    padding: 0;
    margin: 1rem 0;
    text-align: left;
  }

  .dialog-content li {
    margin: 0.5rem 0;
  }

  .dialog-close {
    margin-top: 1.5rem;
    padding: 0.8rem 1.5rem;
    border: none;
    border-radius: 12px;
    background: #1e40af;
    color: white;
    font-size: 1rem;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .dialog-close:hover {
    background: #2563eb;
  }
</style>

<script>
  class CanvasGenerator {
    constructor() {
      this.initializeElements();
      this.bindEvents();
    }

    initializeElements() {
      this.input = document.getElementById('name');
      this.canvasContainer = document.getElementById('canvasDiv');
      this.fullCheckbox = document.getElementById('full');
      this.helpDialog = document.getElementById('helpDialog');
      this.tipButton = document.getElementById('tip');
      this.closeDialogButton = document.getElementById('closeDialog');
    }

    bindEvents() {
      document.querySelectorAll('.action-button').forEach(button => {
        button.addEventListener('click', (e) => this.handleClick(e));
      });

      if (this.tipButton) {
        this.tipButton.addEventListener('click', () => this.helpDialog.showModal());
      }

      if (this.closeDialogButton) {
        this.closeDialogButton.addEventListener('click', () => this.helpDialog.close());
      }
    }

    handleClick(event) {
      const variant = event.target.dataset.variant;

      switch (variant) {
        case 'text':
          this.generateTextImage();
          break;
        case 'time':
          this.generateTimeImage();
          break;
        case 'reset':
          this.resetCanvas();
          break;
      }
    }

    createCanvas(text) {
      const canvas = document.createElement('canvas');
      canvas.width = 300;
      canvas.height = 200;

      const ctx = canvas.getContext('2d');
      const bgColor = this.getChildFriendlyColor();

      // Draw background
      ctx.fillStyle = bgColor;
      ctx.fillRect(0, 0, 300, 200);

      // Draw text
      ctx.font = 'bold 24px Comic Sans MS';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillStyle = 'white';
      ctx.fillText(text, 150, 100);

      return canvas.toDataURL();
    }

    getChildFriendlyColor() {
      const colors = [
        '#FF6B6B',  // Soft Red
        '#4ECDC4',  // Turquoise
        '#45B7D1',  // Sky Blue
        '#FDCB6E',  // Soft Yellow
        '#6C5CE7',  // Soft Purple
        '#A8E6CF',  // Mint Green
        '#FF8ED4'   // Soft Pink
      ];
      return colors[Math.floor(Math.random() * colors.length)];
    }

    generateTextImage() {
      const text = this.input.value.trim();
      if (!text) return;

      const processedText = this.fullCheckbox.checked ?
        text :
        text.split(' ').map(w => w[0]).join('').toUpperCase();

      this.displayImage(this.createCanvas(processedText));
    }

    generateTimeImage() {
      const now = new Date();
      const timeString = [
        now.getHours().toString().padStart(2, '0'),
        now.getMinutes().toString().padStart(2, '0'),
        now.getSeconds().toString().padStart(2, '0')
      ].join(':');

      this.displayImage(this.createCanvas(timeString));
    }

    displayImage(dataUrl) {
      const img = document.createElement('img');
      img.src = dataUrl;
      img.alt = 'Generated fun image';
      this.canvasContainer.prepend(img);
    }

    resetCanvas() {
      this.canvasContainer.innerHTML = '';
      this.input.value = '';
      this.fullCheckbox.checked = false;
    }
  }

  // Ensure the script runs after the DOM is fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    new CanvasGenerator();
  });
</script>
