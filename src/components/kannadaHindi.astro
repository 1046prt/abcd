---
import "@/assets/styles/kannada.css";

interface LetterPair {
  hindi: string;
  kannada: string;
  type: 'vowel' | 'consonant' | 'separator';
}

const generateLetters = (startCode: number, length: number, extraKeys: number[] = []): string[] =>
  Array.from({ length }, (_, i) => String.fromCodePoint(startCode + i))
    .filter((_, index) => !extraKeys.includes(startCode + index));

const hindiVowels = generateLetters(2309, 16, [2317, 2321]);
const hindiConsonants = generateLetters(2325, 37);
const kannadaVowels = generateLetters(3205, 16, [3213, 3217]);
const kannadaConsonants = generateLetters(3221, 37);

const letterPairs: LetterPair[] = [
  ...hindiVowels.map((hindi, i) => ({
    hindi,
    kannada: kannadaVowels[i],
    type: 'vowel',
  })),
  ...hindiConsonants.map((hindi, i) => ({
    hindi,
    kannada: kannadaConsonants[i],
    type: 'consonant',
  })),
];

let toggleOrder = false;

const languages = [
  { code: 'hi', name: 'हिंदी' },
  { code: 'kn', name: 'ಕನ್ನಡ' },
  { code: 'en', name: 'English' },
];

let selectedLanguage1 = 'hi';
let selectedLanguage2 = 'kn';

const updateUI = () => {
  const languageLabels = document.querySelectorAll('.language-label');
  languageLabels[0].textContent = languages.find(lang => lang.code === selectedLanguage1)?.name || '';
  languageLabels[1].textContent = languages.find(lang => lang.code === selectedLanguage2)?.name || '';

  document.querySelectorAll('.language-letter-card').forEach((card, index) => {
    const pair = letterPairs[index];
    const lang1Letter = selectedLanguage1 === 'hi' ? pair.hindi : pair.kannada;
    const lang2Letter = selectedLanguage2 === 'hi' ? pair.hindi : pair.kannada;

    card.querySelector('.language-letter-kannada').textContent = lang1Letter;
    card.querySelector('.language-letter-hindi').textContent = lang2Letter;
  });
};

const handleLanguageChange = (event, isFirstDropdown) => {
  if (isFirstDropdown) {
    selectedLanguage1 = event.target.value;
  } else {
    selectedLanguage2 = event.target.value;
  }
  updateUI();
};
---



  
  <div class="language-letters-container">
    <!-- Dropdown Section -->
    <div class="toggle-container">
      <div class="dropdown-wrapper">
        <label class="dropdown-label">Language 1</label>
        <select id="languageDropdown1" on:change={(e) => handleLanguageChange(e, true)}>
          {languages.map(lang => (
            <option value={lang.code} selected={lang.code === selectedLanguage1}>
              {lang.name} ({lang.code.toUpperCase()})
            </option>
          ))}
        </select>
      </div>
  
      <div class="dropdown-wrapper">
        <label class="dropdown-label">Language 2</label>
        <select id="languageDropdown2" on:change={(e) => handleLanguageChange(e, false)}>
          {languages.map(lang => (
            <option value={lang.code} selected={lang.code === selectedLanguage2}>
              {lang.name} ({lang.code.toUpperCase()})
            </option>
          ))}
        </select>
      </div>
    </div>
  
    <!-- Letters Grid Section -->
    <div class="language-letters-grid">
      <h2 class="group-heading" style="grid-column: 1 / -1;">VOWELS (स्वर)</h2>
      {letterPairs
        .filter((pair) => pair.type === 'vowel')
        .map((pair, index) => (
          <div key={`vowel-${index}`} class="language-letter-card language-letter-card-vowel">
            <div class="language-letter-kannada">{pair.kannada}</div>
            <div class="language-letter-hindi">{pair.hindi}</div>
          </div>
        ))}
  
      <div class="language-letters-separator" style="grid-column: 1 / -1;"></div>
  
      <h2 class="group-heading" style="grid-column: 1 / -1;">CONSONANTS (व्यंजन)</h2>
      {letterPairs
        .filter((pair) => pair.type === 'consonant')
        .map((pair, index) => (
          <div key={`consonant-${index}`} class="language-letter-card language-letter-card-consonant">
            <div class="language-letter-kannada">{pair.kannada}</div>
            <div class="language-letter-hindi">{pair.hindi}</div>
          </div>
        ))}
    </div>
  </div>

<script client:load>
  const toggleButton = document.getElementById('toggleButton');
  const hindiLabel = document.getElementById('hindiLabel');
  const kannadaLabel = document.getElementById('kannadaLabel');
  let isKannadaFirst = true;

  toggleButton.addEventListener('click', () => {
    toggleButton.classList.toggle('toggled');
    hindiLabel.classList.toggle('active');
    kannadaLabel.classList.toggle('active');

    document.querySelectorAll('.language-letter-card').forEach((card) => {
      card.classList.toggle('reverse');
    });

    isKannadaFirst = !isKannadaFirst;
  });

  updateUI();
</script>
<style>
/* Dropdown Container */
.toggle-container {
  display: flex;
  justify-content: center;
  gap: 2rem;
  /*margin-bottom: 1rem;*/
  position: relative;
  z-index: 2;
  flex-wrap: wrap;
}

/* Dropdown Wrapper */
.dropdown-wrapper {
  position: relative;
  min-width: 240px;
  margin: 0.5rem;
}

/* Dropdown Label */
.dropdown-label {
  display: block;
  margin-bottom: 0.8rem;
  font-size: 1.1rem;
  color: #2dd4bf;
  /*color:#1d4ed8;*/
  text-transform: uppercase;
  letter-spacing: 1px;
  font-weight: 600;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* Dropdown Select */
.toggle-container select {
  width: 100%;
  padding: 1rem 2.5rem 1rem 1.5rem;
  font-size: 1.1rem;
  border: 2px solid rgba(125, 211, 252, 0.3);
  border-radius: 12px;
  background: linear-gradient(145deg, #1d4ed8, #123085);
  color: white;
  cursor: pointer;
  appearance: none;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
              0 2px 4px -1px rgba(0, 0, 0, 0.06);
}

/* Custom Dropdown Arrow */
.toggle-container select {
  background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3e%3cpath d='M7 10l5 5 5-5z'/%3e%3c/svg%3e");
  background-repeat: no-repeat;
  background-position: right 1rem center;
  background-size: 1.5em;
}

/* Hover Effects */
.toggle-container select:hover {
  border-color: #7dd3fc;
  transform: translateY(-1px);
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1),
              0 4px 6px -2px rgba(0, 0, 0, 0.05);
}

/* Focus State */
.toggle-container select:focus {
  outline: none;
  border-color: #2dd4bf;
  box-shadow: 0 0 0 3px rgba(45, 212, 191, 0.3);
}

/* Option Styling */
.toggle-container select option {
  padding: 1rem;
  background: #1e293b;
  color: #f8fafc;
  border-bottom: 1px solid rgba(125, 211, 252, 0.1);
}

.toggle-container select option:checked {
  background: rgba(29, 78, 216, 0.5);
  font-weight: 600;
}

/* Responsive Design */
@media (max-width: 640px) {
  .toggle-container {
    flex-direction: column;
    gap: 1rem;
  }

  .dropdown-wrapper {
    width: 100%;
    min-width: auto;
  }

  .toggle-container select {
    font-size: 1rem;
    padding: 0.8rem 2rem 0.8rem 1rem;
  }
}

  </style>