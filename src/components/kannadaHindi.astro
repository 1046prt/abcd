---
import "@/assets/styles/kannada.css";

interface LetterPair {
  hindi: string;
  kannada: string;
  type: 'vowel' | 'consonant' | 'separator';
}

const generateLetters = (startCode: number, length: number, extraKeys: number[] = []): string[] =>
  Array.from({ length }, (_, i) => String.fromCodePoint(startCode + i))
    .filter((_, index) => !extraKeys.includes(startCode + index));

const hindiVowels = generateLetters(2309, 16, [2317, 2321]);
const hindiConsonants = generateLetters(2325, 37);
const kannadaVowels = generateLetters(3205, 16, [3213, 3217]);
const kannadaConsonants = generateLetters(3221, 37);

const letterPairs: LetterPair[] = [
  ...hindiVowels.map((hindi, i) => ({
    hindi,
    kannada: kannadaVowels[i],
    type: 'vowel',
  })),
  ...hindiConsonants.map((hindi, i) => ({
    hindi,
    kannada: kannadaConsonants[i],
    type: 'consonant',
  })),
];

let toggleOrder = false;

const languages = [
  { code: 'hi', name: 'हिंदी' },
  { code: 'kn', name: 'ಕನ್ನಡ' },
  { code: 'en', name: 'English' },
];

let selectedLanguage1 = 'hi';
let selectedLanguage2 = 'kn';

const updateUI = () => {
  const languageLabels = document.querySelectorAll('.language-label');
  languageLabels[0].textContent = languages.find(lang => lang.code === selectedLanguage1)?.name || '';
  languageLabels[1].textContent = languages.find(lang => lang.code === selectedLanguage2)?.name || '';

  document.querySelectorAll('.language-letter-card').forEach((card, index) => {
    const pair = letterPairs[index];
    const lang1Letter = selectedLanguage1 === 'hi' ? pair.hindi : pair.kannada;
    const lang2Letter = selectedLanguage2 === 'hi' ? pair.hindi : pair.kannada;

    card.querySelector('.language-letter-kannada').textContent = lang1Letter;
    card.querySelector('.language-letter-hindi').textContent = lang2Letter;
  });
};

const handleLanguageChange = (event, isFirstDropdown) => {
  if (isFirstDropdown) {
    selectedLanguage1 = event.target.value;
  } else {
    selectedLanguage2 = event.target.value;
  }
  updateUI();
};
---


<div class="language-letters-container">
  <div class="toggle-container">
    <select id="languageDropdown1" on:change={(e) => handleLanguageChange(e, true)}>
      {languages.map(lang => (
        <option value={lang.code} selected={lang.code === selectedLanguage1}>{lang.name}</option>
      ))}
    </select>
    <select id="languageDropdown2" on:change={(e) => handleLanguageChange(e, false)}>
      {languages.map(lang => (
        <option value={lang.code} selected={lang.code === selectedLanguage2}>{lang.name}</option>
      ))}
    </select>
   
  </div>
  
  <div class="language-letters-grid">
    <h2 class="group-heading" style="grid-column: 1 / -1;">VOWELS (स्वर)</h2>
    {letterPairs
      .filter((pair) => pair.type === 'vowel')
      .map((pair, index) => (
        <div key={`vowel-${index}`} class="language-letter-card language-letter-card-vowel">
          <div class="language-letter-kannada">{pair.kannada}</div>
          <div class="language-letter-hindi">{pair.hindi}</div>
        </div>
      ))}
  
    <div class="language-letters-separator" style="grid-column: 1 / -1;"></div>
  
    <h2 class="group-heading" style="grid-column: 1 / -1;">CONSONANTS (व्यंजन)</h2>
    {letterPairs
      .filter((pair) => pair.type === 'consonant')
      .map((pair, index) => (
        <div key={`consonant-${index}`} class="language-letter-card language-letter-card-consonant">
          <div class="language-letter-kannada">{pair.kannada}</div>
          <div class="language-letter-hindi">{pair.hindi}</div>
        </div>
      ))}
  </div>
</div>

<script client:load>
  const toggleButton = document.getElementById('toggleButton');
  const hindiLabel = document.getElementById('hindiLabel');
  const kannadaLabel = document.getElementById('kannadaLabel');
  let isKannadaFirst = true;

  toggleButton.addEventListener('click', () => {
    toggleButton.classList.toggle('toggled');
    hindiLabel.classList.toggle('active');
    kannadaLabel.classList.toggle('active');

    document.querySelectorAll('.language-letter-card').forEach((card) => {
      card.classList.toggle('reverse');
    });

    isKannadaFirst = !isKannadaFirst;
  });

  updateUI();
</script>
<style>
  .toggle-container {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
  }
  
  .toggle-container select {
    padding: 0.5rem;
    font-size: 1rem;
    border-radius: 5px;
    border: 1px solid #ccc;
    background-color:  #123085;
    cursor: pointer;
  }
  
  .toggle-container select:focus {
    outline: none;
    border-color: #007bff;
  }
  
  @media (max-width: 600px) {
    .toggle-container {
      flex-direction: column;
      gap: 0.5rem;
    }
  }
  </style>