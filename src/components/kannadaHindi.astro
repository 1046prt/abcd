---
import "@/assets/styles/kannada.css";
interface LetterPair {
  hindi: string;
  kannada: string;
  english: string;
  type: "vowel" | "consonant" | "separator";
}

// Generate unicode characters for Hindi and Kannada
const generateLetters = (startCode: number, length: number, extraKeys: number[] = []): string[] =>
  Array.from({ length }, (_, i) => String.fromCodePoint(startCode + i)).filter(
    (_, index) => !extraKeys.includes(startCode + index)
  );

// Updated English equivalents with more accurate transliterations
const englishVowels = ["a", "ā", "i", "ī", "u", "ū", "e", "ai", "o", "au", "aṃ", "aḥ"];

const englishConsonants = [
  "ka",
  "kha",
  "ga",
  "gha",
  "ṅa",
  "ca",
  "cha",
  "ja",
  "jha",
  "ña",
  "ṭa",
  "ṭha",
  "ḍa",
  "ḍha",
  "ṇa",
  "ta",
  "tha",
  "da",
  "dha",
  "na",
  "pa",
  "pha",
  "ba",
  "bha",
  "ma",
  "ya",
  "ra",
  "la",
  "va",
  "śa",
  "ṣa",
  "sa",
  "ha",
  "ḷa"
];
const hindiVowels = generateLetters(2309, 16, [2317, 2321]);
const hindiConsonants = generateLetters(2325, 37);
const kannadaVowels = generateLetters(3205, 16, [3213, 3217]);
const kannadaConsonants = generateLetters(3221, 37);
const gujaratiVowels = generateLetters(0xA85, 16, [0xA8D, 0xA91]);
const gujaratiConsonants = generateLetters(0xA95, 37);
const punjabiVowels = generateLetters(0xA05, 12); // Punjabi has 10 vowels + 2 extras
const punjabiConsonants = generateLetters(0xA15, 37); // 35 consonants in Gurmukhi
// Create letter pairs with all three scripts
const letterPairs: LetterPair[] = [
  ...hindiVowels.map((hindi, i) => ({
    hindi,
    marathi: hindi,
    kannada: kannadaVowels[i],
    gujarati: gujaratiVowels[i], // New
    punjabi: punjabiVowels[i] || "", // New
    english: englishVowels[i] || "",
    type: "vowel" as const
  })),
  ...hindiConsonants.map((hindi, i) => ({
    hindi,
    marathi: hindi,
    kannada: kannadaConsonants[i],
    gujarati: gujaratiConsonants[i], // New
    punjabi: punjabiConsonants[i] || "", // New
    english: englishConsonants[i] || "",
    type: "consonant" as const
  }))
];

const languages = [
  { code: "PL", name: "Select Primary Language" , disabled:true },
  { code: "hi", name: "हिंदी" },
  { code: "mr", name: "मराठी" },  // New
  { code: "kn", name: "ಕನ್ನಡ" },
  { code: "gu", name: "ગુજરાતી" }, // New
  { code: "pa", name: "ਪੰਜਾਬੀ" }, // New
  { code: "en", name: "English" }
];
const languages2 = [
  { code: "SL", name: "Select Secondary Language" , disabled:true },
  { code: "hi", name: "हिंदी" },
  { code: "mr", name: "मराठी" },  // New
  { code: "kn", name: "ಕನ್ನಡ" },
  { code: "gu", name: "ગુજરાતી" }, // New
  { code: "pa", name: "ਪੰਜਾਬੀ" }, // New
  { code: "en", name: "English" }
];
let selectedLanguage1 = "hi";
let selectedLanguage2 = "kn";

const getLetterForLanguage = (pair: LetterPair, langCode: string): string => {
  switch (langCode) {
    case "hi":
      return pair.hindi;
    case "mr":
      return pair.marathi;  // New
    case "kn":
      return pair.kannada;
    case "gu":
      return pair.gujarati; // New
    case "pa":
      return pair.punjabi; // New
    case "en":
      return pair.english;
    default:
      return "";
  }
};
---

<div class="language-letters-container">
  <!-- Dropdown Section -->
  <div class="toggle-container">
    <div class="dropdown-wrapper">
      <label id="lang1Label" class="dropdown-label language-label active"> PRIMARY LANGUAGE </label>
      <select id="languageDropdown1">
        
        { 
          languages.map((lang) => (
            <option class="opt" value={lang.code} selected={lang.code === selectedLanguage1}  disabled={lang.disabled ? 'disabled' : null}>
              {lang.name} ({lang.code.toUpperCase()})
            </option>
          ))
        }
      </select>
    </div>
    <!-- Add this swap button -->
    <button id="toggleButton" class="toggle-button" aria-label="Swap languages" title="Swap languages">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
        <path d="M17 14 9 14 9 16 17 16 17 19 22 15 17 11 17 14z"></path><path
          d="M15 10 15 8 7 8 7 5 2 9 7 13 7 10 15 10z"></path>
      </svg>
    </button>

    <div class="dropdown-wrapper">
      <label id="lang2Label" class="dropdown-label language-label"> SECONDARY LANGUAGE </label>
      <select id="languageDropdown2">
        {
          languages2.map((lang) => (
            <option class="opt" value={lang.code} selected={lang.code === selectedLanguage2} disabled={lang.disabled ? 'disabled' : null}>
              {lang.name} ({lang.code.toUpperCase()})
            </option>
          ))
        }
      </select>
    </div>
  </div>

  <!-- Letters Grid Section -->
  <div class="language-letters-grid">
    <h2 class="group-heading" style="grid-column: 1 / -1;">VOWELS (स्वर)</h2>
    {
      letterPairs
        .filter((pair) => pair.type === "vowel")
        .map((pair, index) => (
          <div data-key={`vowel-${index}`} class="language-letter-card language-letter-card-vowel">
            <div class="language-letter-top">{getLetterForLanguage(pair, selectedLanguage1)}</div>
            <div class="language-letter-bottom">{getLetterForLanguage(pair, selectedLanguage2)}</div>
          </div>
        ))
    }

    <div class="language-letters-separator" style="grid-column: 1 / -1;"></div>

    <h2 class="group-heading" style="grid-column: 1 / -1;">CONSONANTS (व्यंजन)</h2>
    {
      letterPairs
        .filter((pair) => pair.type === "consonant")
        .map((pair, index) => (
          <div data-key={`consonant-${index}`} class="language-letter-card language-letter-card-consonant">
            <div class="language-letter-top">{getLetterForLanguage(pair, selectedLanguage1)}</div>
            <div class="language-letter-bottom">{getLetterForLanguage(pair, selectedLanguage2)}</div>
          </div>
        ))
    }
  </div>
</div>
<script type="module" is:inline>
  // Letter generation helpers
  const generateLetters = (startCode, length, extraCodes = []) =>
    Array.from({ length }, (_, i) => String.fromCodePoint(startCode + i)).filter(
      (_, i) => !extraCodes.includes(startCode + i)
    );

  // Letter sets
  const hindiVowels = generateLetters(2309, 16, [2317, 2321]);
  const hindiConsonants = generateLetters(2325, 37);
  const kannadaVowels = generateLetters(3205, 16, [3213, 3217]);
  const kannadaConsonants = generateLetters(3221, 37);
  const gujaratiVowels = generateLetters(0xA85, 16, [0xA8D, 0xA91]);
  const gujaratiConsonants = generateLetters(0xA95, 37);
  const punjabiVowels = generateLetters(0xA05, 12); // Punjabi has 10 vowels + 2 extras
  const punjabiConsonants = generateLetters(0xA15, 37); // 35 consonants in Gurmukhi
  // Use correct English transliterations instead of just basic letters
  const englishVowels = ["a", "ā", "i", "ī", "u", "ū", "e", "ai", "o", "au", "aṃ", "aḥ"];
  const englishConsonants = [
    "ka",
    "kha",
    "ga",
    "gha",
    "ṅa",
    "ca",
    "cha",
    "ja",
    "jha",
    "ña",
    "ṭa",
    "ṭha",
    "ḍa",
    "ḍha",
    "ṇa",
    "ta",
    "tha",
    "da",
    "dha",
    "na",
    "nna",
    "pa",
    "pha",
    "ba",
    "bha",
    "ma",
    "ya",
    "ra",
    "rra",
    "la",
    "va",
    "śa",
    "va",
    "sha",
    "sha",
    "sa",
    "ha",
    "kṣa",
    "ha"
  ];

  const languages = [
  { code: "hi", name: "हिंदी" },
  { code: "mr", name: "मराठी" },  // New
  { code: "kn", name: "ಕನ್ನಡ" },
  { code: "gu", name: "ગુજરાતી" }, // New
  { code: "pa", name: "ਪੰਜਾਬੀ" }, // New
  { code: "en", name: "English" }
  ];

  let selectedLanguage1 = "hi";
  let selectedLanguage2 = "kn";
  //let isReversed = false;

  function getLetter(lang, type, index) {
    if (lang === "en") {
      return type === "vowel" ? englishVowels[index] || "" : englishConsonants[index] || "";
    }
    if (lang === "hi" || lang === "mr") {// Marathi shares Hindi letters
      return type === "vowel" ? hindiVowels[index] || "" : hindiConsonants[index] || "";
    }
    if (lang === "kn") {
      return type === "vowel" ? kannadaVowels[index] || "" : kannadaConsonants[index] || "";
    }
    if (lang === "gu") { // New
      return type === "vowel" ? gujaratiVowels[index] || "" : gujaratiConsonants[index] || "";
    }
    if (lang === "pa") { // New
    return type === "vowel" ? punjabiVowels[index] || "" : punjabiConsonants[index] || "";
  }
    return "";
  }
  // Main function to swap languages
  function swapLanguages() {
    // Swap the language variables
    [selectedLanguage1, selectedLanguage2] = [selectedLanguage2, selectedLanguage1];

    // Update the dropdown values
    document.getElementById("languageDropdown1").value = selectedLanguage1;
    document.getElementById("languageDropdown2").value = selectedLanguage2;

    // Refresh the grid
    updateGrid();
    // Toggle persistent state
    const button = document.getElementById("toggleButton");
    button.classList.toggle("toggled");

    // Keep the animation
    button.classList.add("swapping");
    setTimeout(() => button.classList.remove("swapping"), 300);
    // Add visual feedback
    const toggleButton = document.getElementById("toggleButton");
    toggleButton.classList.add("swapping");
    setTimeout(() => {
      toggleButton.classList.remove("swapping");
    }, 300);
  }

  // Helper function to update language labels

  function updateGrid() {
    // Update all letter cards
    const vowelCards = document.querySelectorAll(".language-letter-card-vowel");
    const consonantCards = document.querySelectorAll(".language-letter-card-consonant");

    // Update vowels
    vowelCards.forEach((card, index) => {
      const topElement = card.querySelector(".language-letter-top");
      const bottomElement = card.querySelector(".language-letter-bottom");

      if (topElement && bottomElement) {
        topElement.textContent = getLetter(selectedLanguage1, "vowel", index);
        bottomElement.textContent = getLetter(selectedLanguage2, "vowel", index);

        // Add special styling for English text
        topElement.classList.toggle("english-text", selectedLanguage1 === "en");
        bottomElement.classList.toggle("english-text", selectedLanguage2 === "en");

        // Add transliteration class for proper display of diacritical marks
        topElement.classList.toggle("transliteration", selectedLanguage1 === "en");
        bottomElement.classList.toggle("transliteration", selectedLanguage2 === "en");
      }
    });

    // Update consonants
    consonantCards.forEach((card, index) => {
      const topElement = card.querySelector(".language-letter-top");
      const bottomElement = card.querySelector(".language-letter-bottom");

      if (topElement && bottomElement) {
        topElement.textContent = getLetter(selectedLanguage1, "consonant", index);
        bottomElement.textContent = getLetter(selectedLanguage2, "consonant", index);

        // Add special styling for English text
        topElement.classList.toggle("english-text", selectedLanguage1 === "en");
        bottomElement.classList.toggle("english-text", selectedLanguage2 === "en");

        // Add transliteration class for proper display of diacritical marks
        topElement.classList.toggle("transliteration", selectedLanguage1 === "en");
        bottomElement.classList.toggle("transliteration", selectedLanguage2 === "en");
      }
    });
  }

  // Set up event listeners
  document.addEventListener("DOMContentLoaded", () => {
    const dropdown1 = document.getElementById("languageDropdown1");
    const dropdown2 = document.getElementById("languageDropdown2");
    const toggleButton = document.getElementById("toggleButton");

    // Event listeners
    dropdown1.addEventListener("change", (e) => {
      selectedLanguage1 = e.target.value;

      updateGrid();
    });

    dropdown2.addEventListener("change", (e) => {
      selectedLanguage2 = e.target.value;

      updateGrid();
    });

    // Add click handler for swap button
    toggleButton.addEventListener("click", swapLanguages);

    updateGrid();
  });
</script>
