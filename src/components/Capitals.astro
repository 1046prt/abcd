---
export interface Props {
  stateList: any[];
  utList: any[];
}
import "@/assets/styles/capital.css";
const { stateList, utList } = Astro.props;
// Create a function to generate a color class based on index
function getColorClass(index: number) {
  const colorClasses = [
    "card-color-1",
    "card-color-2", 
    "card-color-3",
    "card-color-4",
    "card-color-5",
    "card-color-6",
    "card-color-7",
    "card-color-8"
  ];
  return colorClasses[index % colorClasses.length];
}
---

<div class="geographical-mosaic">
  <nav class="head">
    <h1>States of India</h1>
  </nav>

  <div class="controls-bar">
    <div class="search-container" role="search">
      <span class="search-icon" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 16 16" fill="currentColor">
  <path fill-rule="evenodd" d="M11.742 10.344a6.5 6.5 0 10-1.398 1.398l3.85 3.85a1 1 0 001.415-1.414l-3.85-3.85zM12 6.5a5.5 5.5 0 11-11 0 5.5 5.5 0 0111 0z"/>
</svg>
</span>
      <input
        type="search"
        id="searchBar"
        aria-label="Search states and union territories"
        placeholder="Search states or capitals..."
        autocomplete="off"
      />
      <button class="clear-button" aria-label="Clear search">Ã—</button>
    </div>
  </div>

  <div class="location-container">
    <section class="location-section states-section" id="states">
      <div class="section-header">
        <h2>State List</h2>
        <span class="count-badge" id="states-count">28 States</span>
      </div>
      <div class="location-grid" id="states-grid">
        {
          stateList.map((state, index) => (
            <article class={`location-card color-${getColorClass(index)}`} data-name={state.name.toLowerCase()} data-capital={state.capital.toLowerCase()}>
              <details>
                <summary title={state.name}>{state.name}</summary>
                <p title={state.capital}>{state.capital}</p>
              </details>
            </article>
          ))
        }
      </div>
      <div class="no-results" id="states-no-results">
        No states found matching your search.
      </div>
    </section>

    <section class="location-section ut-section" id="uts">
      <div class="section-header">
        <h2>Union Territory List</h2>
        <span class="count-badge" id="uts-count">8 UTs</span>
      </div>
      <div class="location-grid" id="uts-grid">
        {
          utList.map((ut, index) => (
            <article class={`location-card color-${getColorClass(index)}`} data-name={ut.name.toLowerCase()} data-capital={ut.capital.toLowerCase()}>
              <details>
                <summary title={ut.name}>{ut.name}</summary>
                <p title={ut.capital}>{ut.capital}</p>
              </details>
            </article>
          ))
        }
      </div>
      <div class="no-results" id="uts-no-results">
        No union territories found matching your search.
      </div>
    </section>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const searchBar = document.getElementById("searchBar");
    const clearButton = document.querySelector(".clear-button");
    const statesGrid = document.getElementById("states-grid");
    const utsGrid = document.getElementById("uts-grid");
    const statesNoResults = document.getElementById("states-no-results");
    const utsNoResults = document.getElementById("uts-no-results");
    const statesCount = document.getElementById("states-count");
    const utsCount = document.getElementById("uts-count");

    // Make entire card clickable
    function makeCardsClickable() {
      const allCards = document.querySelectorAll('.location-card');
      allCards.forEach(card => {
        card.addEventListener('click', function(e) {
          e.preventDefault();
          const details = this.querySelector('details');
          if (details) {
            details.open = !details.open;
          }
        });
      });
    }

    // Update visibility and counts
    function updateVisibility(query) {
      const stateCards = statesGrid.querySelectorAll("article");
      const utCards = utsGrid.querySelectorAll("article");
      
      let visibleStates = 0;
      let visibleUts = 0;

      // Filter states
      stateCards.forEach(card => {
        const name = card.dataset.name || '';
        const capital = card.dataset.capital || '';
        const isVisible = name.includes(query) || capital.includes(query);
        
        card.style.display = isVisible ? "" : "none";
        if (isVisible) visibleStates++;
      });

      // Filter UTs
      utCards.forEach(card => {
        const name = card.dataset.name || '';
        const capital = card.dataset.capital || '';
        const isVisible = name.includes(query) || capital.includes(query);
        
        card.style.display = isVisible ? "" : "none";
        if (isVisible) visibleUts++;
      });

      // Update counts
      statesCount.textContent = `${visibleStates} State${visibleStates !== 1 ? 's' : ''}`;
      utsCount.textContent = `${visibleUts} UT${visibleUts !== 1 ? 's' : ''}`;

      // Show/hide no results messages
      statesNoResults.style.display = visibleStates === 0 && query ? 'block' : 'none';
      utsNoResults.style.display = visibleUts === 0 && query ? 'block' : 'none';
    }

    // Search functionality
    if (searchBar) {
      searchBar.addEventListener("input", function() {
        const query = this.value.toLowerCase().trim();
        updateVisibility(query);
      });

      searchBar.addEventListener("keydown", function(e) {
        if (e.key === "Escape") {
          this.value = "";
          updateVisibility("");
          this.blur();
        }
      });
    }

    // Clear button functionality
    if (clearButton) {
      clearButton.addEventListener("click", function() {
        searchBar.value = "";
        updateVisibility("");
        searchBar.focus();
      });
    }

    // Initialize
    makeCardsClickable();
    updateVisibility(""); 
      });
</script>
