---
export interface Props {
  stateList: any[];
  utList: any[];
  colorPalette: string[];
  getContrastColor: (hex: string) => string;
}

const { stateList, utList, colorPalette, getContrastColor } = Astro.props;
---

<div class="geographical-mosaic">
  <!-- Hero Section -->
  <div class="hero-section">
    <div class="hero-content">
      <h1 class="main-title">Explore India's Administrative Landscape</h1>
      <p class="hero-subtitle">
        Discover the diverse tapestry of states and union territories
      </p>
    </div>
  </div>

  <!-- Controls Bar -->
  <div class="controls-bar">
    <div class="search-container">
      <span class="search-icon">üîç</span>
      <input type="text" id="searchBar" placeholder="Search locations..." />
      <button class="clear-button">√ó</button>
    </div>
  </div>

  <!-- Mosaic Sections -->
  <div class="location-container">
    <section class="location-section states-section">
      <div class="section-header">
        <h2 class="section-title">
          <span class="icon">üèõÔ∏è</span> States of India
        </h2>
        <div class="stats-badge" id="statesCount" data-total={stateList.length}>
          {stateList.length} Total States
        </div>
      </div>

      <div class="location-grid">
        {stateList.map((state, index) => (
          <div
            class="location-card"
            style={`--card-bg: ${colorPalette[index % colorPalette.length]}; 
                    --card-text: ${getContrastColor(colorPalette[index % colorPalette.length])}`}
          >
            <div class="card-inner">
              <h3 class="location-name">{state.name}</h3>
              <div class="location-details">
                <span class="label">Capital</span>
                <span class="value">{state.capital}</span>
              </div>
              <div class="card-overlay"></div>
            </div>
          </div>
        ))}
      </div>
    </section>

    <section class="location-section ut-section">
      <div class="section-header">
        <h2 class="section-title">
          <span class="icon">üèùÔ∏è</span> Union Territories
        </h2>
        <div class="stats-badge" id="utsCount" data-total={utList.length}>
          {utList.length} Total UTs
        </div>
      </div>

      <div class="location-grid">
        {utList.map((ut, index) => (
          <div
            class="location-card"
            style={`--card-bg: ${colorPalette[index % colorPalette.length]}; 
                    --card-text: ${getContrastColor(colorPalette[index % colorPalette.length])}`}
          >
            <div class="card-inner">
              <h3 class="location-name">{ut.name}</h3>
              <div class="location-details">
                <span class="label">Capital</span>
                <span class="value">{ut.capital}</span>
              </div>
              <div class="card-overlay"></div>
            </div>
          </div>
        ))}
      </div>
    </section>
  </div>
</div>

<script>
  const searchBar = document.getElementById('searchBar');
  const clearButton = document.querySelector('.clear-button');
  const statesCountElement = document.getElementById('statesCount');
  const utsCountElement = document.getElementById('utsCount');

  const updateCounts = (query) => {
    const statesTotal = statesCountElement.dataset.total;
    const utsTotal = utsCountElement.dataset.total;

    if (!query) {
      statesCountElement.textContent = `${statesTotal} Total States`;
      utsCountElement.textContent = `${utsTotal} Total UTs`;
      return;
    }

    const visibleStates = document.querySelectorAll('.states-section .location-card:not([style*="display: none"])').length;
    const visibleUTs = document.querySelectorAll('.ut-section .location-card:not([style*="display: none"])').length;

    statesCountElement.textContent = `${visibleStates} ${visibleStates === 1 ? 'State' : 'States'} Found`;
    utsCountElement.textContent = `${visibleUTs} ${visibleUTs === 1 ? 'UT' : 'UTs'} Found`;
  };

  searchBar.addEventListener('input', function () {
    const query = this.value.toLowerCase().trim();
    const cards = document.querySelectorAll('.location-card');

    cards.forEach((card) => {
      const name = card.querySelector('.location-name').textContent.toLowerCase();
      card.style.display = name.startsWith(query) ? '' : 'none';
    });

    updateCounts(query);
  });

  clearButton.addEventListener('click', () => {
    searchBar.value = '';
    searchBar.dispatchEvent(new Event('input'));
    searchBar.focus();
  });

  // Card hover effects
  document.querySelectorAll('.location-card').forEach((card) => {
    card.addEventListener('mouseenter', () => card.classList.add('hover-effect'));
    card.addEventListener('mouseleave', () => card.classList.remove('hover-effect'));
  });
</script>

<style>
  /* Modified CSS */
  .controls-bar {
    justify-content: flex-start;
    padding: 0 1rem;
    margin-bottom: 2.5rem;
  }

  .search-container {
    width: 500px;
    max-width: 100%;
    border-width: 3px;
    padding: 0.8rem;
  }

  #searchBar {
    font-size: 1.2rem;
    padding: 0.5rem 1rem;
  }

  .search-icon {
    font-size: 1.5rem;
    margin-left: 0.5rem;
  }

  .clear-button {
    font-size: 1.5rem;
    padding: 0 1rem;
  }

  /* Removed help button and modal styles */
  /* Adjusted hero section padding */
  .hero-section {
    padding: 4rem 2rem;
  }

  /* Rest of the original styles remain unchanged */
</style>
<style>
  :root {
    --primary-blue: #2c3e50;
    --soft-white: #f8f9fa;
    --gold-accent: #ffd700;
    --soft-shadow: 0 10px 20px rgba(0, 0, 0, 0.08);
    --hover-shadow: 0 15px 30px rgba(0, 0, 0, 0.12);
    --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Overall Mosaic Container */
  .geographical-mosaic {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
  }

  /* Hero Section */
  .hero-section {
    position: relative;
    text-align: center;
    margin-bottom: 2rem;
    padding: 5rem 2rem;
    border-radius: 1.5rem;
    background: var(--primary-blue);
    overflow: hidden;
    box-shadow: var(--soft-shadow);
  }

  .hero-content {
    position: relative;
    z-index: 1;
  }

  .main-title {
    font-size: 3.5rem;
    margin-bottom: 1.5rem;
    color: white;
    font-weight: 800;
    letter-spacing: -0.5px;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .hero-subtitle {
    font-size: 1.5rem;
    color: rgba(255, 255, 255, 0.85);
    max-width: 800px;
    margin: 0 auto;
    line-height: 1.6;
  }

  /* Help Button */
  .help-button {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: var(--gold-accent);
    color: var(--primary-blue);
    border: none;
    border-radius: 2rem;
    padding: 0.5rem 1.5rem;
    font-size: 1.1rem;
    font-weight: 700;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: var(--transition-smooth);
    box-shadow: var(--soft-shadow);
  }

  .help-button:hover {
    background: #ffd700;
    transform: scale(1.05);
    box-shadow: 0 5px 15px rgba(255, 215, 0, 0.3);
  }

  /* Controls Bar */
  .controls-bar {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 2rem;
  }

  /* Updated Search Container Styles */
  .search-container {
    display: flex;
    align-items: center;
    width: 300px;
    max-width: 100%;
    border: 2px solid var(--primary-blue);
    border-radius: 0.5rem;
    background: var(--soft-white);
    padding: 0.5rem;
  }

  #searchBar {
    flex: 1;
    border: none;
    outline: none;
    font-size: 1rem;
    color: black; /* sets the text color inside the search bar to black */
    background: transparent;
    padding: 0.5rem;
  }

  .search-icon {
    margin-right: 0.5rem;
    font-size: 1.2rem;
    color: var(--primary-blue);
  }

  .clear-button {
    background: none;
    border: none;
    color: #999;
    cursor: pointer;
    transition: var(--transition-smooth);
    margin-left: 0.5rem;
  }

  /* Location Sections */
  .location-container {
    display: grid;
    gap: 4rem;
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2.5rem;
    padding-bottom: 1rem;
    border-bottom: 3px solid var(--gold-accent);
  }

  .section-title {
    display: flex;
    align-items: center;
    gap: 1rem;
    font-size: 2.25rem;
    font-weight: 700;
    color: white;
  }

  .icon {
    font-size: 1.8rem;
  }

  .stats-badge {
    background: var(--primary-blue);
    color: white;
    padding: 0.6rem 1.4rem;
    border-radius: 2rem;
    font-weight: 600;
    box-shadow: var(--soft-shadow);
  }

  .location-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
  }

  /* Location Card */
  .location-card {
    position: relative;
    background: var(--card-bg);
    color: var(--card-text);
    border-radius: 1rem;
    overflow: hidden;
    transition: var(--transition-smooth);
    box-shadow: var(--soft-shadow);
    border: 1px solid rgba(255, 255, 255, 0.15);
    animation: fadeIn 0.6s ease forwards;
  }

  .card-inner {
    padding: 2rem;
    position: relative;
    z-index: 2;
    min-height: 180px;
  }

  .location-card::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(145deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);
    z-index: 1;
  }

  .location-card:hover {
    transform: translateY(-5px);
    box-shadow: var(--hover-shadow);
  }

  .location-name {
    font-size: 1.7rem;
    margin-bottom: 1.5rem;
    font-weight: 800;
    color: var(--card-text);
    position: relative;
    padding-bottom: 0.5rem;
  }

  .location-name::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 40px;
    height: 3px;
    background: currentColor;
    opacity: 0.3;
  }

  .location-details {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 0;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }

  .label {
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    opacity: 0.8;
    font-weight: 600;
  }

  .value {
    font-weight: 700;
    font-size: 1.1rem;
    color: var(--card-text);
  }

  @media (max-width: 768px) {
    .main-title {
      font-size: 2.5rem;
    }
    .hero-subtitle {
      font-size: 1.2rem;
    }
    .section-title {
      font-size: 1.8rem;
    }
    .location-grid {
      grid-template-columns: 1fr;
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Help Modal */
  dialog#helpModal {
    border: none;
    border-radius: 10px;
    box-shadow: var(--soft-shadow);
    padding: 2rem;
    max-width: 500px;
    width: 90%;
    text-align: center;
    font-family: 'Inter', sans-serif;
  }
  
  .modal-content h2 {
    margin-top: 0;
    color: var(--primary-blue);
  }
  
  .modal-close {
    margin-top: 1.5rem;
    padding: 0.8rem 1.5rem;
    border: none;
    border-radius: 50px;
    background: var(--primary-blue);
    color: white;
    font-size: 1rem;
    cursor: pointer;
    transition: background 0.3s ease, transform 0.3s ease;
  }
  
  .modal-close:hover {
    background: var(--gold-accent);
    transform: translateY(-2px);
  }
</style>
