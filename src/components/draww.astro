---
import { alphabetMapper } from "../mappers/alphabet";
import { IMAGE_DIR, colorBox, fontBox, numberBox } from "../utils/draw";
import { getRandomValue } from "../utils/index";
---

<div class="container">
  <header class="header">
    <div class="action">
      <a href="/" class="back-button" aria-label="Go back" title="Go back">‚Üê Back</a>
    </div>
    <div class="caption">
      <h1 class="info" aria-live="polite">Press any key</h1>
    </div>
    <div class="controls">
      <label for="toggleCase" class="control-item">
        <input type="checkbox" name="change_case" id="toggleCase" class="visually-hidden" />
        <span id="text" class="control-button case-toggle" style="--content: 'A'" title="Toggle case" role="switch" aria-checked="false">A</span>
      </label>
      <label for="toggleFont" class="control-item">
        <input type="checkbox" name="change_font" id="toggleFont" class="visually-hidden" />
        <span id="font" class="control-button font-toggle" title="Change font" role="switch" aria-checked="false">T</span>
      </label>
      <label for="toggleBg" class="control-item">
        <input type="checkbox" name="change_bg" id="toggleBg" class="visually-hidden" />
        <span class="control-button bg-toggle" title="Toggle background" role="switch" aria-checked="false">üé®</span>
      </label>
    </div>
  </header>

  <main class="main">
    <section class="board">
      <div class="board__item char" id="char" aria-live="polite"></div>
    </section>
  </main>
</div>

<style>

  :root {
    --primary-bg: linear-gradient(135deg, #e0e7ff 0%, #a5b4fc 100%);
    --accent-color: #4338ca;
    --control-bg: rgba(255, 255, 255, 0.95);
    --text-color: #ffffff;
    --shadow: 0 6px 12px -2px rgba(0, 0, 0, 0.1), 0 3px 6px -3px rgba(0, 0, 0, 0.08);
    --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
  }

  /* Reset */
  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  /* Base container */
  .container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background: var(--primary-bg);
    font-family: 'Inter', system-ui, sans-serif;
    text-align: center;
  }

  /* Header ‚Äì merged: using the second (more prominent) style */
  .header {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 100%;
    padding: 1rem 2rem;
    background: rgba(255, 255, 255, 0.85);
    backdrop-filter: blur(15px);
    box-shadow: var(--shadow);
    gap: 1rem;
    position: relative;
  }

  .back-button {
    position: absolute;
    left: 2rem;
    top: 50%;
    transform: translateY(-50%);
    color: var(--text-color);
    text-decoration: none;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    transition: var(--transition);
  }

  .back-button:hover {
    background: rgba(67, 56, 202, 0.1);
    transform: translateY(calc(-50% - 2px));
  }

  .info {
    margin: 0;
    font-size: 1.5rem;
    color: black;
    font-weight: 500;
    text-align: center;
  }

  .controls {
    display: flex;
    justify-content: center;
    gap: 1rem;
    align-items: center;
    width: 100%;
  }

  .control-button {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 2.5rem;
    height: 2.5rem;
    background: var(--control-bg);
    border-radius: 0.5rem;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    border: 2px solid rgba(67, 56, 202, 0.2);
    transition: var(--transition);
    box-shadow: var(--shadow);
  }

  .control-button::before {
    content: '';
    position: absolute;
    z-index: 1;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: var(--accent-color);
    transform: scaleX(0);
    transform-origin: 0 50%;
    transition: transform 0.3s ease-out;
    opacity: 0.1;
  }

  .control-button:hover::before {
    transform: scaleX(1);
  }

  .control-button:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
  }

  /* Main ‚Äì merged: uses the properties from the second definition */
  .main {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: calc(100vh - 120px);
    overflow: hidden;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    transition: var(--transition);
  }

  /* Board ‚Äì merged from both definitions */
  .board {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    overflow: hidden;
    padding: 2rem;
  }

  .board-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    opacity: 0.3;
    filter: blur(10px);
    transform: scale(1.1);
    z-index: 1;
  }

  /* Char ‚Äì merged: using the first definition‚Äôs extra positioning and z-index */
  .char {
    position: relative;
    z-index: 2;
    text-align: center;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: clamp(8rem, 30vw, 20rem);
    font-weight: 900;
    color: var(--text-color);
    text-shadow: 0 4px 15px rgba(0, 0, 0, 0.5);
    transition: var(--transition);
    animation: charReveal 0.4s ease-out;
    will-change: transform, opacity;
  }

  @keyframes charReveal {
    from { 
      opacity: 0; 
      transform: scale(0.8); 
    }
    to { 
      opacity: 1; 
      transform: scale(1); 
    }
  }

  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  @media (max-width: 640px) {
    .header {
      padding: 1rem;
    }

    .back-button {
      position: absolute;
      left: 1rem;
      top: 1rem;
      transform: none;
    }
    
    .info {
      font-size: 1.25rem;
    }

    .char {
      font-size: clamp(4rem, 25vw, 15rem);
    }
  }
</style>


<script define:vars={{ 
  colorBox, 
  fontBox, 
  numberBox, 
  alphabetMapper, 
  IMAGE_DIR 
}}>
  // Initialize state
  let currentFontIndex = 0;
  let isUpperCase = true;

  // DOM elements
  const mainEl = document.querySelector("main");
  const boardDiv = document.querySelector(".board");
  const charDiv = document.getElementById("char");
  const toggleCaseSwitch = document.getElementById("toggleCase");
  const toggleFontSwitch = document.getElementById("toggleFont");
  const toggleBackgroundSwitch = document.getElementById("toggleBg");
  const info = document.querySelector(".info");
  const textSpan = document.getElementById("text");

  // Utility functions
  function getRandomValue(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
  }

  function updateDisplay(key) {
    // Audio feedback
    try {
      const audio = new Audio('data:audio/wav;base64,UklGRggAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhBAAAAAEA');
      audio.volume = 0.1;
      audio.play().catch(() => {});
    } catch (error) {
      console.log('Audio feedback unavailable');
    }

    // Number handling
    if (!isNaN(Number(key))) {
      boardDiv.style.backgroundColor = getRandomValue(colorBox);
      charDiv.textContent = key;
      info.textContent = numberBox[key] || 'Unknown';
      return;
    }

    // Alphabet handling
    const found = alphabetMapper.find(alpha => alpha.key.toUpperCase() === key.toUpperCase());
    if (found) {
      info.textContent = found.value;
      mainEl.style.backgroundImage = `url(${IMAGE_DIR}/${found.value}.jpg)`;
    }

    // Case handling
    charDiv.textContent = isUpperCase ? key.toUpperCase() : key.toLowerCase();
  }

  // Event listeners
  function handleKeyPress(e) {
    const key = e.key;
    if ((key.length === 1 && /[a-zA-Z0-9]/.test(key))) {
      updateDisplay(key);
    }
  }

  // Toggle case
  toggleCaseSwitch?.addEventListener("change", (e) => {
    isUpperCase = !e.target.checked;
    const currentText = charDiv.textContent;
    charDiv.textContent = isUpperCase ? currentText.toUpperCase() : currentText.toLowerCase();
    textSpan.setAttribute('aria-checked', !e.target.checked);
  });

  // Toggle font
  toggleFontSwitch?.addEventListener("change", () => {
    currentFontIndex = (currentFontIndex + 1) % fontBox.length;
    charDiv.style.fontFamily = fontBox[currentFontIndex];
  });

  // Toggle background
  toggleBackgroundSwitch?.addEventListener("change", (e) => {
    mainEl.style.backgroundBlendMode = e.target.checked ? "soft-light" : "normal";
    mainEl.style.filter = e.target.checked ? "brightness(0.9)" : "brightness(1)";
  });

  // Add event listeners
  document.addEventListener('keydown', handleKeyPress);

  // Initial console log
  console.log("Welcome to abcdkbd.com - Enhanced Interactive Learning");
</script>