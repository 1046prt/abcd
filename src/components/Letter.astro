---
import type { LetterEntity } from "@/types";
import CopyIcon from "@/assets/icons/copy.svg";

type Props = {
  item: LetterEntity;
};

const {
  item: { letter, code }
} = Astro.props;
---

<div class="letter">
  <p class="character">{letter}</p>
  <button id="copy-btn" class="copy-btn" title="Copy character" data-letter={letter}>
    <CopyIcon />
  </button>
  <span class="copy-feedback">Copied!</span>
  <def data-id="def" class="help" title="Definition">{code}</def>
</div>

<script>
  // Wait for the DOM to be loaded
  document.addEventListener("DOMContentLoaded", () => {
    const copyButtons = document.querySelectorAll("#copy-btn");

    copyButtons.forEach((button) => {
      button.addEventListener("click", async () => {
        const letter = (button as HTMLElement).dataset.letter;
        if (!letter) return;

        try {
          await navigator.clipboard.writeText(letter);
          const letterDiv = button.closest(".letter") as HTMLElement;
          const feedback = letterDiv.querySelector(".copy-feedback") as HTMLElement;

          // Add animation classes
          letterDiv.classList.add("copied");
          feedback.classList.add("show");

          // Remove animation classes after animation
          setTimeout(() => {
            letterDiv.classList.remove("copied");
            feedback.classList.remove("show");
          }, 2000);
        } catch (err) {
          console.error("Failed to copy text: ", err);
        }
      });
    });
  });
</script>

<style>
  .letter {
    position: relative;
  }

  .copy-btn {
    background: none;
    border: none;
    cursor: pointer;
    padding: 4px;
    color: #666;
    transition: color 0.2s;
  }

  .copy-btn:hover {
    color: #333;
  }

  .copy-btn svg {
    display: block;
  }

  .copy-feedback {
    position: absolute;
    top: -30px;
    left: 50%;
    transform: translateX(-50%) translateY(10px);
    background: #333;
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 14px;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }

  .copy-feedback.show {
    opacity: 1;
    visibility: visible;
    transform: translateX(-50%) translateY(0);
  }

  .letter.copied {
    animation: copyPulse 0.5s ease;
  }

  @keyframes copyPulse {
    0% {
      transform: scale(1);
      box-shadow: 0 0 0 0 rgba(52, 152, 219, 0.4);
    }
    50% {
      transform: scale(1.05);
      box-shadow: 0 0 0 10px rgba(52, 152, 219, 0.2);
    }
    100% {
      transform: scale(1);
      box-shadow: 0 0 0 0 rgba(52, 152, 219, 0);
    }
  }
</style>
