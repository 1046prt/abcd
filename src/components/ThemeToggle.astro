---
import SunIcon from "@/assets/icons/sun.svg";
import MoonIcon from "@/assets/icons/moon.svg";
---

<style is:inline>
  .toggle__theme {
    height: 20px;
    width: 20px;
  }
</style>

<theme-toggle class="ms-2 sm:ms-4">
  <button type="button" id="toggle-theme" class="toggle__theme" aria-label="Toggle Dark Mode">
    <SunIcon />
    <MoonIcon />
  </button>
</theme-toggle>

<script>
  class ThemeToggle extends HTMLElement {
    private button: HTMLButtonElement | null;
    private observer: MutationObserver | null;

    constructor() {
      super();
      this.button = this.querySelector("button");
      this.observer = null;

      this.button?.setAttribute("aria-pressed", String(document.documentElement.dataset.theme === "dark"));

      this.button?.addEventListener("click", this.handleThemeClick);
    }

    connectedCallback() {
      const root = document.documentElement;
      const mutationCallback = (mutationsList: MutationRecord[]) => {
        for (const mutation of mutationsList) {
          if (mutation.attributeName === "data-theme") {
            const newTheme = root.dataset.theme;
            this.button?.setAttribute("aria-pressed", String(newTheme === "dark"));
          }
        }
      };

      this.observer = new MutationObserver(mutationCallback);
      this.observer.observe(root, { attributes: true, attributeFilter: ["data-theme"] });
    }

    disconnectedCallback() {
      this.observer?.disconnect();
    }

    handleThemeClick = () => {
      const current = document.documentElement.dataset.theme || "light";
      const next = current === "dark" ? "light" : "dark";
      const event = new CustomEvent("theme-change", { detail: { theme: next } });
      document.dispatchEvent(event);
    };
  }

  customElements.define("theme-toggle", ThemeToggle);
</script>
