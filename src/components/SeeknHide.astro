---

const varnmala = Array.from({ length: 26 }, (_, i) => String.fromCodePoint(65 + i));
---

<div class="container">
  <!--<dialog>
    <button autofocus>Close</button>
    <p>Hide & Seek</p>
    <p>
      Press any alphabet key from keyboard and that letter will appears and when
      you press again then it will disappears. See some hover and active effect
      while hover over each card
    </p>
  </dialog>-->

  <header>
    <div class="caption">
      <h1>Hide and Seek</h1>
    </div>
  </header>

  <main class="varnmala" id="main">
    {varnmala.map((letter) => <div class="word">{letter}</div>)}
  </main>
</div>

<style>
  .container {
    display: grid;
    grid-auto-flow: row;
    grid-template-areas: "header" "main";
    grid-template-rows: [header] 6% [main] 1fr;
    color: black;
  }

  header {
    grid-area: header;
    grid-template-columns: minmax(1%, 10%) 1fr auto;
    display: flex;
    /*align-content: center;*/
    background-color: #aac0d5;
    align-items: center;
    justify-content: center;
  }

  header > .action {
    display: flex;
    align-items: center;
  }

  header > .caption {
    text-align: center;
    font-size: large;
  }

  header > .option {
    text-align: center;
    border: 1px solid grey;
    width: 1em;
    padding: 0.5rem;
    font-size: x-large;
    cursor: help;
    place-content: center;
  }

  main {
    grid-area: main;
    display: grid;
    grid-gap: 2px;
    grid-template-columns: repeat(5, minmax(8rem, 1fr));
    grid-template-rows: repeat(auto-fit, minmax(8rem, 1fr));
    height: 100vh;
  }

  .word {
    align-items: center;
    background: #2db34a;
    border-radius: 4px;
    color: #2db34a;
    cursor: crosshair;
    display: inline-grid;
    font-size: 8vw;
    font-weight: 600;
    height: 100%;
    justify-content: center;
    position: relative;
    transition-duration: 0.5s;
    transition-property: background;
    transition-timing-function: linear;
    width: 100%;
  }

  .word:hover {
    background-color: #eaebf9;
    color: #eaebf9;
    border: 1px solid red;
  }

  .show {
    background-color: #bd4595;
    color: white;
  }

  .show:hover {
    background-color: #483d8b;
    color: #fd3636;
  }

  dialog {
    border: 1px solid #171208;
    background: #140707;
    color: white;
    font-size: large;
  }

  dialog[open] {
    border-radius: 4px;
  }

  dialog button {
    float: right;
    padding: 0.5rem;
    margin: 0.5rem;
    cursor: pointer;
  }

  ::backdrop {
    background-image: linear-gradient(
      295deg,
      #df65df,
      #dd775f,
      #aac0d5,
      #ade800
    );
    opacity: 0.75;
  }
</style>

<script>
  // Dialog functionality
  const dialog = document.querySelector("dialog");
  const showButton = document.querySelector("#tip");
  const closeButton = document.querySelector("dialog button");
  const main = document.getElementById("main");

  showButton?.addEventListener("click", () => {
    dialog?.showModal();
  });

  closeButton?.addEventListener("click", () => {
    dialog?.close();
  });

  // Letter highlight functionality
  const highlightText = (w: string) => {
    for (let child of main?.childNodes || []) {
      if (child instanceof HTMLElement && child.textContent === w.toUpperCase()) {
        child.classList.toggle("show");
        break;
      }
    }
  };

  document.addEventListener("keydown", (e) => {
    const { key } = e;
    if (isNaN(Number(key)) && /^[a-zA-Z]$/.test(key)) {
      highlightText(key);
    }
  });
</script>