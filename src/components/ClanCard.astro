---
interface Surname {
  hi: string;
  en: string;
}

interface Branch {
  id: number;
  Gotra: {
    hi: string;
    en: string;
  };
  Deity: {
    hi: string;
    en: string;
  };
  Caste: {
    hi: string;
    en: string;
  };
  Location: {
    hi: string;
    en: string;
  };
  Surnames: Surname[];
}

interface Props {
  branch: Branch;
  query?: string;
  index: number;
}

const { branch, query = "", index } = Astro.props;

function highlightText(text: string | undefined | null, query: string): string {
  if (!text || !query) return text || "";
  const regex = new RegExp(`(${query.trim()})`, "gi");
  return text.replace(regex, `<span class="highlight">$1</span>`);
}

function createSurnameCards(surnames: Surname[], query: string): string {
  return surnames
    .filter((surname): surname is Surname => surname?.hi !== undefined && surname?.en !== undefined)
    .map(
      (surname: Surname) => `
        <div class="surname-card">
          <p><strong class="icon" data-name="Surname">ðŸŒ³:</strong> ${highlightText(surname.hi, query)}</p>
        </div>
      `
    )
    .join("");
}
---

<div class="card" style={`--card-index: ${index}`}>
  <div class="card-header">
    <button class="back"></button>
    <button class="copy-button">
      <span class="icon"></span>
    </button>
  </div>
  <div class="card-info">
    <div class="info-group">
      <span data-name="Gotra" class="icon">ðŸ§¬</span>
      <span class="value" style="font-size: 1.75rem;">${highlightText(branch.Gotra.hi, query)}</span>
    </div>

    <div class="info-group">
      <span data-name="Deity" class="icon">ðŸ•‰</span>
      <span class="value" style="font-size: 1.75rem;">${highlightText(branch.Deity.hi, query)}</span>
    </div>
    <div class="info-group">
      <span data-name="Caste" class="icon">ðŸŒ¿</span>
      <span class="value" style="font-size: 1.75rem;">${highlightText(branch.Caste.hi, query)}</span>
    </div>
  </div>

  <div class="card-body theme-glass">
    <h3 class="surname-heading">Surnames <span class="count">(${branch.Surnames.length})</span></h3>
    <div class="surname-container">
      {createSurnameCards(branch.Surnames, query)}
    </div>
  </div>
</div>

<style>
  :root {
    --card-bg: #0b1f54;
    --card-hover-bg: hsl(var(--card-index) 85% 60%);
    --text-light: #ffffff;
    --border-radius-sm: 0.5rem;
    --shadow-sm: 0 4px 6px rgba(0, 0, 0, 0.1);
    --shadow-md: 0 8px 16px rgba(0, 0, 0, 0.15);
    --transition: all 0.3s ease;
  }

  .card {
    --card-index: 0;
    background: var(--card-bg);
    border-radius: var(--border-radius-sm);
    padding: 1.5rem;
    box-shadow: var(--shadow-sm);
    transition: var(--transition);
    cursor: pointer;
    position: relative;
    overflow: hidden;
  }

  .card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-md);
    background: var(--card-hover-bg);
  }

  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .card-info {
    display: grid;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .info-group {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .icon {
    font-size: 1.5rem;
  }

  .value {
    color: var(--text-light);
    font-weight: bold;
  }

  .card-body {
    background: rgba(255, 255, 255, 0.1);
    border-radius: var(--border-radius-sm);
    padding: 1rem;
  }

  .surname-heading {
    color: var(--text-light);
    margin: 0 0 1rem 0;
    font-size: 1.25rem;
  }

  .count {
    opacity: 0.8;
    font-size: 0.9rem;
  }

  .surname-container {
    display: grid;
    gap: 0.5rem;
  }

  .surname-card {
    background: rgba(255, 255, 255, 0.05);
    border-radius: var(--border-radius-sm);
    padding: 0.5rem;
  }

  .surname-card p {
    margin: 0;
    color: var(--text-light);
  }

  .highlight {
    background: rgba(255, 255, 255, 0.2);
    padding: 0.2rem 0.4rem;
    border-radius: 0.25rem;
  }

  .copy-button {
    background: none;
    border: none;
    color: var(--text-light);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 50%;
    transition: var(--transition);
  }

  .copy-button:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  .copied-tooltip {
    position: absolute;
    background: rgba(0, 0, 0, 0.8);
    color: var(--text-light);
    padding: 0.5rem 1rem;
    border-radius: var(--border-radius-sm);
    font-size: 0.875rem;
    animation: fadeInOut 1.5s ease-in-out;
  }

  @keyframes fadeInOut {
    0% {
      opacity: 0;
      transform: translateY(10px);
    }
    20% {
      opacity: 1;
      transform: translateY(0);
    }
    80% {
      opacity: 1;
      transform: translateY(0);
    }
    100% {
      opacity: 0;
      transform: translateY(-10px);
    }
  }

  @media (max-width: 768px) {
    .card {
      padding: 1rem;
    }

    .value {
      font-size: 1.25rem;
    }

    .surname-heading {
      font-size: 1.1rem;
    }
  }
</style>

<script>
  function copyToClipboard(text: string, button: EventTarget | null) {
    navigator.clipboard
      .writeText(text)
      .then(() => {
        const tooltip = document.createElement("span");
        tooltip.className = "copied-tooltip";
        tooltip.textContent = "Copied!";
        if (button instanceof HTMLElement) {
          button.appendChild(tooltip);
        }

        setTimeout(() => {
          tooltip.remove();
        }, 1500);
      })
      .catch((err) => {
        console.error("Failed to copy: ", err);
      });
  }

  document.addEventListener("DOMContentLoaded", () => {
    const cards = document.querySelectorAll(".card");

    cards.forEach((card) => {
      card.addEventListener("click", (event) => {
        const target = event.target as HTMLElement;
        if (!target.classList.contains("copy-button")) {
          card.classList.toggle("open");
        }
      });

      const copyButton = card.querySelector(".copy-button");
      if (copyButton) {
        copyButton.addEventListener("click", (event) => {
          event.stopPropagation();
          const gotra = (card.querySelector(".info-group:nth-child(1) .value") as HTMLElement).textContent;
          const deity = (card.querySelector(".info-group:nth-child(2) .value") as HTMLElement).textContent;
          const caste = (card.querySelector(".info-group:nth-child(3) .value") as HTMLElement).textContent;

          const surnameCards = card.querySelectorAll(".surname-card");
          const surnames = Array.from(surnameCards).map((surnameCard) => {
            const element = surnameCard.querySelector("p:nth-child(1)") as HTMLElement;
            return element.textContent?.replace("ðŸŒ³:", "").trim() || "";
          });

          const jsonData = {
            Gotra: gotra,
            Deity: deity,
            Caste: caste,
            Surnames: surnames
          };
          const textToCopy = JSON.stringify(jsonData, null, 2);

          copyToClipboard(textToCopy, event.target);
        });
      }
    });
  });
</script>
