---// Define TypeScript interfaces for month data
interface EnglishMonth {
  type: "english";
  name: string;
  hindi: string;
  monthIndex: number;
}

interface IndianMonth {
  type: "indian";
  name: string;
  dates: string;
  monthIndex: number;
  displayName: string; 
  hinduOrdinalText: string;
}

export type MonthEntry = EnglishMonth | IndianMonth;

interface Holiday {
  day: number;
  month: number;
  year: number;
  name: string;
}

interface Props {
  item: MonthEntry;
  currentYear: number;
  nationalHolidaysData: Holiday[];
  parsedToday: Date;
}

const { item, currentYear, nationalHolidaysData, parsedToday } = Astro.props;

// Helper function to generate calendar HTML
function isHoliday(day: number, month: number, year: number, holidays: Holiday[]): Holiday | undefined {
  return holidays.find(h => h.day === day && h.month === month && h.year === year);
}

function generateCalendarDaysHTML(monthIndex: number, year: number, holidays: Holiday[], todayDate: Date): string {
  let html = '';
  const daysOfWeek = ['S', 'M', 'T', 'W', 'Th', 'F', 'S'];
  daysOfWeek.forEach(day => {
    html += `<div class="calendar-day calendar-header">${day}</div>`;
  });

  const firstDayOfMonth = new Date(year, monthIndex, 1);
  const startingDay = firstDayOfMonth.getDay();
  const daysInMonth = new Date(year, monthIndex + 1, 0).getDate();

  for (let i = 0; i < startingDay; i++) {
    html += '<div class="calendar-day empty"></div>';
  }

  for (let day = 1; day <= daysInMonth; day++) {
    let dayClass = 'calendar-day';
    const holidayInfo = isHoliday(day, monthIndex, year, holidays);

    if (year === todayDate.getFullYear() && monthIndex === todayDate.getMonth() && day === todayDate.getDate()) {
      dayClass += ' current-day';
    }
    if (holidayInfo) {
      dayClass += ' holiday-day';
    }
    
    html += `<div class="${dayClass}" title="${holidayInfo ? holidayInfo.name : ''}">${day}</div>`;
  }
  return html;
}
---

<div class="flip__card month-card"> {}
  <div class="flip__card__inner">
    <div class="card card__front">
      <div class="flip__button">
        <span class="flip__button__text" title="Flip Card">Flip Card</span>
      </div>
      <div class="letter__header">
        {item.type === 'english' && (
          <p class="character month-symbol">{item.name}</p>
        )}
        {item.type === 'indian' && (
          <p class="character month-symbol">{item.name}</p>
        )}
      </div>
      <div class="letter__content">
        {item.type === 'english' && (
          <>
            <h2 class="text month-name">{item.hindi}</h2>
            
            
          </>
        )}
        {item.type === 'indian' && (
          <>
            <h2 class="text month-name">{item.displayName}</h2>
            
          </>
        )}
      </div>
      <div class="card__glow"></div>
    </div>
    <div class="card card__back">
      <div class="flip__button">
        <span class="flip__button__text" title="Flip Card">Flip Card</span>
      </div>
      <div class="month-details-back"> {}
        {item.type === 'english' && (
          <>
            {}
            <div class="calendar-on-card-grid" set:html={generateCalendarDaysHTML(item.monthIndex, currentYear, nationalHolidaysData, parsedToday)}>
              {}
            </div>
          </>
        )}
        {item.type === 'indian' && (
          <>
            <h2 class="flipped__text">{item.hinduOrdinalText}</h2>
            {/* <p class="description hindu-ordinal-text">{item.hinduOrdinalText}</p>
            <p class="description month-dates-back">{item.dates}</p> */}
          </>
        )}
      </div>
      <div class="card__glow"></div>
    </div>
  </div>
</div>

<style>
  
  :root[data-theme="light"] {
    --character-gradient-start: var(--primary, #6a5acd); 
    --character-gradient-end: var(--primary-light, #9370db);
    --character-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
    --card-bg-gradient-start: var(--background, #fff);
    --card-bg-gradient-end: color-mix(in srgb, var(--background, #fff) 97%, var(--text, #333) 3%);
  }

  :root[data-theme="dark"] {
    --character-gradient-start: hsl(260, 100%, 75%);
    --character-gradient-end: hsl(260, 100%, 85%);
    --character-shadow: 0 0 20px hsla(260, 100%, 75%, 0.2);
    --card-bg-gradient-start: var(--background, #1a1a2e); 
    --card-bg-gradient-end: color-mix(in srgb, var(--background, #1a1a2e) 97%, var(--text, #e0e0e0) 3%);
  }

  @media (prefers-color-scheme: dark) {
    :root:not([data-theme="light"]) {
      --character-gradient-start: hsl(260, 100%, 75%);
      --character-gradient-end: hsl(260, 100%, 85%);
      --character-shadow: 0 0 20px hsla(260, 100%, 75%, 0.2);
      --card-bg-gradient-start: var(--background, #1a1a2e);
      --card-bg-gradient-end: color-mix(in srgb, var(--background, #1a1a2e) 97%, var(--text, #e0e0e0) 3%);
    }
  }

  @media (prefers-color-scheme: light) {
    :root:not([data-theme="dark"]) {
      --character-gradient-start: var(--primary, #6a5acd);
      --character-gradient-end: var(--primary-light, #9370db);
      --character-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
      --card-bg-gradient-start: var(--background, #fff);
      --card-bg-gradient-end: color-mix(in srgb, var(--background, #fff) 97%, var(--text, #333) 3%);
    }
  }

  .flip__card { 
    width: 100%;
    height: 100%;
    perspective: 1000px;
    min-height: 380px; 
  }

  .month-card .character, 
  .month-card .flipped__text { 
    display: flex;
    justify-content: center;
    align-items: center;
    font-weight: 00;
    margin: 0;
    line-height: 1;
    background: linear-gradient(
      135deg,
      var(--character-gradient-start) 0%,
      var(--character-gradient-end) 100%
    );
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    text-shadow: var(--character-shadow);
    text-align: center;
  }
  .month-card .character { 
    font-size: clamp(1rem, 6vw, 3.5rem); 
    height: 100%; 
  }
  .month-card .letter__header {
    min-height: 80px; 
    flex-grow: 0; 
    display: flex; 
    align-items: center; 
    justify-content: center; 
  }

  .month-card .flipped__text {
    font-size: clamp(1.5rem, 3.5vw, 2.2rem);
    margin-bottom: 0.75rem;
  }

  .month-card .card {
    background: linear-gradient(145deg, var(--card-bg-gradient-start), var(--card-bg-gradient-end));
    border-radius: 1.25rem;
    padding: 1.5rem; 
    box-shadow:
      0 4px 15px rgba(0, 0, 0, 0.05),
      0 1px 2px rgba(0, 0, 0, 0.1);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    flex-direction: column;
    gap: 0.75rem; 
    position: relative;
    overflow: hidden;
    border: 1px solid var(--border, #e0e0e0);
    width: 100%;
    height: 100%;
  }

  .month-card .card:hover .card__glow {
    opacity: 1;
  }
  .month-card .card:hover .text {
    background: linear-gradient(135deg, var(--primary, #6a5acd), var(--primary-light, #9370db));
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
  }

  .month-card .flip__card__inner {
    width: 100%;
    height: 100%;
    text-align: center; 
    transition: transform 0.8s;
    transform-style: preserve-3d;
  }

  .month-card .card__front,
  .month-card .card__back {
    position: absolute;
    width: 100%;
    height: 100%;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    top: 0;
    left: 0;
    display: flex;
    flex-direction: column;
    justify-content: space-between; 
  }
   .month-card .card__front .letter__content {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .month-card .card__back {
    transform: rotateY(180deg);
    
    align-items: center;
    padding: 1rem; 
    padding-top: 45px;
    overflow-y: auto; 
    box-sizing: border-box;
  }
  .month-details-back { 
    padding: 0.5rem;
    text-align: center;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    gap: 0.5rem;
  }
  .month-details-back .description { 
    font-size: 0.9rem; 
    line-height: 1.4;
    color: var(--secondary, #555);
    margin-bottom: 0.4rem;
  }
   .month-details-back .month-dates-back {
    font-size: 0.85rem;
  }
  .month-details-back .hindu-ordinal-text {
    font-size: 1.1rem;
    font-weight: 600;
  }


  .month-card.flipped .flip__card__inner {
    transform: rotateY(180deg);
  }

  .month-card .flip__button {
    position: absolute;
    top: 0.8rem;
    right: 0.8rem;
    z-index: 10;
  }
  .month-card .flip__button__text {
    font-size: 0.8rem;
    color: var(--secondary, #555);
    padding: 0.3rem 0.6rem;
    background: color-mix(in srgb, var(--background, #fff) 95%, var(--text, #333) 5%);
    border-radius: 2rem;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 1px solid var(--border, #e0e0e0);
  }
  .month-card .flip__button__text:hover {
    background: var(--primary, #6a5acd);
    color: var(--text-on-primary, white);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .month-card .letter__content { 
    display: flex;
    flex-direction: column;
    gap: 0.5rem; 
    z-index: 1;
    text-align: center;
    width: 100%;
  }
  .month-card .text {
    font-size: clamp(1.4rem, 3vw, 2rem); 
    font-weight: 700;
    color: var(--text, #333);
    margin: 0;
    transition: color 0.3s ease;
  }
  .month-card .description {
    font-size: 0.9rem; 
    color: var(--secondary, #555);
    margin: 0;
    line-height: 1.4;
    opacity: 0.9;
  }
   .month-card .month-dates { 
    font-size: 0.85rem;
  }

  .month-card .card__glow {
    position: absolute;
    inset: 0;
    background: radial-gradient(
      circle at var(--mouse-x, 50%) var(--mouse-y, 50%),
      color-mix(in srgb, var(--primary, #6a5acd) 10%, transparent) 0%,
      transparent 60%
    );
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }

  
  .calendar-on-card-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 2px; 
    text-align: center;
    width: 100%;
    max-width: 260px; 
    margin: 0.5rem auto; 
    padding: 10px; 
    border-radius: 10px; 
    background-color: var(--card-bg-gradient-end); 
    box-shadow: inset 0 0 5px rgba(0,0,0,0.05);
    border: 1px solid var(--border);
    font-size: 0.75rem;
  }

  .calendar-on-card-grid .calendar-day {
    padding: 5px 2px; 
    border-radius: 6px; 
    background-color: var(--card-bg-gradient-start);
    color: var(--text-secondary);
    min-height: 26px; 
    line-height: 26px; 
    font-weight: 500;
    border: 1px solid var(--border);
    transition: all 0.2s ease;
  }

  .calendar-on-card-grid .calendar-day:hover:not(.empty):not(.calendar-header) {
    background-color: var(--primary-light, #9370db);
    color: var(--text-on-primary, white);
    transform: scale(1.05);
  }

  .calendar-on-card-grid .calendar-header {
    font-weight: 600;
    background-color: transparent; 
    color: var(--primary);
    font-size: 0.7rem; 
    padding: 4px 0;
    margin-bottom: 3px; 
    border: none;
    box-shadow: none;
  }

  .calendar-on-card-grid .calendar-day.empty {
    background-color: transparent;
    border-color: transparent;
    opacity: 0.7;
  }

  .calendar-on-card-grid .calendar-day.current-day {
    background-color: var(--primary, #6a5acd); 
    color: var(--text-on-primary, white);
    font-weight: 700;
    border-color: var(--primary-dark, #483d8b);
    transform: scale(1.1); 
    box-shadow: 0 0 8px color-mix(in srgb, var(--primary) 50%, transparent);
  }

  .calendar-on-card-grid .calendar-day.holiday-day {
    background-color: color-mix(in srgb, var(--accent, #0766ff) 30%, var(--card-bg-gradient-start)); /* Use an accent color */
    color: var(--accent-dark, #0300c7);
    font-weight: 600;
    border-style: dashed;
    border-color: var(--accent, #ffc107);
  }
   .calendar-on-card-grid .calendar-day.holiday-day.current-day {
     background-color: var(--primary, #6a5acd); 
     border-style: solid;
   }


  @media (max-width: 768px) {
    .month-card .character { font-size: clamp(2.5rem, 5vw, 3.5rem); }
    .month-card .text { font-size: clamp(1.2rem, 2.5vw, 1.8rem); }
    .month-card .description { font-size: 0.85rem; }
    .month-card .flipped__text { font-size: clamp(1.3rem, 3vw, 2rem); }
    .calendar-on-card-grid { max-width: 240px; gap: 3px; padding: 8px; font-size: 0.7rem;}
    .calendar-on-card-grid .calendar-day { min-height: 24px; line-height: 24px; }
  }
  @media (max-width: 480px) {
    .calendar-on-card-grid { max-width: 100%; font-size: 0.65rem; }
  }

</style>

<script>
  
  try {
    const scriptTag = Astro.self as unknown as HTMLElement; 
    let cardElement: HTMLElement | null = null;
    const elementImmediatelyBeforeScript = scriptTag.previousElementSibling;

    if (elementImmediatelyBeforeScript) {
      if (elementImmediatelyBeforeScript.classList.contains('flip__card') && elementImmediatelyBeforeScript instanceof HTMLElement) {
        cardElement = elementImmediatelyBeforeScript;
      } else if (
        elementImmediatelyBeforeScript.tagName === 'STYLE' &&
        elementImmediatelyBeforeScript.previousElementSibling &&
        elementImmediatelyBeforeScript.previousElementSibling.classList.contains('flip__card') &&
        elementImmediatelyBeforeScript.previousElementSibling instanceof HTMLElement
      ) {
        cardElement = elementImmediatelyBeforeScript.previousElementSibling as HTMLElement;
      }
    }

    if (cardElement) {
      const flipButtons = cardElement.querySelectorAll<HTMLElement>(".flip__button");
      flipButtons.forEach((button) => {
        button.addEventListener("click", (event: MouseEvent) => {
          event.stopPropagation();
          if (cardElement) cardElement.classList.toggle("flipped");
        });
      });

      const cardInnerElements = cardElement.querySelectorAll<HTMLElement>(".card");
      cardInnerElements.forEach((cardInner) => {
        cardInner.addEventListener("mousemove", (event: MouseEvent) => {
          const rect = cardInner.getBoundingClientRect();
          if (cardInner.clientWidth > 0 && cardInner.clientHeight > 0) {
            const x = ((event.clientX - rect.left) / cardInner.clientWidth) * 100;
            const y = ((event.clientY - rect.top) / cardInner.clientHeight) * 100;
            cardInner.style.setProperty("--mouse-x", `${x}%`);
            cardInner.style.setProperty("--mouse-y", `${y}%`);
          }
        });
      });
    } else {
      console.error("MonthCard: Could not find .flip__card element.");
    }
  } catch (error) {
    console.error("MonthCard script error:", error);
  }
</script>