---
import "@/assets/styles/card.css";
import "@/assets/styles/pdf.css";
import { colors } from "@/utils/constants";

interface Props {
  placeholder?: string;
  initialData?: Branch[];
}

interface Surname {
  hi: string;
  en: string;
}

interface Branch {
  id: number;
  gotra: {
    hi: string;
    en: string;
  };
  deity: {
    hi: string;
    en: string;
  };
  caste: {
    hi: string;
    en: string;
  };
  location: {
    hi: string;
    en: string;
  };
  surnames: Surname[];
}

const { initialData = [] } = Astro.props;
const processedData = initialData.map((branch, index) => ({
  ...branch,
  color: colors[index % colors.length]
}));
---

<div class="card-container" id="card-container">
  {processedData.length > 0 ? (
    processedData.map((branch, index) => (
      <div 
        class="card" 
        style={`--card-index: ${index}; --card-color: ${branch.color}`}
        data-gotra={`${branch.gotra.hi}|${branch.gotra.en}`}
        data-deity={`${branch.deity.hi}|${branch.deity.en}`}
        data-caste={`${branch.caste.hi}|${branch.caste.en}`}
      >
        <div class="card-header">
          <div class="card-info">
            <div class="info-group">
              <span class="value" data-hi={branch.gotra.hi} data-en={branch.gotra.en} data-icon="🧬">
                {branch.gotra.hi}
              </span>
            </div>
            <div class="info-group">
              <span class="value" data-hi={branch.deity.hi} data-en={branch.deity.en} data-icon="🪔">
                {branch.deity.hi}
              </span>
            </div>
            <div class="info-group">
              <span class="value" data-hi={branch.caste.hi} data-en={branch.caste.en} data-icon="🌳">
                {branch.caste.hi}
              </span>
            </div>
          </div>
          <div class="card-actions">
            <button class="surname-count" aria-expanded="false" aria-controls={`card-body-${index}`}>
              <span class="icon">👥</span>
              <span class="count">{branch.surnames.length}</span>
            </button>
            <button class="copy-button" aria-label="Copy card data">
              <span class="icon">📋</span>
            </button>
          </div>
        </div>
        <div id={`card-body-${index}`} class="card-body" aria-hidden="true">
          <h3 class="surnames-title">Surnames</h3>
          <ul class="surname-container">
            {branch.surnames.map((surname, idx) => (
              <li class="surname-card" style={`--surname-index: ${idx}`}>
                <p data-hi={surname.hi} data-en={surname.en} data-icon="🍀">
                  {surname.hi}
                </p>
              </li>
            ))}
          </ul>
        </div>
      </div>
    ))
  ) : (
    <div class="error-message">No data available. Please try again later.</div>
  )}
</div>

<script>

  document.addEventListener("DOMContentLoaded", () => {
    // Card expansion logic
    const cards = document.querySelectorAll(".card");
    
    cards.forEach(card => {
      const toggleBtn = card.querySelector(".surname-count");
      const cardBody = card.querySelector(".card-body");
      
      toggleBtn?.addEventListener("click", (e) => {
        e.stopPropagation();
        
        // Close all other cards first
        cards.forEach(otherCard => {
          if (otherCard !== card) {
            otherCard.classList.remove("expanded");
            const otherBtn = otherCard.querySelector(".surname-count");
            const otherBody = otherCard.querySelector(".card-body");
            otherBtn?.setAttribute("aria-expanded", "false");
            otherBody?.setAttribute("aria-hidden", "true");
          }
        });
        
        // Toggle current card
        const isExpanded = card.classList.toggle("expanded");
        toggleBtn.setAttribute("aria-expanded", isExpanded.toString());
        cardBody.setAttribute("aria-hidden", (!isExpanded).toString());
      });
    });

    // Copy button functionality
    document.querySelectorAll(".copy-button").forEach(btn => {
      btn.addEventListener("click", (e) => {
        e.stopPropagation();
        const card = btn.closest(".card");
        const gotra = card.querySelector(".info-group:nth-child(1) .value")?.textContent;
        const deity = card.querySelector(".info-group:nth-child(2) .value")?.textContent;
        const caste = card.querySelector(".info-group:nth-child(3) .value")?.textContent;
        
        const surnames = Array.from(card.querySelectorAll(".surname-card p"))
          .map(el => el.textContent?.trim() || "");
        
        const data = { gotra, deity, caste, surnames };
        navigator.clipboard.writeText(JSON.stringify(data, null, 2))
          .then(() => {
            const tooltip = document.createElement("span");
            tooltip.className = "copied-tooltip";
            tooltip.textContent = "Copied!";
            btn.appendChild(tooltip);
            setTimeout(() => tooltip.remove(), 1500);
          });
      });
    });
  });
</script>