---
import "@/assets/styles/card.css";
import { colors } from "@/utils/constants.ts";

interface Props {
  placeholder?: string;
  initialData?: Branch[];
}

interface Surname {
  hi: string;
  en: string;
}

interface Branch {
  id: number;
  gotra: {
    hi: string;
    en: string;
  };
  deity: {
    hi: string;
    en: string;
  };
  caste: {
    hi: string;
    en: string;
  };
  location: {
    hi: string;
    en: string;
  };
  surnames: Surname[];
}

const { placeholder = "Search...", initialData = [] } = Astro.props;

// Server-side data processing
const processedData = initialData.map((branch, index) => ({
  ...branch,
  color: colors[index % colors.length]
}));
---

<div class="card-container" id="card-container">
  {
    processedData.length > 0 ? (
      processedData.map((branch, index) => (
        <div class="card" style={`--card-index: ${index}; background: ${branch.color}`}>
          <div class="card-header">
            <div class="card-info">
              <div class="info-group">
                <span class="value" data-hi={branch.gotra.hi} data-en={branch.gotra.en} data-icon="🧬">
                  {branch.gotra.hi}
                </span>
              </div>
              <div class="info-group">
                <span class="value" data-hi={branch.deity.hi} data-en={branch.deity.en} data-icon="🪔">
                  {branch.deity.hi}
                </span>
              </div>
              <div class="info-group">
                <span class="value" data-hi={branch.caste.hi} data-en={branch.caste.en} data-icon="🌳">
                  {branch.caste.hi}
                </span>
              </div>
            </div>
            <div class="card-actions">
              <div class="surname-count">
                <span class="icon">👥</span>
                <span class="count">{branch.surnames.length}</span>
              </div>
              <button class="copy-button" aria-label="Copy card data">
                <span class="icon">📋</span>
              </button>
            </div>
          </div>
          <div class="card-body">
            <div class="surname-container">
              {branch.surnames.map((surname, idx) => (
                <div class="surname-card" style={`--surname-index: ${idx}`}>
                  <p data-hi={surname.hi} data-en={surname.en} data-icon="🍀">
                    {surname.hi}
                  </p>
                </div>
              ))}
            </div>
          </div>
        </div>
      ))
    ) : (
      <div class="error-message">No data available. Please try again later.</div>
    )
  }
</div>

<script>
  function copyToClipboard(text: string, button: EventTarget | null) {
    navigator.clipboard
      .writeText(text)
      .then(() => {
        const tooltip = document.createElement("span");
        tooltip.className = "copied-tooltip";
        tooltip.textContent = "Copied!";
        if (button instanceof HTMLElement) {
          button.appendChild(tooltip);
        }

        setTimeout(() => {
          tooltip.remove();
        }, 1500);
      })
      .catch((err) => {
        console.error("Failed to copy: ", err);
      });
  }

  document.addEventListener("DOMContentLoaded", () => {
    const cards = document.querySelectorAll(".card") as NodeListOf<HTMLElement>;

    // Handle card expansion
    cards.forEach((card) => {
      card.addEventListener("click", (e: Event) => {
        const target = e.target as HTMLElement;
        const copyButton = target.closest(".copy-button");

        if (copyButton) {
          e.stopPropagation();
          const card = copyButton.closest(".card") as HTMLElement;
          if (!card) return;

          const gotra = (card.querySelector(".info-group:nth-child(1) .value") as HTMLElement)?.textContent;
          const deity = (card.querySelector(".info-group:nth-child(2) .value") as HTMLElement)?.textContent;
          const caste = (card.querySelector(".info-group:nth-child(3) .value") as HTMLElement)?.textContent;

          if (!gotra || !deity || !caste) return;

          const surnameCards = card.querySelectorAll(".surname-card");
          const surnames = Array.from(surnameCards).map((surnameCard) => {
            const element = surnameCard.querySelector("p") as HTMLElement;
            return element.textContent?.replace("🌳:", "").trim() || "";
          });

          const jsonData = {
            gotra: gotra,
            deity: deity,
            caste: caste,
            surnames: surnames
          };
          const textToCopy = JSON.stringify(jsonData, null, 2);

          copyToClipboard(textToCopy, copyButton);
        } else {
          // Close all other cards
          cards.forEach((c) => {
            if (c !== card) {
              c.classList.remove("expanded");
            }
          });
          // Toggle current card
          card.classList.toggle("expanded");
        }
      });
    });
  });
</script>
