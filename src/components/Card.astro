---
import "@/assets/styles/card.css";
import "@/assets/styles/pdf.css";
import { colors } from "@/utils/constants.ts";

interface Props {
  placeholder?: string;
  initialData?: Branch[];
}

interface Surname {
  hi: string;
  en: string;
}

interface Branch {
  id: number;
  gotra: {
    hi: string;
    en: string;
  };
  deity: {
    hi: string;
    en: string;
  };
  caste: {
    hi: string;
    en: string;
  };
  location: {
    hi: string;
    en: string;
  };
  surnames: Surname[];
}

const { placeholder = "Search...", initialData = [] } = Astro.props;

// Server-side data processing
const processedData = initialData.map((branch, index) => ({
  ...branch,
  color: colors[index % colors.length]
}));
---

<div class="card-container" id="card-container">
  {
    processedData.length > 0 ? (
      processedData.map((branch, index) => (
        <div class="card" style={`--card-index: ${index}; background: ${branch.color}`}>
          <div class="card-header">
            <div class="card-info">
              <div class="info-group">
                <span class="value" data-hi={branch.gotra.hi} data-en={branch.gotra.en} data-icon="🧬">
                  {branch.gotra.hi}
                </span>
              </div>
              <div class="info-group">
                <span class="value" data-hi={branch.deity.hi} data-en={branch.deity.en} data-icon="🪔">
                  {branch.deity.hi}
                </span>
              </div>
              <div class="info-group">
                <span class="value" data-hi={branch.caste.hi} data-en={branch.caste.en} data-icon="🌳">
                  {branch.caste.hi}
                </span>
              </div>
            </div>
            <div class="card-actions">
              <div class="surname-count">
                <span class="icon">👥</span>
                <span class="count">{branch.surnames.length}</span>
              </div>
              <button class="copy-button" aria-label="Copy card data">
                <span class="icon">📋</span>
              </button>
            </div>
          </div>
          <div class="card-body">
            <ul class="surname-container">
              {branch.surnames.map((surname, idx) => (
                <li class="surname-card" style={`--surname-index: ${idx}`}>
                  <p data-hi={surname.hi} data-en={surname.en} data-icon="🍀">
                    {surname.hi}
                  </p>
                </li>
              ))}
            </ul>
          </div>
        </div>
      ))
    ) : (
      <div class="error-message">No data available. Please try again later.</div>
    )
  }
</div>

<style>
  .card {
    border-radius: var(--border-radius-sm);
    box-shadow: var(--shadow-sm);
    transition: var(--transition);
    overflow: hidden;
    background: linear-gradient(135deg, var(--card-color, #4a90e2), rgba(74, 144, 226, 0.8));
    cursor: pointer;
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 0.5s ease forwards;
  }

  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    background: rgba(255, 255, 255, 0.1);
    cursor: pointer;
  }

  .surname-count {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: rgba(255, 255, 255, 0.1);
    padding: 0.5rem 1rem;
    border-radius: var(--border-radius-sm);
    color: var(--text-light);
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .surname-count:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: scale(1.05);
  }

  .surname-count.active {
    background: rgba(255, 255, 255, 0.3);
    transform: scale(1.1);
  }

  .card-body {
    background: var(--glass-bg);
    padding: 1.5rem;
    margin: 0 1.5rem 1.5rem;
    border-radius: var(--border-radius-sm);
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 0;
  }

  .card.expanded .card-body {
    max-height: 500px;
    opacity: 1;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: rgba(255, 255, 255, 0.3) transparent;
  }

  .card.expanded .card-body::-webkit-scrollbar {
    width: 6px;
  }

  .card.expanded .card-body::-webkit-scrollbar-track {
    background: transparent;
    border-radius: 3px;
  }

  .card.expanded .card-body::-webkit-scrollbar-thumb {
    background-color: rgba(255, 255, 255, 0.3);
    border-radius: 3px;
  }

  .card.expanded .card-body::-webkit-scrollbar-thumb:hover {
    background-color: rgba(255, 255, 255, 0.5);
  }

  .surname-card {
    background: rgba(255, 255, 255, 0.1);
    border-radius: var(--border-radius-sm);
    padding: 0.75rem;
    transition: var(--transition);
    transform: translateX(0);
    opacity: 0;
    animation: slideIn 0.3s ease forwards;
    animation-delay: calc(var(--surname-index) * 0.1s);
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateX(-20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .surname-card:hover {
    transform: translateX(5px);
    background: rgba(255, 255, 255, 0.15);
  }

  .card-actions-top {
    position: sticky;
    top: 1rem;
    z-index: 100;
    display: flex;
    justify-content: flex-end;
    padding: 0 1rem;
    margin-bottom: 1rem;
  }

  .download-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: var(--primary-color);
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: var(--border-radius-sm);
    cursor: pointer;
    font-weight: 500;
    transition: all 0.3s ease;
    box-shadow: var(--shadow-sm);
  }

  .download-button:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
    background: var(--primary-color-dark);
  }

  .download-button .icon {
    font-size: 1.2rem;
  }

  @media print {
    .card-actions-top {
      display: none;
    }
  }
</style>

<script>
  function copyToClipboard(text: string, button: EventTarget | null) {
    navigator.clipboard
      .writeText(text)
      .then(() => {
        const tooltip = document.createElement("span");
        tooltip.className = "copied-tooltip";
        tooltip.textContent = "Copied!";
        if (button instanceof HTMLElement) {
          button.appendChild(tooltip);
        }

        setTimeout(() => {
          tooltip.remove();
        }, 1500);
      })
      .catch((err) => {
        console.error("Failed to copy: ", err);
      });
  }

  document.addEventListener("DOMContentLoaded", () => {
    const cards = document.querySelectorAll(".card") as NodeListOf<HTMLElement>;

    // Handle card expansion
    cards.forEach((card) => {
      const surnameCount = card.querySelector(".surname-count") as HTMLElement;
      const copyButton = card.querySelector(".copy-button") as HTMLElement;

      if (surnameCount) {
        surnameCount.addEventListener("click", (e: Event) => {
          e.stopPropagation();
          surnameCount.classList.toggle("active");
          card.classList.toggle("expanded");
        });
      }

      if (copyButton) {
        copyButton.addEventListener("click", (e: Event) => {
          e.stopPropagation();
          const gotra = (card.querySelector(".info-group:nth-child(1) .value") as HTMLElement)?.textContent;
          const deity = (card.querySelector(".info-group:nth-child(2) .value") as HTMLElement)?.textContent;
          const caste = (card.querySelector(".info-group:nth-child(3) .value") as HTMLElement)?.textContent;

          if (!gotra || !deity || !caste) return;

          const surnameCards = card.querySelectorAll(".surname-card");
          const surnames = Array.from(surnameCards).map((surnameCard) => {
            const element = surnameCard.querySelector("p") as HTMLElement;
            return element.textContent?.replace("🍀", "").trim() || "";
          });

          const jsonData = {
            gotra: gotra,
            deity: deity,
            caste: caste,
            surnames: surnames
          };
          const textToCopy = JSON.stringify(jsonData, null, 2);

          copyToClipboard(textToCopy, copyButton);
        });
      }
    });

    // Handle PDF download
    const downloadButton = document.getElementById("downloadPdf");
    if (downloadButton) {
      downloadButton.addEventListener("click", () => {
        // Expand all cards before printing
        const cards = document.querySelectorAll(".card") as NodeListOf<HTMLElement>;
        cards.forEach((card) => {
          card.classList.add("expanded");
        });

        // Wait for animations to complete
        setTimeout(() => {
          window.print();
        }, 500);
      });
    }
  });
</script>
