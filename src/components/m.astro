<div class="math-practice">
  <header class="header">
    <dialog id="helpDialog" class="help-dialog">
      <div class="dialog-content">
        <button onclick="closeDialog()" class="dialog-btn">
          <span class="dialog-btn-text">Close</span>
        </button>
        <h3 class="dialog-title">Math Practice Help</h3>
        <p>This is basic math operation practice.</p>
        <ul class="dialog-list">
          <li>Sum of 2 digits</li>
          <li>Subtraction of 2 digits</li>
          <li>Multiplication of 2 digits × 1 digit</li>
          <li>Division of 2 digits ÷ 1 digit (whole numbers only)</li>
        </ul>
        <p class="dialog-footer">
          Click on the refresh icon to get a new data set in the first 2 boxes. 
          Enter your answer and it will be automatically checked.
        </p>
      </div>
    </dialog>
    <div class="action">
      <a href="/" class="back">←</a>
    </div>
    <div class="caption">
      <h2>Math Practice</h2>
    </div>
    <button class="help-btn" id="tip" onclick="openDialog()">?</button>
  </header>

  <section class="operator-container">
    <button class="operator-btn refresh" id="refresh" type="button">
      <span>↻</span>
    </button>
    <button class="operator-btn add" id="add" type="button">
      <span>+</span>
    </button>
    <button class="operator-btn subtract" id="subtract" type="button">
      <span>−</span>
    </button>
    <button class="operator-btn multiply" id="multiply" type="button">
      <span>×</span>
    </button>
    <button class="operator-btn divide" id="divide" type="button">
      <span>÷</span>
    </button>
  </section>

  <form id="mathForm" class="math-form">
    <div class="math-problem-container">
      <div class="number-group">
        <input readonly type="text" inputmode="numeric" pattern="[0-9]*" id="first" class="number" value="0" />
        <samp id="operator" class="operator">+</samp>
        <input readonly type="text" inputmode="numeric" pattern="[0-9]*" id="second" class="number" value="0" />
        <samp class="operator">=</samp>
        <div class="answer-wrapper">
          <input
            type="text"
            inputmode="numeric"
            pattern="[0-9]*"
            id="output"
            class="number output"
            placeholder="?"
            autofocus
          />
          <div id="resultIndicator" class="result-indicator"></div>
        </div>
      </div>
    </div>
  </form>

  <!-- Score moved below the form -->
  <div class="score">Score: <span id="scoreDisplay">0</span></div>
</div>

<style>
  :root {
    --color-background: #ffffff;
    --color-primary: #6a5acd;
    --color-secondary: #ff6b6b;
    --color-accent: #4ecdc4;
    --color-highlight: #ffd93d;
    --color-success: #2ecc71;
    --color-error: #e74c3c;
    --color-text: #2c3e50;
    
    --color-add: #2ecc71;       /* Green for addition */
  --color-subtract: #e74c3c;  /* Red for subtraction */
  --color-multiply: #3498db;  /* Blue for multiplication */
  --color-divide: #f39c12;    /* Orange for division */
  --color-refresh: #9b59b6;   /* Purple for refresh */
}
  


  .math-practice {
    font-family: "Comic Sans MS", "Arial", sans-serif;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 1rem;
    text-align: center;
    /*background: var(--color-background);*/
    color: var(--color-text);
    padding-top: 2px; /* Reduced padding */
  }

  .header {
    width: 100%;
    padding: 1rem 2rem;
    background-color: var(--color-primary);
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 10;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  }

  .score {
    font-size: 2.5rem;
    background-color: var(--color-highlight);
    padding: 0.5rem 1.5rem;
    border-radius: 50px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    margin-top: 5rem; /* Added margin to separate from form */
    position: static; /* Remove fixed positioning */
  }

  .operator-container {
    display: flex;
    justify-content: center;
    gap: 1.5rem;
    margin-top: 2rem;
    margin-bottom: 5rem;
  }

  .operator-btn {
    width: 100px;
    height: 100px;
    font-size: 3rem;
    background-color: var(--color-secondary);
    color: white;
    border: none;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2);
  }

  .operator-btn:hover {
    transform: scale(1.1);
    background-color: var(--color-primary);
  }

  .math-form {
    width: 100%;
    max-width: 1200px;
  }

  .math-problem-container {
    display: flex;
    justify-content: center;
  }

  .number-group {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1.5rem;
    flex-wrap: wrap;
  }

  .number {
    width: 250px;
    height: 180px;
    font-size: 5rem;
    text-align: center;
    background-color: white;
    color: var(--color-text);
    border: 4px solid var(--color-primary);
    border-radius: 20px;
    outline: none;
    transition: all 0.3s ease;
  }

  .operator {
    font-size: 5rem;
    color: var(--color-secondary);
  }

  .answer-wrapper {
    display: flex;
    align-items: center;
    gap: 1.5rem;
  }

  .output {
    background-color: white;
    border: 4px solid var(--color-accent);
  }

  .result-indicator {
    font-size: 4rem;
    font-weight: bold;
    width: 80px;
    height: 80px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: all 0.3s ease;
  }

  .result-indicator.success {
    color: var(--color-success);
    animation: popIn 0.3s ease;
  }

  .result-indicator.error {
    color: var(--color-error);
    animation: shake 0.3s ease;
  }

  .operator-btn.refresh {
  background-color: var(--color-refresh);
}

.operator-btn.add {
  background-color: var(--color-add);
}

.operator-btn.subtract {
  background-color: var(--color-subtract);
}

.operator-btn.multiply {
  background-color: var(--color-multiply);
}

.operator-btn.divide {
  background-color: var(--color-divide);
}

.number {
  width: 285px;  /* Increased width */
  height: 250px; /* Increased height */
  font-size: 10rem; /* Increased font size */
}

@media (max-width: 768px) {
  .number {
    width: 250px;
    height: 200px;
    font-size: 5rem;
  }}

  @keyframes popIn {
    0% { transform: scale(0); }
    70% { transform: scale(1.2); }
    100% { transform: scale(1); }
  }

  @keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }

  @media (max-width: 768px) {
    .number-group {
      flex-direction: column;
    }

    .number {
      width: 200px;
      height: 120px;
      font-size: 4rem;
    }

    .operator {
      font-size: 4rem;
    }
  }
</style>

<script>
  const state = {
    currentOperator: "+",
    score: 0,
    scoreIncrement: 10
  };

  function initMathPractice() {
    updateNumbers();
    setupEventListeners();
  }

  function generateNumber(max = 99, min = 1) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  function updateNumbers() {
    let first, second;
    
    if (state.currentOperator === "×") {
      first = generateNumber();
      second = generateNumber(9); // 1-digit multiplier
    } else if (state.currentOperator === "÷") {
      // Ensure whole number division
      second = generateNumber(9); // 1-digit divisor
      const result = generateNumber(10); // 1-digit quotient
      first = result * second; // Dividend = quotient × divisor
    } else {
      first = generateNumber();
      second = generateNumber();
    }

    document.getElementById("first").value = first;
    document.getElementById("second").value = second;
    document.getElementById("output").value = "";
    document.getElementById("resultIndicator").innerHTML = "";
    document.getElementById("output").focus();
  }

  function updateScore() {
    state.score += state.scoreIncrement;
    const scoreDisplay = document.getElementById("scoreDisplay");
    scoreDisplay.textContent = state.score.toString();
    scoreDisplay.classList.add("score-pop");
    setTimeout(() => scoreDisplay.classList.remove("score-pop"), 200);
  }

  function checkAnswer() {
    const first = parseInt(document.getElementById("first").value);
    const second = parseInt(document.getElementById("second").value);
    const output = parseInt(document.getElementById("output").value);
    const indicator = document.getElementById("resultIndicator");

    if (isNaN(output)) {
      indicator.innerHTML = "";
      indicator.className = "result-indicator";
      return;
    }

    let expectedResult;
    switch (state.currentOperator) {
      case "+": expectedResult = first + second; break;
      case "−": expectedResult = first - second; break;
      case "×": expectedResult = first * second; break;
      case "÷": expectedResult = first / second; break;
      default: expectedResult = 0;
    }

    // Check if result is integer for division
    const isValid = state.currentOperator === "÷" 
      ? Number.isInteger(expectedResult) && output === expectedResult
      : output === expectedResult;

    if (isValid) {
      indicator.innerHTML = "✓";
      indicator.className = "result-indicator success";
      updateScore();
      setTimeout(updateNumbers, 800);
    } else {
      indicator.innerHTML = "✗";
      indicator.className = "result-indicator error";
    }
  }

  function setOperator(op) {
    state.currentOperator = op;
    document.getElementById("operator").textContent = op;
    updateNumbers();
  }

  function setupEventListeners() {
    const outputElement = document.getElementById("output");

    // Prevent non-numeric input in real-time
    outputElement.addEventListener("input", (e) => {
      e.target.value = e.target.value.replace(/[^0-9]/g, "");
      checkAnswer();
    });

    document.getElementById("refresh").addEventListener("click", updateNumbers);
    document.getElementById("add").addEventListener("click", () => setOperator("+"));
    document.getElementById("subtract").addEventListener("click", () => setOperator("−"));
    document.getElementById("multiply").addEventListener("click", () => setOperator("×"));
    document.getElementById("divide").addEventListener("click", () => setOperator("÷"));
  }

  function openDialog() {
    document.getElementById("helpDialog").showModal();
  }

  function closeDialog() {
    document.getElementById("helpDialog").close();
  }

  document.addEventListener("DOMContentLoaded", initMathPractice);
</script>