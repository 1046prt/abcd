<div class="math-practice">
  <header class="header">
    <dialog id="helpDialog" class="help-dialog">
      <button onclick="closeDialog()" class="dialog-btn">Close</button>
      <h3>Math Practice Help</h3>
      <p>This is basic math operation practice.</p>
      <ul>
        <li>Sum of 2 digits</li>
        <li>Subtraction of 2 digits</li>
        <li>Multiplication of 2 digits × 1 digit</li>
      </ul>
      <p>
        Click on the refresh icon to get a new data set in the first 2 boxes. 
        Enter your answer and click Submit to check it.
      </p>
    </dialog>
    <div class="action">
      <a href="/" class="back">←</a>
    </div>
    <div class="caption">
      <!-- <h2>{title}</h2> -->
    </div>
    <button class="help-btn" id="tip" onclick="openDialog()">?</button>
  </header>

  <div class="score">Score: <span id="scoreDisplay">0</span></div>

  <section class="operator-container">
    <button class="operator-btn refresh" id="refresh" type="button">
      <span>↻</span>
    </button>
    <button class="operator-btn add" id="add" type="button">
      <span>+</span>
    </button>
    <button class="operator-btn subtract" id="subtract" type="button">
      <span>−</span>
    </button>
    <button class="operator-btn multiply" id="multiply" type="button">
      <span>×</span>
    </button>
  </section>

  <form id="mathForm" class="math-form">
    <input readonly type="number" id="first" name="b" class="number" value="0" />
    <samp id="operator" class="operator">+</samp>
    <input readonly type="number" id="second" name="a" class="number" value="0" />
    <samp class="operator">=</samp>
    <input
      type="number"
      id="output"
      name="c"
      class="number output"
      placeholder="?"
      autofocus
    />
    <button type="submit" id="submitBtn" class="submit-btn">Submit</button>
    <output class="result" id="result" name="result" for="a b"></output>
  </form>
</div>
<script>
  const state = {
    currentOperator: '+',
    score: 0,
    scoreIncrement: 10
  };

  function initMathPractice() {
    updateNumbers();
    setupEventListeners();
  }

  function generateNumber(max = 99) {
    return Math.floor(Math.random() * max) + 1;
  }

  function updateNumbers() {
    const first = generateNumber();
    const second = state.currentOperator === '×' ? generateNumber(9) : generateNumber();
    
    const firstInput = document.getElementById('first');
    const secondInput = document.getElementById('second');
    const outputInput = document.getElementById('output');
    const resultElement = document.getElementById('result');
    
    firstInput.value = first.toString();
    secondInput.value = second.toString();
    outputInput.value = '';
    resultElement.className = 'result';
    outputInput.focus();
  }

  function updateScore() {
    state.score += state.scoreIncrement;
    const scoreDisplay = document.getElementById('scoreDisplay');
    if (scoreDisplay) {
      scoreDisplay.textContent = state.score.toString();
      scoreDisplay.parentElement.style.transform = 'scale(1.2)';
      setTimeout(() => {
        scoreDisplay.parentElement.style.transform = 'scale(1)';
      }, 200);
    }
  }

  function checkAnswer(event) {
    event.preventDefault();
    
    const first = parseInt(document.getElementById('first').value);
    const second = parseInt(document.getElementById('second').value);
    const outputElement = document.getElementById('output');
    const output = outputElement.value === '' ? NaN : parseInt(outputElement.value);
    
    if (isNaN(output)) {
      outputElement.classList.add('animate-wrong');
      document.getElementById('result').className = 'result incorrect';
      setTimeout(() => {
        outputElement.classList.remove('animate-wrong');
      }, 500);
      return;
    }
    
    let expectedResult;
    switch(state.currentOperator) {
      case '+':
        expectedResult = first + second;
        break;
      case '−':
        expectedResult = first - second;
        break;
      case '×':
        expectedResult = first * second;
        break;
      default:
        expectedResult = 0;
    }
    
    const resultElement = document.getElementById('result');
    const mathForm = document.getElementById('mathForm');
    
    if (output === expectedResult) {
      resultElement.className = 'result correct';
      mathForm.classList.add('correct-animation');
      setTimeout(() => {
        mathForm.classList.remove('correct-animation');
        updateNumbers();
      }, 1000);
      updateScore();
    } else {
      resultElement.className = 'result incorrect';
      mathForm.classList.add('incorrect-animation');
      setTimeout(() => {
        mathForm.classList.remove('incorrect-animation');
      }, 1000);
      outputElement.value = '';
    }
  }

  function setOperator(op) {
    state.currentOperator = op;
    const operatorElement = document.getElementById('operator');
    if (operatorElement) {
      operatorElement.textContent = op;
    }
    updateNumbers();
  }

  function setupEventListeners() {
    const mathForm = document.getElementById('mathForm');
    if (mathForm) {
      mathForm.addEventListener('submit', checkAnswer);
    }

    document.getElementById('refresh')?.addEventListener('click', updateNumbers);
    document.getElementById('add')?.addEventListener('click', () => setOperator('+'));
    document.getElementById('subtract')?.addEventListener('click', () => setOperator('−'));
    document.getElementById('multiply')?.addEventListener('click', () => setOperator('×'));
  }

  function openDialog() {
    document.getElementById('helpDialog').showModal();
  }

  function closeDialog() {
    document.getElementById('helpDialog').close();
  }

  initMathPractice();
</script>
<style>
  :root {
    --color-primary: #33a737;
    --color-error: #e12e22;
    --color-background: #f9f9f9;
    --color-surface: #ffffff;
    --color-border: #e0e0e0;
    --color-text: #2d3748;
    --color-text-secondary: #4a5568;
    --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.05);
    --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.1);
    --radius-md: 8px;
    --transition-base: 0.2s ease;
  }

  .math-practice {
    width: min(90%, 800px);
    margin: 2rem auto;
    background: var(--color-surface);
    border-radius: var(--radius-md);
    box-shadow: var(--shadow-md);
    padding: 2rem;
  }

  .header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
  }

  .score {
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--color-text);
  }

  .operator-container {
    display: flex;
    gap: 1.5rem;
    justify-content: center;
    margin-bottom: 2rem;
  }

  .operator-btn {
    padding: 1.5rem;
    border: none;
    border-radius: var(--radius-md);
    font-size: 1.5rem;
    color: white;
    cursor: pointer;
    transition: transform var(--transition-base);
  }

  .operator-btn:hover {
    transform: translateY(-2px);
  }

  .refresh { background: #9C27B0; }
  .add { background: #2196F3; }
  .subtract { background: #FF9800; }
  .multiply { background: #E91E63; }

  .math-form {
    display: flex;
    gap: 1rem;
    align-items: center;
    justify-content: center;
    margin-bottom: 5rem;
    margin-top: 4rem;
  }

  .number {
    width: 80px;
    height: 50px;
    text-align: center;
    font-size: 1.5rem;
    border: 2px solid var(--color-border);
    border-radius: var(--radius-md);
  }

  .submit-btn {
    padding: 0.75rem 2rem;
    font-size: 1rem;
    font-weight: 600;
    color: white;
    background: var(--color-primary);
    border: none;
    border-radius: var(--radius-md);
    cursor: pointer;
    transition: background var(--transition-base);
  }

  .submit-btn:hover {
    background: #1a5b1d;
  }

  .result {
    font-size: 1.5rem;
    font-weight: bold;
  }

  .correct { color: var(--color-primary); }
  .incorrect { color: var(--color-error); }

  .correct-animation {
    padding: 0.5rem;
    animation: correctAnimation 3s ease;
  }

  .incorrect-animation {
    padding: 0.5rem;
    animation: incorrectAnimation 3s ease;
  }

  @keyframes correctAnimation {
    0% { background-color: rgba(76, 175, 80, 0.1); }
    100% { background-color: transparent; }
  }

  @keyframes incorrectAnimation {
    0% { background-color: rgba(244, 67, 54, 0.1); }
    100% { background-color: transparent; }
  }
</style>