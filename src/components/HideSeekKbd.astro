---
import { getLetterIndex } from "@/utils/index";

const letterRows = [
  ["Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P"],
  ["A", "S", "D", "F", "G", "H", "J", "K", "L"],
  ["Z", "X", "C", "V", "B", "N", "M"]
];
---

<article class="container__keyboard">
  {
    letterRows.map((row) => (
      <section class="keyboard-row">
        {row.map((letter) => (
          <div class="keyboard-item" data-letter={letter} style={`--letter-index: ${getLetterIndex(letter)}`}>
            {letter}
          </div>
        ))}
      </section>
    ))
  }
</article>

<style>
  :root {
    --primary-bg: #1a1a1a;
    --default-bg: #0b1f54;
    --text-color: #ffffff;
    --modal-bg: rgba(0, 0, 0, 0.8);
  }

  .container__keyboard {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    padding: 1rem;
    background: var(--primary-bg);
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .keyboard-row {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
  }

  .keyboard-item {
    width: 5rem;
    height: 5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: var(--default-bg);
    color: var(--text-color);
    border-radius: 0.25rem;
    cursor: pointer;
    transition: all 0.2s ease;
    font-weight: bold;
    user-select: none;
  }

  .keyboard-item:hover {
    background: color-mix(in srgb, var(--default-bg) 90%, white);
    transform: translateY(-2px);
  }

  .keyboard-item.active {
    transform: scale(1.1);
  }

  .keyboard-item.active:hover {
    /* When active and hovered, slightly lighten its assigned color */
    background: color-mix(in srgb, var(--active-bg-color, var(--default-bg)) 90%, white);
  }


  @media (max-width: 640px) {
    .letter-box,
    .keyboard-item {
      width: 2rem;
      height: 2rem;
      font-size: 0.875rem;
    }
  }
</style>

<script>
  const dialog = document.getElementById("game-instructions") as HTMLDialogElement;
  const helpButton = document.getElementById("help-button");
  const closeButton = document.getElementById("close-instructions");

  helpButton?.addEventListener("click", () => {
    dialog?.showModal();
  });

  closeButton?.addEventListener("click", () => {
    dialog?.close();
  });

  // New Color Generation and Management
const letterColors: Record<string, string> = {}; 
  let hue = 0;

  // Function to generate a new distinct HSL color
  function getUniqueColor() {
    const saturation = 70;
    const lightness = 50;
    const color = `hsl(${hue}, ${saturation}%, ${lightness}%)`;
    hue = (hue + 45) % 360;
    return color;
  }

  const allLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  for (const char of allLetters) {
    letterColors[char] = getUniqueColor();
  }

  // Unified Toggle Function
  function toggleLetterState(letter: string) {
    const upperCaseLetter = letter.toUpperCase();

    // Handle the letter box (hide/show)
    const letterBox = document.querySelector(`.letter-box[data-letter="${upperCaseLetter}"]`);
    if (letterBox instanceof HTMLElement) {
      const isVisible = letterBox.getAttribute("data-visible") === "true";
      letterBox.setAttribute("data-visible", (!isVisible).toString());
    }

    // Handle the keyboard item (selection and color)
    const keyboardItem = document.querySelector(`.keyboard-item[data-letter="${upperCaseLetter}"]`);
    if (keyboardItem instanceof HTMLElement) {
      if (keyboardItem.classList.contains("active")) {
        keyboardItem.classList.remove("active");
        keyboardItem.style.removeProperty("background-color");
        keyboardItem.style.removeProperty("--active-bg-color");
      } else {
        keyboardItem.classList.add("active");
        const assignedColor = letterColors[upperCaseLetter] || getUniqueColor();
        keyboardItem.style.backgroundColor = assignedColor;
        keyboardItem.style.setProperty("--active-bg-color", assignedColor);
      }
    }
  }

  // Event Listeners

  document.addEventListener("keydown", (e) => {
    if (/^[a-zA-Z]$/.test(e.key)) {
      e.preventDefault();
      toggleLetterState(e.key);
    }
  });

  const keyboardItems = document.querySelectorAll(".keyboard-item");

  keyboardItems.forEach((item) => {
    item.addEventListener("click", () => {
      const letter = item.getAttribute("data-letter");
      if (letter) {
        toggleLetterState(letter);
      }
    });
  });
</script>