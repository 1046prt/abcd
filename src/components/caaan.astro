---
// src/components/CanvasGenerator.astro

const {} = Astro.props;
---

<div class="canvas-generator">
  <header>
    <nav>
      <a href="/" class="back-button">‚Üê Back</a>
      <h1>Generate Image with Text</h1>
      <button class="hint" id="tip">?</button>
    </nav>
  </header>

  <main class="controls">
    <div class="input-area">
      <input 
        type="text" 
        placeholder="Type your text here..." 
        id="name" 
        class="text-input"
      />
      <div class="buttons">
        <button data-variant="text" class="action-button">Draw</button>
        <button data-variant="time" class="action-button">Time</button>
        <button data-variant="reset" class="action-button">Clear</button>
      </div>
      <div class="checkbox-area">
        <input type="checkbox" id="full" />
        <label for="full">Print Full Name</label>
      </div>
    </div>

    <div id="canvasDiv" class="image-grid"></div>
  </main>

  <dialog id="helpDialog">
    <div class="dialog-content">
      <h2>‚ú® How to Use</h2>
      <ul>
        <li><strong>Draw:</strong> Generate an image with your text or initials.</li>
        <li><strong>Time:</strong> Create an image with the current time (HH:MM:SS).</li>
        <li><strong>Clear:</strong> Reset the canvas and input field.</li>
      </ul>
      <p><strong>Tip:</strong> Right-click on any image to save it!</p>
      <button id="closeDialog" class="dialog-close">Got it!</button>
    </div>
  </dialog>
</div>

<style>
  /*body {
    margin: 0;
    min-height: 100vh;
    /* Playful gradient background */
    /*background: linear-gradient(135deg, #ffd1dc, #87CEEB, #98FB98);
    font-family: 'Comic Sans MS', 'Chalkboard SE', sans-serif;
    padding: 0;
  }*/

  .canvas-generator {
    min-height: 100vh;
    width: 100%;
    padding: 2rem;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
  }

  nav {
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    margin-bottom: 3rem;
    padding: 1rem;
    background: white;
    border-radius: 20px;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    border: 4px solid #FFB6C1;
    max-width: 1200px;
  }

  .back-button {
    position: absolute;
    left: 20px;
    background: #FF69B4;
    color: white;
    text-decoration: none;
    font-weight: bold;
    padding: 0.75rem 1.5rem;
    border-radius: 50px;
    transition: all 0.3s ease;
    font-size: 1.2rem;
  }

  .back-button:hover {
    background: #FF1493;
    transform: scale(1.1);
  }

  h1 {
    color: #FF69B4;
    font-size: 2.5rem;
    margin: 0;
    text-align: center;
    text-shadow: 2px 2px 0 #FFB6C1;
  }

  .hint {
    position: absolute;
    right: 20px;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background: #FFD700;
    color: #FF69B4;
    border: 3px solid #FF69B4;
    font-size: 1.5rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  .hint:hover {
    transform: rotate(360deg) scale(1.1);
    background: #FFA500;
  }

  .controls {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
  }

  .input-area {
    background: white;
    padding: 2rem;
    border-radius: 20px;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    border: 4px solid #98FB98;
  }

  .text-input {
    padding: 1rem 1.5rem;
    border: 3px solid #87CEEB;
    border-radius: 50px;
    font-size: 1.2rem;
    width: 100%;
    transition: all 0.3s ease;
    font-family: inherit;
  }

  .text-input:focus {
    outline: none;
    border-color: #FF69B4;
    box-shadow: 0 0 20px rgba(255, 105, 180, 0.3);
  }

  .buttons {
    display: flex;
    gap: 1rem;
    margin-top: 1.5rem;
  }

  .action-button {
    padding: 1rem 2rem;
    border-radius: 50px;
    font-size: 1.2rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    border: none;
    flex: 1;
    font-family: inherit;
    text-transform: uppercase;
  }

  .action-button[data-variant="text"] {
    background: #FF69B4;
    color: white;
  }

  .action-button[data-variant="time"] {
    background: #87CEEB;
    color: white;
  }

  .action-button[data-variant="reset"] {
    background: #98FB98;
    color: #333;
  }

  .action-button:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
  }

  .checkbox-area {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-top: 1.5rem;
    font-size: 1.2rem;
    color: #FF69B4;
  }

  .checkbox-area input[type="checkbox"] {
    width: 24px;
    height: 24px;
    border-radius: 6px;
    cursor: pointer;
  }

  .image-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 2rem;
    padding: 2rem;
    background: white;
    border-radius: 20px;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    border: 4px solid #87CEEB;
  }

  .image-grid img {
    width: 100%;
    border-radius: 15px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    border: 3px solid #FFB6C1;
  }

  .image-grid img:hover {
    transform: scale(1.05) rotate(2deg);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
  }

  dialog {
    border: none;
    border-radius: 20px;
    padding: 2rem;
    max-width: 600px;
    background: white;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    border: 4px solid #FFD700;
  }

  dialog::backdrop {
    background: rgba(255, 182, 193, 0.4);
    backdrop-filter: blur(8px);
  }

  .dialog-content {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .dialog-content h2 {
    color: #FF69B4;
    font-size: 2rem;
    margin: 0;
    text-align: center;
  }

  .dialog-content ul {
    list-style: none;
    padding: 0;
  }

  .dialog-content li {
    margin: 1rem 0;
    padding-left: 2rem;
    position: relative;
    font-size: 1.2rem;
  }

  .dialog-content li::before {
    content: "üåü";
    position: absolute;
    left: 0;
  }

  .dialog-close {
    padding: 1rem 2rem;
    background: #FFD700;
    color: #FF69B4;
    border: none;
    border-radius: 50px;
    font-size: 1.2rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-top: 1rem;
    font-family: inherit;
  }

  .dialog-close:hover {
    background: #FFA500;
    transform: scale(1.1);
  }

  @media (max-width: 768px) {
    .canvas-generator {
      padding: 1rem;
    }

    nav {
      flex-direction: column;
      gap: 1rem;
      padding: 2rem 1rem;
    }

    .back-button, .hint {
      position: static;
      margin: 0.5rem 0;
    }

    h1 {
      font-size: 2rem;
    }

    .buttons {
      flex-direction: column;
    }

    .action-button {
      width: 100%;
    }

    .image-grid {
      padding: 1rem;
      gap: 1rem;
    }
  }
</style>

<script client:load>
  class CanvasGenerator {
    constructor() {
      this.initializeElements();
      this.bindEvents();
    }

    initializeElements() {
      this.input = document.getElementById('name');
      this.canvasContainer = document.getElementById('canvasDiv');
      this.fullCheckbox = document.getElementById('full');
    }

    bindEvents() {
      document.querySelectorAll('.action-button').forEach(button => {
        button.addEventListener('click', (e) => this.handleClick(e));
      });

      const helpDialog = document.getElementById('helpDialog');
      document.getElementById('tip').addEventListener('click', () => helpDialog.showModal());
      document.getElementById('closeDialog').addEventListener('click', () => helpDialog.close());
    }

    handleClick(event) {
      const variant = event.target.dataset.variant;

      switch (variant) {
        case 'text':
          this.generateTextImage();
          break;
        case 'time':
          this.generateTimeImage();
          break;
        case 'reset':
          this.resetCanvas();
          break;
      }
    }

    createCanvas(text) {
      const canvas = document.createElement('canvas');
      canvas.width = 300;
      canvas.height = 200;

      const ctx = canvas.getContext('2d');
      const bgColor = `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0')}`;

      // Draw background
      ctx.fillStyle = bgColor;
      ctx.fillRect(0, 0, 300, 200);

      // Draw text
      ctx.font = 'bold 24px Arial';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillStyle = 'black';
      ctx.fillText(text, 150, 100);

      return canvas.toDataURL();
    }

    generateTextImage() {
      const text = this.input.value.trim();
      if (!text) return;

      const processedText = this.fullCheckbox.checked ?
        text :
        text.split(' ').map(w => w[0]).join('').toUpperCase();

      this.displayImage(this.createCanvas(processedText));
    }

    generateTimeImage() {
      const now = new Date();
      const timeString = [
        now.getHours().toString().padStart(2, '0'),
        now.getMinutes().toString().padStart(2, '0'),
        now.getSeconds().toString().padStart(2, '0')
      ].join(':');

      this.displayImage(this.createCanvas(timeString));
    }

    displayImage(dataUrl) {
      const img = document.createElement('img');
      img.src = dataUrl;
      img.alt = 'Generated image';
      this.canvasContainer.prepend(img);
    }

    resetCanvas() {
      this.canvasContainer.innerHTML = '';
      this.input.value = '';
      this.fullCheckbox.checked = false;
    }
  }

  new CanvasGenerator();
</script>