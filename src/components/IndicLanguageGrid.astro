---
import {
  englishVowels,
  englishConsonants,
  allAlphabet,
  letterPairs,
  languages,
  getLetterForLanguage
} from "@/utils/languageLetters";
import "@/assets/styles/indic.css";

const { primary, secondary } = Astro.props;
---

<div class="language-letters-container">
  <div class="main-header">
    <div class="toggle-container">
      <div class="dropdown-wrapper">
        <label for="primaryDropdown" class="dropdown-label language-label active"> PRIMARY LANGUAGE </label>
        <select id="primaryDropdown">
          <option disabled aria-disabled="true" aria-readonly="true">Select Primary Language</option>
          {
            languages.map((lang) => (
              <option class="opt" value={lang.code} selected={lang.code === primary}>
                {lang.name} ({lang.locale})
              </option>
            ))
          }
        </select>
      </div>
      <button id="toggleButton" class="toggle-button" aria-label="Swap language" title="Swap language">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
          <path d="M17 14 9 14 9 16 17 16 17 19 22 15 17 11 17 14z"></path><path
            d="M15 10 15 8 7 7 7 5 2 9 7 13 7 10 15 10z"></path>
        </svg>
      </button>

      <div class="dropdown-wrapper">
        <label for="secondaryDropdown" class="dropdown-label language-label"> SECONDARY LANGUAGE </label>
        <select id="secondaryDropdown">
          <option disabled aria-disabled="true" aria-readonly="true">Select Secondary Language</option>
          {
            languages.map((lang) => (
              <option class="opt" value={lang.code} selected={lang.code === secondary}>
                {lang.locale} ({lang.name})
              </option>
            ))
          }
        </select>
      </div>
    </div>
  </div>
  <!-- Letters Grid Section -->
  <div class="language-letters-grid">
    <h2 class="group-heading" style="grid-column: 1 / -1;">VOWELS</h2>
    {
      letterPairs
        .filter((pair) => pair.type === "vowel")
        .map((pair, index) => (
          <div data-key={`vowel-${index}`} class="language-letter-card language-letter-card-vowel">
            <div class="language-letter-top">{getLetterForLanguage(pair, primary)}</div>
            <div class="language-letter-bottom">{getLetterForLanguage(pair, secondary)}</div>
          </div>
        ))
    }

    <div class="language-letters-separator" style="grid-column: 1 / -1;"></div>

    <h2 class="group-heading" style="grid-column: 1 / -1;">CONSONANTS</h2>
    {
      letterPairs
        .filter((pair) => pair.type === "consonant")
        .map((pair, index) => (
          <div data-key={`consonant-${index}`} class="language-letter-card language-letter-card-consonant">
            <div class="language-letter-top">{getLetterForLanguage(pair, primary)}</div>
            <div class="language-letter-bottom">{getLetterForLanguage(pair, secondary)}</div>
          </div>
        ))
    }
  </div>
  <script define:vars={{ englishVowels, englishConsonants, allAlphabet, languages, primary, secondary }} is:inline>
    let selectedLanguage1 = primary;
    let selectedLanguage2 = secondary;

    const getLetter = (langCode, type, index) => {
      const langObj = languages.find((lang) => lang.code === langCode);
      if (!langObj) {
        return "";
      }

      const languageName = langObj.name; // Get the full language name (e.g., "hindi", "kannada")

      if (type === "vowel") {
        // Handle Marathi separately as it shares Hindi vowels
        if (langCode === "mr") {
          return allAlphabet.vowels.hindi[index] || "";
        }
        // Use the languageName to access the correct array in allAlphabets.vowels
        return allAlphabet.vowels[languageName]?.[index] || "";
      } else if (type === "consonant") {
        // Handle Marathi separately as it shares Hindi consonants
        if (langCode === "mr") {
          return allAlphabet.consonants.hindi[index] || "";
        }
        // Use the languageName to access the correct array in allAlphabets.consonants
        return allAlphabet.consonants[languageName]?.[index] || "";
      }
      return "";
    };

    // Main function to swap languages
    const swapLanguages = () => {
      // Swap the language variables
      [selectedLanguage1, selectedLanguage2] = [selectedLanguage2, selectedLanguage1];

      // Update the dropdown values
      document.getElementById("primaryDropdown").value = selectedLanguage1;
      document.getElementById("secondaryDropdown").value = selectedLanguage2;
      // Refresh the grid
      updateGrid();
      // Toggle persistent state
      const button = document.getElementById("toggleButton");
      button.classList.toggle("toggled");
      // Keep the animation
      button.classList.add("swapping");
      setTimeout(() => button.classList.remove("swapping"), 300);
      // Add visual feedback
      const toggleButton = document.getElementById("toggleButton");
      toggleButton.classList.add("swapping");
      setTimeout(() => {
        toggleButton.classList.remove("swapping");
      }, 300);
    };
    // Helper function to update language labels
    const updateGrid = () => {
      // Update all letter cards
      const vowelCards = document.querySelectorAll(".language-letter-card-vowel");
      const consonantCards = document.querySelectorAll(".language-letter-card-consonant");
      // Update vowels
      vowelCards.forEach((card, index) => {
        const topElement = card.querySelector(".language-letter-top");
        const bottomElement = card.querySelector(".language-letter-bottom");
        if (topElement && bottomElement) {
          topElement.textContent = getLetter(selectedLanguage1, "vowel", index);
          bottomElement.textContent = getLetter(selectedLanguage2, "vowel", index);
          // Add special styling for English text
          topElement.classList.toggle("english-text", selectedLanguage1 === "en");
          bottomElement.classList.toggle("english-text", selectedLanguage2 === "en");
          // Add transliteration class for proper display of diacritical marks
          topElement.classList.toggle("transliteration", selectedLanguage1 === "en");
          bottomElement.classList.toggle("transliteration", selectedLanguage2 === "en");
        }
      });
      // Update consonants
      consonantCards.forEach((card, index) => {
        const topElement = card.querySelector(".language-letter-top");
        const bottomElement = card.querySelector(".language-letter-bottom");
        if (topElement && bottomElement) {
          topElement.textContent = getLetter(selectedLanguage1, "consonant", index);
          bottomElement.textContent = getLetter(selectedLanguage2, "consonant", index);
          // Add special styling for English text
          topElement.classList.toggle("english-text", selectedLanguage1 === "en");
          bottomElement.classList.toggle("english-text", selectedLanguage2 === "en");
          // Add transliteration class for proper display of diacritical marks
          topElement.classList.toggle("transliteration", selectedLanguage1 === "en");
          bottomElement.classList.toggle("transliteration", selectedLanguage2 === "en");
        }
      });
    };
    // Set up event listeners
    document.addEventListener("DOMContentLoaded", () => {
      const dropdown1 = document.getElementById("primaryDropdown");
      const dropdown2 = document.getElementById("secondaryDropdown");
      const toggleButton = document.getElementById("toggleButton");
      // Get the popup elements
      const mainHeader = document.querySelector(".main-header");
      const scrollThreshold = 50; // Pixels to scroll before the header shrinks

      function handleScroll() {
        if (window.scrollY > scrollThreshold) {
          mainHeader.classList.add("scrolled-header");
        } else {
          mainHeader.classList.remove("scrolled-header");
        }
      }

      // Initial check in case the page is loaded with a scroll position
      handleScroll();

      // Listen for scroll events
      window.addEventListener("scroll", handleScroll);

      // Event listeners
      dropdown1.addEventListener("change", (e) => {
        selectedLanguage1 = e.target.value;
        updateGrid();
      });
      dropdown2.addEventListener("change", (e) => {
        selectedLanguage2 = e.target.value;
        updateGrid();
      });
      // Add click handler for swap button
      toggleButton.addEventListener("click", swapLanguages);
      updateGrid();
    });
  </script>
</div>
