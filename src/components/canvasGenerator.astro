---
// src/components/CanvasGenerator.astro
const {} = Astro.props;
---

<div class="canvas-generator">
  <header>
    <nav>
      <a href="/" class="back-button">‚Üê Back</a>
      <h1>Generate Image with Text</h1>
      <button class="hint" id="tip">?</button>
    </nav>
  </header>

  <main class="canvas__header">
    <div class="controls">
      <input 
        type="text" 
        placeholder="Enter your text here..." 
        id="name" 
        value=""
        class="text-input"
      />
      <div class="button-group">
        <button class="action-button text" data-variant="text">Draw</button>
        <button class="action-button time" data-variant="time">Time</button>
        <button class="action-button reset" data-variant="reset">Clear</button>
      </div>
      
      <div class="action">
        <label class="checkbox-container">
          <input type="checkbox" id="full" />
          <!--<span class="checkmark"></span>-->
          <span>Print Full Name</span>
        </label>
      </div>
    </div>
    
    <div id="canvasDiv" class="canvas__container"></div>
  </main>

  <dialog id="helpDialog" class="help-dialog">
    <div class="dialog-content">
      <h2>‚ú® Image Generator Guide</h2>
      <p>Create beautiful text-based images with these features:</p>
      <ul class="features-list">
        <li>üé® <strong>Draw:</strong> Generate image with your text (initials or full name)</li>
        <li>‚è±Ô∏è <strong>Time:</strong> Create image with current time (HH:MM:SS)</li>
        <li>üßπ <strong>Clear:</strong> Reset canvas and input field</li>
      </ul>
      <p class="tip">üí° Right-click any image to save it!</p>
      <button class="dialog-close" id="closeDialog">Got it!</button>
    </div>
  </dialog>
</div>

<script>
  class CanvasGenerator {
    constructor() {
      this.initializeElements();
      this.bindEvents();
    }

    initializeElements() {
      this.input = document.getElementById('name');
      this.textButton = document.querySelector('.action-button.text');
      this.timeButton = document.querySelector('.action-button.time');
      this.resetButton = document.querySelector('.action-button.reset');
      this.fullNameCheckbox = document.getElementById('full');
      this.canvasContainer = document.getElementById('canvasDiv');
    }

    bindEvents() {
      this.textButton.addEventListener('click', () => this.generateTextImage());
      this.timeButton.addEventListener('click', () => this.generateTimeImage());
      this.resetButton.addEventListener('click', () => this.resetCanvas());
    }

    getRandomColor() {
      const colors = ['FFE2E2', 'E2FFE2', 'E2E2FF', 'FFE2FF', 'FFFFE2', 'E2FFFF'];
      return colors[Math.floor(Math.random() * colors.length)];
    }

    createCanvas(text, isLarge = false) {
      const dimensions = { width: 300, height: 300 };
      const canvas = document.createElement('canvas');
      canvas.width = dimensions.width;
      canvas.height = dimensions.height;
      
      const ctx = canvas.getContext('2d');
      
      // Background with gradient
      const gradient = ctx.createLinearGradient(0, 0, dimensions.width, dimensions.height);
      gradient.addColorStop(0, `#${this.getRandomColor()}`);
      gradient.addColorStop(1, `#${this.getRandomColor()}`);
      
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, dimensions.width, dimensions.height);

      // Add some patterns
      ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
      for (let i = 0; i < 5; i++) {
        ctx.beginPath();
        ctx.arc(
          Math.random() * dimensions.width,
          Math.random() * dimensions.height,
          Math.random() * 50 + 20,
          0,
          Math.PI * 2
        );
        ctx.fill();
      }

      // Text shadow
      ctx.shadowColor = 'rgba(0, 0, 0, 0.2)';
      ctx.shadowBlur = 10;
      ctx.shadowOffsetX = 2;
      ctx.shadowOffsetY = 2;

      // Text
      ctx.font = `bold ${isLarge ? '48px' : '36px'} Arial`;
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillStyle = '#1a202c';
      ctx.fillText(text, dimensions.width / 2, dimensions.height / 2);

      // Add border
      ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
      ctx.lineWidth = 8;
      ctx.strokeRect(4, 4, dimensions.width - 8, dimensions.height - 8);

      return canvas.toDataURL();
    }

    generateTextImage() {
      const inputValue = this.input.value.trim();
      const isFullName = this.fullNameCheckbox.checked;
      
      if (!inputValue) {
        this.showAlert('Please enter some text');
        return;
      }

      const renderedText = this.processText(inputValue, isFullName);
      const imageUrl = this.createCanvas(renderedText, true);
      this.displayImage(imageUrl);
    }

    generateTimeImage() {
      const now = new Date();
      const timeString = [
        now.getHours().toString().padStart(2, '0'),
        now.getMinutes().toString().padStart(2, '0'),
        now.getSeconds().toString().padStart(2, '0')
      ].join(':');

      const imageUrl = this.createCanvas(timeString);
      this.displayImage(imageUrl);
    }

    processText(text, isFull = false) {
      if (isFull) return text;

      const words = text.split(' ');
      return words.length > 1 
        ? words.map(word => word[0]).join('').toUpperCase()
        : text.slice(0, 2).toUpperCase();
    }

    displayImage(imageUrl) {
      const imgElement = document.createElement('img');
      imgElement.src = imageUrl;
      imgElement.classList.add('generated-image');
      imgElement.addEventListener('click', () => {
        const link = document.createElement('a');
        link.href = imageUrl;
        link.download = 'generated-image.png';
        link.click();
      });
      
      const containerDiv = document.createElement('div');
      containerDiv.classList.add('image-wrapper');
      containerDiv.appendChild(imgElement);

      this.canvasContainer.appendChild(containerDiv);
    }

    resetCanvas() {
      this.canvasContainer.innerHTML = '';
      this.input.value = '';
      this.fullNameCheckbox.checked = false;
    }

    showAlert(message) {
      const alertDiv = document.createElement('div');
      alertDiv.classList.add('alert');
      alertDiv.textContent = message;
      document.body.appendChild(alertDiv);

      setTimeout(() => {
        alertDiv.remove();
      }, 3000);
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    new CanvasGenerator();
    
    const helpDialog = document.getElementById('helpDialog');
    const tipButton = document.getElementById('tip');
    const closeButton = document.getElementById('closeDialog');

    tipButton.addEventListener('click', () => helpDialog.showModal());
    closeButton.addEventListener('click', () => helpDialog.close());
  });
</script>

<style>
  /*:global(body) {
    margin: 0;
    min-height: 100vh;
    background: linear-gradient(135deg, #f8fafc, #f1f5f9);
    font-family: 'Inter', system-ui, -apple-system, sans-serif;
    padding: 2rem;
  }*/

  .canvas-generator {
    background: white;
    border-radius: 1.5rem;
    box-shadow: 0 12px 24px -6px rgba(9, 30, 66, 0.08);
    padding: 3rem;
    max-width: 1000px;
    margin: 2rem auto;
    position: relative;
  }

  nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 3rem;
    padding-bottom: 2rem;
    border-bottom: 2px solid #e2e8f0;
  }

  .back-button {
    color: #3b82f6;
    text-decoration: none;
    font-weight: 600;
    padding: 0.75rem 1.5rem;
    border-radius: 0.75rem;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: #f0f6ff;
  }

  .back-button:hover {
    background: #3b82f6;
    color: white;
    transform: translateX(-4px);
  }

  h1 {
    color: #1e293b;
    font-size: 2rem;
    font-weight: 800;
    margin: 0;
    background: linear-gradient(135deg, #2563eb, #3b82f6);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    letter-spacing: -0.025em;
  }

  .hint {
    width: 44px;
    height: 44px;
    border: none;
    border-radius: 50%;
    background: linear-gradient(135deg, #2563eb, #3b82f6);
    color: white;
    font-weight: 600;
    font-size: 1.25rem;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .hint:hover {
    transform: scale(1.1) rotate(12deg);
    box-shadow: 0 8px 16px rgba(59, 130, 246, 0.2);
  }

  .controls {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .input-group {
    display: grid;
    grid-template-columns: 1fr auto;
    gap: 1.5rem;
    align-items: center;
  }

  .text-input {
    padding: 1rem 1.5rem;
    border: 2px solid #e2e8f0;
    border-radius: 1rem;
    font-size: 1.125rem;
    width: 100%;
    transition: all 0.3s ease;
    background: #f8fafc;
    color: #1e293b;
  }

  .text-input:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.15);
    background: white;
  }

  .button-group {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .action-button {
    padding: 0.875rem 1.75rem;
    background: linear-gradient(135deg, #2563eb, #3b82f6);
    color: white;
    border: none;
    border-radius: 0.875rem;
    cursor: pointer;
    font-weight: 600;
    font-size: 1rem;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    align-items: center;
    gap: 0.5rem;
    white-space: nowrap;
  }

  .action-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 16px rgba(59, 130, 246, 0.2);
  }

  .action-button.reset {
    background: linear-gradient(135deg, #64748b, #94a3b8);
  }

  .checkbox-container {
    display: flex;
    align-items: center;
    gap: 1rem;
    cursor: pointer;
    user-select: none;
    color: #475569;
    font-size: 1rem;
    padding: 0.75rem 1rem;
    border-radius: 0.75rem;
    background: #f8fafc;
    width: fit-content;
    margin-top: 1rem;
  }

  #full {
    width: 20px;
    height: 20px;
    border: 2px solid #cbd5e1;
    border-radius: 0.5rem;
    appearance: none;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  #full:checked {
    background: #3b82f6;
    border-color: #3b82f6;
  }

  #full:checked::after {
    content: "‚úì";
    color: white;
    font-weight: bold;
    display: block;
    text-align: center;
    line-height: 16px;
  }

  .canvas__container {
    margin-top: 3rem;
    display: grid;
    gap: 2rem;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  }

  .canvas__container img {
    width: 100%;
    border-radius: 1.25rem;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    aspect-ratio: 1;
    object-fit: cover;
  }

  .canvas__container img:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 32px rgba(0, 0, 0, 0.12);
  }

  .help-dialog {
    border: none;
    border-radius: 1.5rem;
    padding: 2.5rem;
    max-width: 560px;
    background: white;
    box-shadow: 0 24px 48px rgba(0, 0, 0, 0.12);
  }

  .help-dialog::backdrop {
    background: rgba(0, 0, 0, 0.4);
    backdrop-filter: blur(6px);
  }

  .dialog-content {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .features-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .features-list li {
    background: #f8fafc;
    padding: 1.5rem;
    border-radius: 1rem;
    border-left: 4px solid #3b82f6;
    color: #475569;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .dialog-close {
    padding: 1rem 2rem;
    background: linear-gradient(135deg, #2563eb, #3b82f6);
    color: white;
    border: none;
    border-radius: 1rem;
    cursor: pointer;
    font-weight: 600;
    transition: all 0.3s ease;
    width: 100%;
  }

  @media (max-width: 768px) {
    .canvas-generator {
      padding: 2rem;
      margin: 1rem;
    }
    
    .input-group {
      grid-template-columns: 1fr;
    }
    
    .button-group {
      width: 100%;
      flex-wrap: wrap;
    }
    
    .action-button {
      flex: 1 1 45%;
    }

    h1 {
      font-size: 1.5rem;
    }
  }

</style>