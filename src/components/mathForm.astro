<!DOCTYPE html>
<html>
<head>
<style>
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

.math-practice {
  max-width: 800px;
  margin: 2rem auto;
  font-family: system-ui, -apple-system, sans-serif;
  background: white;
  border-radius: 1rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

/* Header Styles */
header {
  grid-area: header;
  grid-template-columns: minmax(1%, 10%) 1fr auto;
  padding: 1rem;
  display: grid;
  align-content: center;
  align-items: center;
  border-bottom: 1px solid #e5e5e5;
  background: #f8f9fa;
  border-radius: 1rem 1rem 0 0;
}

.action {
  grid-column: 1;
}

.caption {
  grid-column: 2;
  text-align: center;
}

.option {
  grid-column: 3;
  cursor: pointer;
  width: 2rem;
  height: 2rem;
  display: grid;
  place-items: center;
  border-radius: 50%;
  background: #e9ecef;
  transition: background 0.2s;
}

.option:hover {
  background: #dee2e6;
}

/* Dialog Styles */
dialog {
  padding: 2rem;
  border-radius: 1rem;
  border: none;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  max-width: 500px;
}

dialog::backdrop {
  background: rgba(0, 0, 0, 0.5);
}

dialog button {
  float: right;
  padding: 0.5rem 1rem;
  border: none;
  background: #007bff;
  color: white;
  border-radius: 0.5rem;
  cursor: pointer;
}

dialog button:hover {
  background: #0056b3;
}

dialog ul {
  margin: 1rem 0;
  padding-left: 2rem;
}

/* Operator Container Styles */
.operator__container {
  display: grid;
  grid-auto-flow: column;
  justify-content: center;
  gap: 1rem;
  padding: 1.5rem;
  background: #f8f9fa;
}

.btn__operator {
  font-size: 1.5rem;
  color: white;
  cursor: pointer;
  border: none;
  height: 3rem;
  width: 3rem;
  background: #28a745;
  border-radius: 0.5rem;
  transition: transform 0.2s, background 0.2s;
}

.btn__operator:hover {
  transform: scale(1.1);
  background: #218838;
}

/* Form Styles */
form {
  padding: 2rem;
  display: grid;
  grid-template-columns: repeat(6, auto);
  gap: 1rem;
  align-items: center;
  justify-content: center;
}

.number {
  width: 5rem;
  height: 3rem;
  text-align: center;
  font-size: 1.5rem;
  border: 2px solid #dee2e6;
  border-radius: 0.5rem;
  background: #f8f9fa;
  color: #495057;
}

.number:focus {
  outline: none;
  border-color: #007bff;
}

.operator {
  font-size: 2rem;
  color: #495057;
}

.result {
  width: 2rem;
  height: 2rem;
  display: grid;
  place-items: center;
}

#submitBtn {
  padding: 0.5rem 1.5rem;
  font-size: 1rem;
  color: white;
  background: #007bff;
  border: none;
  border-radius: 0.5rem;
  cursor: pointer;
  transition: background 0.2s;
}

#submitBtn:hover {
  background: #0056b3;
}

/* Animation Styles */
@keyframes correct {
  0% { transform: scale(1); background: #28a745; }
  50% { transform: scale(1.1); background: #28a745; }
  100% { transform: scale(1); background: #28a745; }
}

@keyframes wrong {
  0% { transform: translateX(0); }
  25% { transform: translateX(-10px); background: #dc3545; }
  75% { transform: translateX(10px); background: #dc3545; }
  100% { transform: translateX(0); }
}

.animate-correct {
  animation: correct 0.5s ease-in-out;
}

.animate-wrong {
  animation: wrong 0.5s ease-in-out;
}

/* Success/Error Icons */
.result::after {
  font-size: 1.5rem;
}

.result.correct::after {
  content: "✓";
  color: #28a745;
}

.result.incorrect::after {
  content: "×";
  color: #dc3545;
}

.score {
  text-align: center;
  padding: 1rem;
  font-size: 1.2rem;
  color: #495057;
}
</style>
</head>
<body>
<section class="math-practice">
  <header>
    <dialog id="helpDialog">
      <button onclick="closeDialog()">Close</button>
      <h3>Math Practice Help</h3>
      <p>This is basic math operation practice.</p>
      <ul>
        <li>Sum of 2 digits</li>
        <li>Subtraction of 2 digits</li>
        <li>Multiplication of 2 digits × 1 digit</li>
      </ul>
      <p>
        Click on the refresh icon to get a new data set in the first 2 boxes. 
        Enter your answer and click Submit to check it.
      </p>
    </dialog>
    <div class="action">
      <a href="/" class="back">←</a>
    </div>
    <div class="caption">
      <h2>Basic Arithmetic</h2>
    </div>
    <div class="option" id="tip" onclick="openDialog()">?</div>
  </header>

  <div class="score">Score: <span id="scoreDisplay">0</span></div>

  <section class="operator__container">
    <button class="btn__operator" id="refresh" type="button">
      <span>↻</span>
    </button>
    <button class="btn__operator" id="add" type="button">
      <span>+</span>
    </button>
    <button class="btn__operator" id="subtract" type="button">
      <span>−</span>
    </button>
    <button class="btn__operator" id="multiply" type="button">
      <span>×</span>
    </button>
  </section>

  <form id="mathForm" onsubmit="checkAnswer(event)">
    <input readonly type="number" id="first" name="b" class="number one" value="0" />
    <samp id="operator" class="operator">+</samp>
    <input readonly type="number" id="second" name="a" class="number two" value="0" />
    <samp class="operator">=</samp>
    <input
      type="number"
      id="output"
      name="c"
      class="number output three"
      placeholder="?"
      autofocus
    />
    <button type="submit" id="submitBtn">Submit</button>
    <output class="result" id="result" name="result" for="a b"></output>
  </form>
</section>

<script>
let currentOperator = '+';
let score = 0;

function generateNumber(max = 99) {
  return Math.floor(Math.random() * max) + 1;
}

function updateNumbers() {
  document.getElementById('first').value = generateNumber();
  document.getElementById('second').value = generateNumber();
  document.getElementById('output').value = '';
  document.getElementById('result').className = 'result';
  document.getElementById('output').classList.remove('animate-correct', 'animate-wrong');
}

function updateScore() {
  score++;
  document.getElementById('scoreDisplay').textContent = score;
}

function checkAnswer(event) {
  event.preventDefault();
  
  const first = parseInt(document.getElementById('first').value);
  const second = parseInt(document.getElementById('second').value);
  const output = parseInt(document.getElementById('output').value);
  const outputElement = document.getElementById('output');
  
  let expectedResult;
  switch(currentOperator) {
    case '+':
      expectedResult = first + second;
      break;
    case '−':
      expectedResult = first - second;
      break;
    case '×':
      expectedResult = first * second;
      break;
  }
  
  const resultElement = document.getElementById('result');
  
  if (output === expectedResult) {
    resultElement.className = 'result correct';
    outputElement.classList.add('animate-correct');
    updateScore();
    
    // Generate new question after a short delay
    setTimeout(() => {
      updateNumbers();
    }, 1000);
  } else {
    resultElement.className = 'result incorrect';
    outputElement.classList.add('animate-wrong');
    
    // Remove animation class after animation completes
    setTimeout(() => {
      outputElement.classList.remove('animate-wrong');
    }, 500);
  }
}

function setOperator(op) {
  currentOperator = op;
  document.getElementById('operator').textContent = op;
  updateNumbers();
}

function openDialog() {
  document.getElementById('helpDialog').showModal();
}

function closeDialog() {
  document.getElementById('helpDialog').close();
}

// Event Listeners
document.getElementById('refresh').addEventListener('click', updateNumbers);
document.getElementById('add').addEventListener('click', () => setOperator('+'));
document.getElementById('subtract').addEventListener('click', () => setOperator('−'));
document.getElementById('multiply').addEventListener('click', () => setOperator('×'));

// Initialize
updateNumbers();
</script>
</body>
</html>