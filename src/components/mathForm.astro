---
import "@/assets/styles/math.css";
---

<div class="math-practice">
  <section class="operator-container">
    <button class="operator-btn refresh" id="refresh" type="button">
      <span>↻</span>
    </button>
    <button class="operator-btn add" id="add" type="button">
      <span>+</span>
    </button>
    <button class="operator-btn subtract" id="subtract" type="button">
      <span>−</span>
    </button>
    <button class="operator-btn multiply" id="multiply" type="button">
      <span>×</span>
    </button>
    <button class="operator-btn divide" id="divide" type="button">
      <span>÷</span>
    </button>
  </section>

  <form id="mathForm" class="math-form">
    <div class="math-problem-container">
      <div class="number-group">
        <input readonly type="text" inputmode="numeric" pattern="[0-9]*" id="first" class="number" value="0" />
        <samp id="operator" class="operator">+</samp>
        <input readonly type="text" inputmode="numeric" pattern="[0-9]*" id="second" class="number" value="0" />
        <samp class="operator">=</samp>
        <div class="answer-wrapper">
          <input
            type="text"
            inputmode="numeric"
            pattern="[0-9]*"
            id="output"
            class="number output"
            placeholder="?"
            autofocus
          />
          <div id="resultIndicator" class="result-indicator"></div>
        </div>
      </div>
    </div>
  </form>

  <!-- Score moved below the form -->
  <div class="score">Score: <span id="scoreDisplay">0</span></div>
</div>

<script>
  const state = {
    currentOperator: "+",
    score: 0,
    scoreIncrement: 10
  };

  function initMathPractice() {
    updateNumbers();
    setupEventListeners();
  }

  function generateNumber(max = 99, min = 1) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  function updateNumbers() {
    let first, second;

    if (state.currentOperator === "×") {
      first = generateNumber();
      second = generateNumber(9); // 1-digit multiplier
    } else if (state.currentOperator === "÷") {
      // Ensure whole number division
      second = generateNumber(9); // 1-digit divisor
      const result = generateNumber(10); // 1-digit quotient
      first = result * second; // Dividend = quotient × divisor
    } else {
      first = generateNumber();
      second = generateNumber();
    }

    document.getElementById("first").value = first;
    document.getElementById("second").value = second;
    document.getElementById("output").value = "";
    document.getElementById("resultIndicator").innerHTML = "";
    document.getElementById("output").focus();
  }

  function updateScore() {
    state.score += state.scoreIncrement;
    const scoreDisplay = document.getElementById("scoreDisplay");
    scoreDisplay.textContent = state.score.toString();
    scoreDisplay.classList.add("score-pop");
    setTimeout(() => scoreDisplay.classList.remove("score-pop"), 200);
  }

  function checkAnswer() {
    const first = parseInt(document.getElementById("first").value);
    const second = parseInt(document.getElementById("second").value);
    const output = parseInt(document.getElementById("output").value);
    const indicator = document.getElementById("resultIndicator");

    if (isNaN(output)) {
      indicator.innerHTML = "";
      indicator.className = "result-indicator";
      return;
    }

    let expectedResult;
    switch (state.currentOperator) {
      case "+":
        expectedResult = first + second;
        break;
      case "−":
        expectedResult = first - second;
        break;
      case "×":
        expectedResult = first * second;
        break;
      case "÷":
        expectedResult = first / second;
        break;
      default:
        expectedResult = 0;
    }

    // Check if result is integer for division
    const isValid =
      state.currentOperator === "÷"
        ? Number.isInteger(expectedResult) && output === expectedResult
        : output === expectedResult;

    if (isValid) {
      indicator.innerHTML = "✓";
      indicator.className = "result-indicator success";
      updateScore();
      setTimeout(updateNumbers, 800);
    } else {
      indicator.innerHTML = "✗";
      indicator.className = "result-indicator error";
    }
  }

  function setOperator(op) {
    state.currentOperator = op;
    document.getElementById("operator").textContent = op;
    updateNumbers();
  }

  function setupEventListeners() {
    const outputElement = document.getElementById("output");

    // Prevent non-numeric input in real-time
    outputElement.addEventListener("input", (e) => {
      e.target.value = e.target.value.replace(/[^0-9]/g, "");
      checkAnswer();
    });

    document.getElementById("refresh").addEventListener("click", updateNumbers);
    document.getElementById("add").addEventListener("click", () => setOperator("+"));
    document.getElementById("subtract").addEventListener("click", () => setOperator("−"));
    document.getElementById("multiply").addEventListener("click", () => setOperator("×"));
    document.getElementById("divide").addEventListener("click", () => setOperator("÷"));
  }

  function openDialog() {
    document.getElementById("helpDialog").showModal();
  }

  function closeDialog() {
    document.getElementById("helpDialog").close();
  }

  document.addEventListener("DOMContentLoaded", initMathPractice);
</script>
