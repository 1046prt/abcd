---
// MathPractice.astro
interface Props {
  title?: string;
}

const { title = "Basic Arithmetic" } = Astro.props;
---

<div class="math-practice">
  <header class="header">
    <dialog id="helpDialog" class="help-dialog">
      <button onclick="closeDialog()" class="dialog-btn">Close</button>
      <h3>Math Practice Help</h3>
      <p>This is basic math operation practice.</p>
      <ul>
        <li>Sum of 2 digits</li>
        <li>Subtraction of 2 digits</li>
        <li>Multiplication of 2 digits × 1 digit</li>
      </ul>
      <p>
        Click on the refresh icon to get a new data set in the first 2 boxes. 
        Enter your answer and click Submit to check it.
      </p>
    </dialog>
    <div class="action">
      <a href="/" class="back">←</a>
    </div>
    <div class="caption">
      <h2>{title}</h2>
    </div>
    <button class="help-btn" id="tip" onclick="openDialog()">?</button>
  </header>

  <div class="score">Score: <span id="scoreDisplay">0</span></div>

  <section class="operator-container">
    <button class="operator-btn refresh" id="refresh" type="button">
      <span>↻</span>
    </button>
    <button class="operator-btn add" id="add" type="button">
      <span>+</span>
    </button>
    <button class="operator-btn subtract" id="subtract" type="button">
      <span>−</span>
    </button>
    <button class="operator-btn multiply" id="multiply" type="button">
      <span>×</span>
    </button>
  </section>

  <form id="mathForm" class="math-form">
    <input readonly type="number" id="first" name="b" class="number" value="0" />
    <samp id="operator" class="operator">+</samp>
    <input readonly type="number" id="second" name="a" class="number" value="0" />
    <samp class="operator">=</samp>
    <input
      type="number"
      id="output"
      name="c"
      class="number output"
      placeholder="?"
      autofocus
    />
    <button type="submit" id="submitBtn" class="submit-btn">Submit</button>
    <output class="result" id="result" name="result" for="a b"></output>
  </form>
</div>

<script>
interface MathState {
  currentOperator: string;
  score: number;
  scoreIncrement: number;
}

const state: MathState = {
  currentOperator: '+',
  score: 0,
  scoreIncrement: 10
};

export function initMathPractice() {
  updateNumbers();
  setupEventListeners();
}

function generateNumber(max = 99): number {
  return Math.floor(Math.random() * max) + 1;
}

function updateNumbers(): void {
  const first = generateNumber();
  const second = state.currentOperator === '×' ? generateNumber(9) : generateNumber();
  
  const firstInput = document.getElementById('first') as HTMLInputElement;
  const secondInput = document.getElementById('second') as HTMLInputElement;
  const outputInput = document.getElementById('output') as HTMLInputElement;
  const resultElement = document.getElementById('result') as HTMLOutputElement;
  const mathForm = document.getElementById('mathForm') as HTMLFormElement;
  
  firstInput.value = first.toString();
  secondInput.value = second.toString();
  outputInput.value = '';
  resultElement.className = 'result';
  mathForm.classList.remove('correct', 'incorrect');
  outputInput.focus();
}

function updateScore(): void {
  state.score += state.scoreIncrement;
  const scoreDisplay = document.getElementById('scoreDisplay');
  const scoreContainer = scoreDisplay?.parentElement;
  
  if (scoreDisplay) {
    scoreDisplay.textContent = state.score.toString();
    scoreContainer?.classList.add('animate');
    
    setTimeout(() => {
      scoreContainer?.classList.remove('animate');
    }, 300);
  }
}

function checkAnswer(event: Event): void {
  event.preventDefault();
  
  const mathForm = event.target as HTMLFormElement;
  const first = parseInt((document.getElementById('first') as HTMLInputElement).value);
  const second = parseInt((document.getElementById('second') as HTMLInputElement).value);
  const outputElement = document.getElementById('output') as HTMLInputElement;
  const output = outputElement.value === '' ? NaN : parseInt(outputElement.value);
  
  if (isNaN(output)) {
    mathForm.classList.add('incorrect');
    outputElement.value = '';
    outputElement.focus();
    return;
  }
  
  let expectedResult: number;
  switch(state.currentOperator) {
    case '+':
      expectedResult = first + second;
      break;
    case '−':
      expectedResult = first - second;
      break;
    case '×':
      expectedResult = first * second;
      break;
    default:
      expectedResult = 0;
  }
  
  if (output === expectedResult) {
    mathForm.classList.add('correct');
    updateScore();
    setTimeout(() => {
      mathForm.classList.remove('correct');
      updateNumbers();
    }, 500);
  } else {
    mathForm.classList.add('incorrect');
    outputElement.value = '';
    outputElement.focus();
    setTimeout(() => {
      mathForm.classList.remove('incorrect');
    }, 500);
  }
}

function setOperator(op: string): void {
  state.currentOperator = op;
  const operatorElement = document.getElementById('operator');
  if (operatorElement) {
    operatorElement.textContent = op;
  }
  updateNumbers();
}

function setupEventListeners(): void {
  const mathForm = document.getElementById('mathForm');
  const helpBtn = document.getElementById('tip');
  const closeDialogBtn = document.querySelector('.dialog-btn');
  const helpDialog = document.getElementById('helpDialog') as HTMLDialogElement;

  if (mathForm) {
    mathForm.addEventListener('submit', checkAnswer);
  }

  document.getElementById('refresh')?.addEventListener('click', updateNumbers);
  document.getElementById('add')?.addEventListener('click', () => setOperator('+'));
  document.getElementById('subtract')?.addEventListener('click', () => setOperator('−'));
  document.getElementById('multiply')?.addEventListener('click', () => setOperator('×'));

  helpBtn?.addEventListener('click', () => helpDialog.showModal());
  closeDialogBtn?.addEventListener('click', () => helpDialog.close());
}
</script>

<style>
 /* Enhanced Theme Variables */
:root {
  --color-primary: #4CAF50;
  --color-primary-light: #81C784;
  --color-primary-dark: #388E3C;
  --color-error: #f44336;
  --color-error-light: #EF9A9A;
  --color-background: #f8fafc;
  --color-white: #ffffff;
  --color-success-bg: rgba(76, 175, 80, 0.1);
  --color-error-bg: rgba(244, 67, 54, 0.1);
  
  --shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.05);
  --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
  
  --radius-sm: 0.5rem;
  --radius-md: 0.75rem;
  --radius-lg: 1rem;
  --radius-full: 9999px;
}

.math-practice {
  width: min(95%, 700px);
  margin: 2rem auto;
  background: var(--color-white);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-lg);
  overflow: hidden;
  position: relative;
}

.header {
  padding: 1.5rem 2rem;
  background: linear-gradient(to right, #4CAF50, #45a049);
  color: white;
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 1rem;
}

.back {
  color: white;
  text-decoration: none;
  font-size: 1.5rem;
  padding: 0.5rem 1rem;
  border-radius: var(--radius-md);
  transition: background 0.2s;
}

.back:hover {
  background: rgba(255, 255, 255, 0.1);
}

.caption h2 {
  font-size: 1.75rem;
  font-weight: 600;
  margin: 0;
}

.help-btn {
  background: rgba(255, 255, 255, 0.2);
  border: none;
  color: white;
  width: 2.5rem;
  height: 2.5rem;
  border-radius: var(--radius-full);
  cursor: pointer;
  font-size: 1.2rem;
  transition: all 0.2s;
}

.help-btn:hover {
  background: rgba(255, 255, 255, 0.3);
  transform: scale(1.05);
}

.score {
  position: fixed;
  top: 2rem;
  right: 2rem;
  background: var(--color-primary);
  color: white;
  padding: 0.75rem 1.5rem;
  border-radius: var(--radius-full);
  font-weight: 600;
  box-shadow: var(--shadow-md);
  transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
}

.score.animate {
  transform: scale(1.1);
}

/* Operator Container */
.operator-container {
  display: flex;
  justify-content: center;
  gap: 1rem;
  padding: 1.5rem;
  background: #f8fafc;
  border-bottom: 1px solid #e2e8f0;
}

.operator-btn {
  width: 3.5rem;
  height: 3.5rem;
  border: none;
  border-radius: var(--radius-md);
  font-size: 1.5rem;
  color: white;
  cursor: pointer;
  transition: all 0.2s;
  display: grid;
  place-items: center;
}

.operator-btn:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-md);
}

.refresh { background: #9333ea; }
.add { background: #3b82f6; }
.subtract { background: #f59e0b; }
.multiply { background: #ec4899; }

/* Math Form */
.math-form {
  padding: 2.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 1rem;
  transition: background-color 0.3s ease;
}

.math-form.correct {
  animation: flashSuccess 1s ease;
}

.math-form.incorrect {
  animation: flashError 1s ease;
}

.number {
  width: 5rem;
  height: 4rem;
  text-align: center;
  font-size: 1.75rem;
  font-weight: 600;
  border: 2px solid #e2e8f0;
  border-radius: var(--radius-md);
  background: white;
  color: #1e293b;
  transition: all 0.2s;
}

.number:focus {
  outline: none;
  border-color: var(--color-primary);
  box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.2);
}

.operator {
  font-size: 2rem;
  color: #64748b;
  margin: 0 0.5rem;
  font-weight: 500;
}

.submit-btn {
  background: var(--color-primary);
  color: white;
  border: none;
  padding: 0.75rem 2rem;
  border-radius: var(--radius-md);
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s;
}

.submit-btn:hover {
  background: var(--color-primary-dark);
  transform: translateY(-2px);
}

.result {
  width: 2.5rem;
  height: 2.5rem;
  display: grid;
  place-items: center;
  font-size: 1.25rem;
  border-radius: var(--radius-full);
}

@keyframes flashSuccess {
  0% { background-color: transparent; }
  30% { background-color: var(--color-success-bg); }
  100% { background-color: transparent; }
}

@keyframes flashError {
  0% { background-color: transparent; }
  30% { background-color: var(--color-error-bg); }
  100% { background-color: transparent; }
}

@media (max-width: 640px) {
  .math-form {
    flex-wrap: wrap;
    gap: 1rem;
  }
  
  .submit-btn {
    width: 100%;
    margin-top: 1rem;
  }
}
</style>

