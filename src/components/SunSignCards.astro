---
export interface SunSignEntry {
  id: string;
  name: string;
  symbol: string;
  dates: string;
  emoji?: string;
  firstLetters?: string; // Original, kept for data integrity if needed elsewhere
  parsedHindiLetters?: string; // New property for processed Hindi letters
  parsedEnglishLetters?: string; // New property for processed English letters
}

interface Props {
  item: SunSignEntry;
}

const { item } = Astro.props;
const category = "sunsigns";
---

<div class="flip__card sun-sign-card">
  <div class="flip__card__inner">
    <div class="card card__front">
      <div class="flip__button">
        <span class="flip__button__text" title="Flip Card">Flip Card</span>
      </div>
      <div class="letter__header">
        {}
        <p class="character sun-sign-symbol">{item.symbol}</p>
      </div>
      <div class="letter__content">
        {}
        <h2 class="text sun-sign-name">{item.name}</h2>
      </div>
      <div class="card__glow"></div>
    </div>
    <div class="card card__back">
      <div class="flip__button">
        <span class="flip__button__text" title="Flip Card">Flip Card</span>
      </div>
      <div class="sun-sign-details-back">
        {/* <h3 class="flipped__text">{item.name}</h3> */}
        {
          /* {item.image && <img src={`/assets/images/${category}/${item.image}`} alt={item.name} class="image" />}
        {item.emoji && !item.image && <p class="emoji">{item.emoji}</p>} */
        }
        <p class="description"><strong>Date Range:</strong> {item.dates}</p>

        {/* Remove old display of combined firstLetters */}
        {
          /* {item.firstLetters && (
          <p class="description"><strong>First Letters:</strong> {item.firstLetters}</p>
        )} */
        }

        {/* New display for separated Hindi and English first letters */}
        {
          (item.parsedHindiLetters && item.parsedHindiLetters.length > 0) ||
          (item.parsedEnglishLetters && item.parsedEnglishLetters.length > 0) ? (
            <>
              <p class="description">
                <strong>First Letters:</strong>
              </p>
              {item.parsedHindiLetters && item.parsedHindiLetters.length > 0 && (
                <p class="description">{item.parsedHindiLetters}</p>
              )}
              {item.parsedEnglishLetters && item.parsedEnglishLetters.length > 0 && (
                <p class="description">{item.parsedEnglishLetters}</p>
              )}
            </>
          ) : null
        }
      </div>
    </div>
  </div>
</div>

<style>
  :root[data-theme="light"] {
    --character-gradient-start: var(--primary, #6a5acd);
    --character-gradient-end: var(--primary-light, #9370db);
    --character-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
    --card-bg-gradient-start: var(--background, #fff);
    --card-bg-gradient-end: color-mix(in srgb, var(--background, #fff) 97%, var(--text, #333) 3%);
  }

  :root[data-theme="dark"] {
    --character-gradient-start: hsl(260, 100%, 75%);
    --character-gradient-end: hsl(260, 100%, 85%);
    --character-shadow: 0 0 20px hsla(260, 100%, 75%, 0.2);
    --card-bg-gradient-start: var(--background, #1a1a2e);
    --card-bg-gradient-end: color-mix(in srgb, var(--background, #1a1a2e) 97%, var(--text, #e0e0e0) 3%);
  }

  @media (prefers-color-scheme: dark) {
    :root:not([data-theme="light"]) {
      --character-gradient-start: hsl(260, 100%, 75%);
      --character-gradient-end: hsl(260, 100%, 85%);
      --character-shadow: 0 0 20px hsla(260, 100%, 75%, 0.2);
      --card-bg-gradient-start: var(--background, #1a1a2e);
      --card-bg-gradient-end: color-mix(in srgb, var(--background, #1a1a2e) 97%, var(--text, #e0e0e0) 3%);
    }
  }

  @media (prefers-color-scheme: light) {
    :root:not([data-theme="dark"]) {
      --character-gradient-start: var(--primary, #6a5acd);
      --character-gradient-end: var(--primary-light, #9370db);
      --character-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
      --card-bg-gradient-start: var(--background, #fff);
      --card-bg-gradient-end: color-mix(in srgb, var(--background, #fff) 97%, var(--text, #333) 3%);
    }
  }

  .flip__card {
    width: 100%;
    height: 100%;
    perspective: 1000px;
    min-height: 280px;
  }

  .sun-sign-card .image {
    object-fit: contain;
    width: 60px;
    height: 60px;
    margin: 0.5rem auto;
    display: block;
  }

  .sun-sign-card .character,
  .sun-sign-card .flipped__text {
    font-weight: 700;
    margin: 0;
    line-height: 1; /* Important for consistent text height */
    background: linear-gradient(135deg, var(--character-gradient-start) 0%, var(--character-gradient-end) 100%);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    text-shadow: var(--character-shadow);
    text-align: center;
  }
  .sun-sign-card .character {
    font-size: clamp(3rem, 6vw, 4.5rem);
  }
  .sun-sign-card .letter__header {
    min-height: 80px;
    flex-grow: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
  }

  .sun-sign-card .flipped__text {
    font-size: clamp(1.8rem, 4vw, 2.5rem);
    margin-bottom: 0.75rem;
  }

  .sun-sign-card .emoji {
    display: block;
    text-align: center;
    font-size: clamp(2.5rem, 5vw, 3.5rem);
    margin: 0.5rem 0;
    line-height: 1;
  }

  .sun-sign-card .card {
    background: linear-gradient(145deg, var(--card-bg-gradient-start), var(--card-bg-gradient-end));
    border-radius: 1.25rem;
    padding: 4.5rem;
    box-shadow:
      0 4px 15px rgba(0, 0, 0, 0.05),
      0 1px 2px rgba(0, 0, 0, 0.1);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    position: relative;
    overflow: hidden;
    border: 1px solid var(--border, #e0e0e0);
    width: 100%;
    height: 100%;
  }

  .sun-sign-card .card:hover .card__glow {
    opacity: 1;
  }

  .sun-sign-card .card:hover .text {
    background: linear-gradient(135deg, var(--primary, #6a5acd), var(--primary-light, #9370db));
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
  }

  .sun-sign-card .flip__card__inner {
    width: 100%;
    height: 100%;
    text-align: center;
    transition: transform 0.8s;
    transform-style: preserve-3d;
  }

  .sun-sign-card .card__front,
  .sun-sign-card .card__back {
    position: absolute;
    width: 100%;
    height: 100%;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    top: 0;
    left: 0;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }
  .sun-sign-card .card__front .letter__content {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .sun-sign-card .card__back {
    transform: rotateY(180deg);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 1rem;
    overflow-y: auto;
  }

  .sun-sign-details-back {
    padding: 0.5rem;
    text-align: center;
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    justify-content: center;
    align-items: center;
  }

  .sun-sign-details-back .description {
    font-size: 0.9rem;
    line-height: 1.6;
    color: var(--secondary, #555);
    margin-bottom: 0;
    max-width: 90%;
  }
  .sun-sign-details-back .description strong {
    color: var(--text, #333);
  }

  .sun-sign-details-back .detail-desc {
    font-size: 0.9rem;
    margin-top: 0.5rem;
  }

  .sun-sign-card.flipped .flip__card__inner {
    transform: rotateY(180deg);
  }

  .sun-sign-card .flip__button {
    position: absolute;
    top: 0.8rem;
    right: 0.8rem;
    z-index: 10;
  }

  .sun-sign-card .flip__button__text {
    font-size: 0.8rem;
    color: var(--secondary, #555);
    padding: 0.3rem 0.6rem;
    background: color-mix(in srgb, var(--background, #fff) 95%, var(--text, #333) 5%);
    border-radius: 2rem;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 1px solid var(--border, #e0e0e0);
  }

  .sun-sign-card .flip__button__text:hover {
    background: var(--primary, #6a5acd);
    color: var(--text-on-primary, white);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .sun-sign-card .letter__content {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    z-index: 1;
    text-align: center;
    width: 100%;
  }

  .sun-sign-card .text {
    font-size: clamp(1.4rem, 3vw, 2rem);
    font-weight: 700;
    color: var(--text, #333);
    margin: 0;
    transition: color 0.3s ease;
  }

  .sun-sign-card .description {
    font-size: 0.9rem;
    color: var(--secondary, #555);
    margin: 0;
    line-height: 1.4;
    opacity: 0.9;
  }
  .sun-sign-card .sun-sign-dates {
    font-size: 0.95rem;
  }
  .sun-sign-card .sun-sign-keywords {
    font-size: 0.8rem;
    font-style: italic;
  }

  .sun-sign-card .card__glow {
    position: absolute;
    inset: 0;
    background: radial-gradient(
      circle at var(--mouse-x, 50%) var(--mouse-y, 50%),
      color-mix(in srgb, var(--primary, #6a5acd) 10%, transparent) 0%,
      transparent 60%
    );
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }

  @media (max-width: 768px) {
    .sun-sign-card .character {
      font-size: clamp(2.5rem, 5vw, 3.5rem);
    }
    .sun-sign-card .text {
      font-size: clamp(1.2rem, 2.5vw, 1.8rem);
    }
    .sun-sign-card .description {
      font-size: 0.85rem;
    }
    .sun-sign-card .flipped__text {
      font-size: clamp(1.5rem, 3.5vw, 2.2rem);
    }
  }
</style>

<script>
  // existing script for flip all
  const flipAllButton = document.getElementById("flip-all-sunsigns-button");
  let allCardsFlipped = false;

  if (flipAllButton) {
    flipAllButton.addEventListener("click", () => {
      allCardsFlipped = !allCardsFlipped;

      const cardsToFlip = document.querySelectorAll(".sun-signs-grid .flip__card.sun-sign-card");

      cardsToFlip.forEach((card) => {
        if (allCardsFlipped) {
          card.classList.add("flipped");
        } else {
          card.classList.remove("flipped");
        }
      });

      flipAllButton.textContent = allCardsFlipped ? "Reset All Cards" : "Flip All Cards";

      flipAllButton.classList.add("active");
      setTimeout(() => {
        flipAllButton.classList.remove("active");
      }, 300);
    });
  }

  // existing script for mousemove and individual card flip
  const cards = document.querySelectorAll(".card");
  cards.forEach((letter) => {
    letter.addEventListener("mousemove", (e: Event) => {
      const htmlLetter = letter as HTMLElement;
      const rect = htmlLetter.getBoundingClientRect();
      const event = e as MouseEvent;
      const x = ((event.clientX - rect.left) / htmlLetter.clientWidth) * 100;
      const y = ((event.clientY - rect.top) / htmlLetter.clientHeight) * 100;
      htmlLetter.style.setProperty("--mouse-x", `${x}%`);
      htmlLetter.style.setProperty("--mouse-y", `${y}%`);
    });
  });

  const flipCards = document.querySelectorAll(".flip__card");
  flipCards.forEach((card) => {
    const flipButtons = card.querySelectorAll(".flip__button") as NodeListOf<HTMLElement>;

    flipButtons.forEach((button) => {
      button.addEventListener("click", () => {
        card.classList.toggle("flipped");
      });
    });
  });
</script>
