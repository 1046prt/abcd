---
interface LetterPath {
  d: string;
  animationDelay: string;
}
interface LetterData {
  paths: LetterPath[];
  instructions: string[];
}
interface LetterMap {
  [letter: string]: LetterData;
}

const letterMap: LetterMap = {
  A: {
    paths: [
      { d: "M50,170 L100,30", animationDelay: "0s" },
      { d: "M100,30 L150,170", animationDelay: "1s" },
      { d: "M70,120 L130,120", animationDelay: "2s" }
    ],
    instructions: [
      "Draw a slant line up from bottom left to the top.",
      "Draw a slant line down from top to bottom right.",
      "Draw a line across the middle."
    ]
  },
  B: {
    paths: [
      { d: "M60,30 L60,170", animationDelay: "0s" },
      { d: "M60,30 Q130,55 60,100", animationDelay: "1s" },
      { d: "M60,100 Q130,140 60,170", animationDelay: "2s" }
    ],
    instructions: ["Draw a straight line down.", "Curve from top to middle.", "Curve from middle to bottom."]
  },
  C: {
    paths: [{ d: "M140,50 Q70,30 70,100 Q70,170 140,150", animationDelay: "0s" }],
    instructions: ["Start at the top right, curve left and down, ending at bottom right."]
  },
  D: {
    paths: [
      { d: "M60,30 L60,170", animationDelay: "0s" },
      { d: "M60,30 Q150,100 60,170", animationDelay: "1s" }
    ],
    instructions: ["Draw a straight line down.", "Curve from top to bottom."]
  },
  E: {
    paths: [
      { d: "M130,30 L60,30 L60,170 L130,170", animationDelay: "0s" },
      { d: "M60,100 L120,100", animationDelay: "1.5s" }
    ],
    instructions: ["Draw top, left, and bottom lines.", "Draw the middle line."]
  },
  F: {
    paths: [
      { d: "M130,30 L60,30 L60,170", animationDelay: "0s" },
      { d: "M60,100 L120,100", animationDelay: "1.5s" }
    ],
    instructions: ["Draw top and left lines.", "Draw the middle line."]
  },
  G: {
    paths: [{ d: "M140,50 Q70,30 70,100 Q70,170 140,150 Q130,120 110,120", animationDelay: "0s" }],
    instructions: ["Curve from top right to bottom right, then a short line inward."]
  },
  H: {
    paths: [
      { d: "M60,30 L60,170", animationDelay: "0s" },
      { d: "M140,30 L140,170", animationDelay: "1s" },
      { d: "M60,100 L140,100", animationDelay: "2s" }
    ],
    instructions: ["Draw the left line.", "Draw the right line.", "Draw the middle line."]
  },
  I: {
    paths: [
      { d: "M100,30 L100,170", animationDelay: "0s" },
      { d: "M80,30 L120,30", animationDelay: "1s" },
      { d: "M80,170 L120,170", animationDelay: "2s" }
    ],
    instructions: ["Draw the vertical line.", "Draw the top line.", "Draw the bottom line."]
  },
  J: {
    paths: [{ d: "M140,30 L140,140 Q140,170 100,170 Q60,170 60,140", animationDelay: "0s" }],
    instructions: ["Draw the top line and curve down to the left."]
  },
  K: {
    paths: [
      { d: "M60,30 L60,170", animationDelay: "0s" },
      { d: "M60,100 L140,30", animationDelay: "1s" },
      { d: "M60,100 L140,170", animationDelay: "2s" }
    ],
    instructions: ["Draw the vertical line.", "Draw the upper diagonal.", "Draw the lower diagonal."]
  },
  L: {
    paths: [{ d: "M60,30 L60,170 L130,170", animationDelay: "0s" }],
    instructions: ["Draw the vertical and bottom lines."]
  },
  M: {
    paths: [{ d: "M60,170 L60,30 L100,100 L140,30 L140,170", animationDelay: "0s" }],
    instructions: ["Draw up, down to middle, up, and down again."]
  },
  N: {
    paths: [{ d: "M60,170 L60,30 L140,170 L140,30", animationDelay: "0s" }],
    instructions: ["Draw up, diagonal down, and up again."]
  },
  O: {
    paths: [{ d: "M100,30 Q60,30 60,100 Q60,170 100,170 Q140,170 140,100 Q140,30 100,30", animationDelay: "0s" }],
    instructions: ["Draw a big oval."]
  },
  P: {
    paths: [
      { d: "M60,170 L60,30", animationDelay: "0s" },
      { d: "M60,30 Q130,55 60,100", animationDelay: "1s" }
    ],
    instructions: ["Draw a straight line up.", "Curve from top to middle."]
  },
  Q: {
    paths: [
      { d: "M100,30 Q60,30 60,100 Q60,170 100,170 Q140,170 140,100 Q140,30 100,30", animationDelay: "0s" },
      { d: "M120,140 L150,170", animationDelay: "1.5s" }
    ],
    instructions: ["Draw a big oval.", "Draw a small diagonal line at the bottom right."]
  },
  R: {
    paths: [
      { d: "M60,170 L60,30", animationDelay: "0s" },
      { d: "M60,30 Q130,55 60,100", animationDelay: "1s" },
      { d: "M60,100 L140,170", animationDelay: "2s" }
    ],
    instructions: ["Draw a straight line up.", "Curve from top to middle.", "Draw a diagonal down."]
  },
  S: {
    paths: [{ d: "M140,50 Q70,30 70,100 Q70,170 140,150", animationDelay: "0s" }],
    instructions: ["Curve from top right to bottom left."]
  },
  T: {
    paths: [
      { d: "M60,30 L140,30", animationDelay: "0s" },
      { d: "M100,30 L100,170", animationDelay: "1s" }
    ],
    instructions: ["Draw the top line.", "Draw the vertical line."]
  },
  U: {
    paths: [{ d: "M60,30 L60,140 Q60,170 100,170 Q140,170 140,140 L140,30", animationDelay: "0s" }],
    instructions: ["Draw down, curve at the bottom, and up."]
  },
  V: {
    paths: [{ d: "M60,30 L100,170 L140,30", animationDelay: "0s" }],
    instructions: ["Draw down to the bottom and up again."]
  },
  W: {
    paths: [{ d: "M60,30 L80,170 L100,100 L120,170 L140,30", animationDelay: "0s" }],
    instructions: ["Draw down, up, down, and up again."]
  },
  X: {
    paths: [
      { d: "M60,30 L140,170", animationDelay: "0s" },
      { d: "M140,30 L60,170", animationDelay: "1s" }
    ],
    instructions: ["Draw one diagonal.", "Draw the other diagonal."]
  },
  Y: {
    paths: [
      { d: "M60,30 L100,100 L140,30", animationDelay: "0s" },
      { d: "M100,100 L100,170", animationDelay: "1s" }
    ],
    instructions: ["Draw the upper branches.", "Draw the vertical line."]
  },
  Z: {
    paths: [{ d: "M60,30 L140,30 L60,170 L140,170", animationDelay: "0s" }],
    instructions: ["Draw the top, diagonal, and bottom lines."]
  }
};

const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
const { letter: propLetter = "A" } = Astro.props;
let currentLetter = propLetter.toUpperCase();
if (!letterMap[currentLetter]) currentLetter = "A";
const letterData = letterMap[currentLetter];
---

<div class="letter-container">
  <div class="letter-display">
    <svg class="letter-svg" viewBox="0 0 200 200">
      {
        letterData.paths.map((path) => (
          <path class="letter-path animate-letter" d={path.d} style={`animation-delay: ${path.animationDelay}`} />
        ))
      }
    </svg>
  </div>

  <div class="controls">
    <button id="prev-btn" aria-label="Previous Letter">Previous</button>
    <button id="restart-btn" aria-label="Restart Animation">Restart Animation</button>
    <button id="next-btn" aria-label="Next Letter">Next</button>
  </div>

  <div class="alphabet-nav" id="alphabet-nav">
    {
      alphabet.map((l) => (
        <button
          class={`letter-btn${l === currentLetter ? "current-letter" : ""}`}
          data-letter={l}
          aria-label={`Show letter ${l}`}
        >
          {l}
        </button>
      ))
    }
  </div>

  <div class="instructions">
    <h2>How to Write the Letter '{currentLetter}'</h2>
    <ol>
      {letterData.instructions.map((ins) => <li>{ins}</li>)}
    </ol>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    let current = "{currentLetter}";
    const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
    const letterNav = document.getElementById("alphabet-nav") as HTMLElement | null;
    const prevBtn = document.getElementById("prev-btn") as HTMLButtonElement | null;
    const nextBtn = document.getElementById("next-btn") as HTMLButtonElement | null;
    const restartBtn = document.getElementById("restart-btn") as HTMLButtonElement | null;

    function setURL(letter: string) {
      const params = new URLSearchParams(window.location.search);
      params.set("letter", letter);
      window.history.replaceState({}, "", `${window.location.pathname}?${params}`);
    }

    function reload(letter: string) {
      setURL(letter);
      window.location.reload();
    }

    prevBtn?.addEventListener("click", () => {
      let idx = alphabet.indexOf(current);
      if (idx > 0) reload(alphabet[idx - 1]);
      else reload(alphabet[alphabet.length - 1]);
    });
    nextBtn?.addEventListener("click", () => {
      let idx = alphabet.indexOf(current);
      if (idx < alphabet.length - 1) reload(alphabet[idx + 1]);
      else reload(alphabet[0]);
    });

    letterNav?.querySelectorAll(".letter-btn").forEach((btn) => {
      const htmlBtn = btn as HTMLButtonElement;
      htmlBtn.addEventListener("click", () => reload(htmlBtn.dataset.letter as string));
    });

    restartBtn?.addEventListener("click", function () {
      document.querySelectorAll(".letter-path").forEach((path) => {
        const htmlPath = path as HTMLElement;
        htmlPath.classList.remove("animate-letter");
        void htmlPath.offsetWidth;
        htmlPath.classList.add("animate-letter");
      });
    });
  });
</script>

<style>
  .letter-container {
    background-color: white;
    border-radius: 20px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
    padding: 30px;
    width: 95%;
    max-width: 700px;
    margin-bottom: 30px;
    text-align: center;
  }
  .letter-display {
    height: 340px;
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 20px 0;
  }
  .letter-svg {
    width: 250px;
    height: 250px;
  }
  .letter-path {
    fill: none;
    stroke: #ff6b6b;
    stroke-width: 8;
    stroke-linecap: round;
    stroke-linejoin: round;
    stroke-dasharray: 1000;
    stroke-dashoffset: 1000;
  }
  .animate-letter {
    animation: draw 1.5s linear forwards;
  }
  @keyframes draw {
    to {
      stroke-dashoffset: 0;
    }
  }
  .controls {
    display: flex;
    justify-content: center;
    gap: 15px;
    margin-top: 18px;
    flex-wrap: wrap;
  }
  button {
    background: #ff6b6b;
    color: white;
    border: none;
    padding: 12px 22px;
    font-size: 1.05rem;
    border-radius: 50px;
    cursor: pointer;
    font-family: inherit;
    font-weight: bold;
    transition: all 0.3s ease;
    box-shadow: 0 4px 10px rgba(255, 107, 107, 0.16);
  }
  button:hover {
    background: #ff5252;
    transform: translateY(-2px);
    box-shadow: 0 6px 15px rgba(255, 107, 107, 0.28);
  }
  button:active {
    transform: translateY(1px);
  }
  .alphabet-nav {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 6px;
    margin-top: 15px;
    margin-bottom: 8px;
    max-width: 900px;
  }
  .letter-btn {
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    background: #06d6a0;
    color: white;
    font-size: 1.3rem;
    font-weight: bold;
    border-radius: 10px;
    cursor: pointer;
    transition: all 0.2s ease;
    border: none;
  }
  .letter-btn.current-letter {
    background: #ffd166;
    color: #333;
    transform: scale(1.11);
    font-weight: 900;
    box-shadow: 0 0 0 2px #ffd16655;
  }
  .letter-btn:hover {
    background: #05b888;
    transform: scale(1.08);
  }
  .instructions {
    background: white;
    border-radius: 20px;
    padding: 20px;
    width: 95%;
    max-width: 700px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
    margin: 0 auto 8px;
  }
  .instructions h2 {
    color: #118ab2;
    margin-bottom: 13px;
    text-align: center;
    font-size: 1.3rem;
  }
  .instructions ol {
    padding-left: 25px;
    font-size: 1.04rem;
    line-height: 1.5;
    text-align: left;
  }
  .instructions li {
    margin-bottom: 7px;
  }
  @media (max-width: 600px) {
    .letter-svg {
      width: 180px;
      height: 180px;
    }
    .letter-display {
      height: 220px;
    }
    .letter-btn {
      width: 28px;
      height: 28px;
      font-size: 1rem;
    }
    .letter-container,
    .instructions {
      padding: 10px;
    }
  }
</style>
