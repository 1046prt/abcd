---
import "@/assets/styles/kannada.css";

const title = "Kannada and Hindi Alphabets";
const description = "Interactive grid showing Kannada and Hindi alphabets with their corresponding letters";

// Letter generation helpers
const generateLetters = (startCode: number, length: number, extraCodes: number[] = []): string[] =>
  Array.from({ length }, (_, i) => String.fromCodePoint(startCode + i))
    .filter((_, i) => !extraCodes.includes(startCode + i));

// Letter sets
const hindiVowels = generateLetters(2309, 16, [2317, 2321]);
const hindiConsonants = generateLetters(2325, 37);
const kannadaVowels = generateLetters(3205, 16, [3213, 3217]);
const kannadaConsonants = generateLetters(3221, 37);
const englishVowels = ['A', 'E', 'I', 'O', 'U'];
const englishConsonants = Array.from('BCDFGHJKLMNPQRSTVWXYZ');

const languages = [
  { code: "hi", name: "हिंदी" },
  { code: "kn", name: "ಕನ್ನಡ" },
  { code: "en", name: "English" }
];

let selectedLanguage1 = "hi";
let selectedLanguage2 = "kn";
---

  <div class="language-letters-container">
    <!-- Dropdown Section -->
    <div class="toggle-container">
      <div class="dropdown-wrapper">
        <label class="dropdown-label">Language 1</label>
        <select id="languageDropdown1">
          {languages.map((lang) => (
            <option value={lang.code} selected={lang.code === selectedLanguage1}>
              {lang.name} ({lang.code.toUpperCase()})
            </option>
          ))}
        </select>
      </div>

      <div class="dropdown-wrapper">
        <label class="dropdown-label">Language 2</label>
        <select id="languageDropdown2">
          {languages.map((lang) => (
            <option value={lang.code} selected={lang.code === selectedLanguage2}>
              {lang.name} ({lang.code.toUpperCase()})
            </option>
          ))}
        </select>
      </div>
    </div>

    <!-- Letters Grid Section -->
    <div class="language-letters-grid">
      <h2 class="group-heading">VOWELS (स्वर)</h2>
      <div id="vowelsContainer" class="letters-container"></div>

      <div class="language-letters-separator"></div>

      <h2 class="group-heading">CONSONANTS (व्यंजन)</h2>
      <div id="consonantsContainer" class="letters-container"></div>
    </div>
  </div>


<script>
  // Letter generation helpers
  const generateLetters = (startCode, length, extraCodes = []) =>
    Array.from({ length }, (_, i) => String.fromCodePoint(startCode + i))
      .filter((_, i) => !extraCodes.includes(startCode + i));

  // Letter sets
  const hindiVowels = generateLetters(2309, 16, [2317, 2321]);
  const hindiConsonants = generateLetters(2325, 37);
  const kannadaVowels = generateLetters(3205, 16, [3213, 3217]);
  const kannadaConsonants = generateLetters(3221, 37);
  const englishVowels = ['A', 'E', 'I', 'O', 'U'];
  const englishConsonants = Array.from('BCDFGHJKLMNPQRSTVWXYZ');

  const languages = [
    { code: "hi", name: "हिंदी" },
    { code: "kn", name: "ಕನ್ನಡ" },
    { code: "en", name: "English" }
  ];

  let selectedLanguage1 = "hi";
  let selectedLanguage2 = "kn";

  function getLetter(lang, type, index) {
    if (lang === 'en') {
      return type === 'vowel' ? englishVowels[index] || '' : englishConsonants[index] || '';
    }
    if (lang === 'hi') {
      return type === 'vowel' ? hindiVowels[index] || '' : hindiConsonants[index] || '';
    }
    if (lang === 'kn') {
      return type === 'vowel' ? kannadaVowels[index] || '' : kannadaConsonants[index] || '';
    }
    return '';
  }

  function updateGrid() {
    // Update toggle button labels
    const hindiLabel = document.getElementById("hindiLabel");
    const kannadaLabel = document.getElementById("kannadaLabel");
    if (hindiLabel && kannadaLabel) {
      hindiLabel.textContent = languages.find(l => l.code === selectedLanguage1)?.name || "";
      kannadaLabel.textContent = languages.find(l => l.code === selectedLanguage2)?.name || "";
    }

    // Update vowels
    const vowelsContainer = document.getElementById("vowelsContainer");
    if (vowelsContainer) {
      vowelsContainer.innerHTML = "";
      const vowelCount = Math.max(
        selectedLanguage1 === 'en' ? englishVowels.length :
        selectedLanguage1 === 'hi' ? hindiVowels.length : kannadaVowels.length,
        selectedLanguage2 === 'en' ? englishVowels.length :
        selectedLanguage2 === 'hi' ? hindiVowels.length : kannadaVowels.length
      );

      for (let i = 0; i < vowelCount; i++) {
        const card = document.createElement("div");
        card.className = "language-letter-card language-letter-card-vowel";
        
        const firstDiv = document.createElement("div");
        firstDiv.className = "language-letter-first";
        firstDiv.textContent = getLetter(selectedLanguage1, 'vowel', i);

        const secondDiv = document.createElement("div");
        secondDiv.className = "language-letter-second";
        secondDiv.textContent = getLetter(selectedLanguage2, 'vowel', i);

        card.append(firstDiv, secondDiv);
        vowelsContainer.appendChild(card);
      }
    }

    // Update consonants
    const consonantsContainer = document.getElementById("consonantsContainer");
    if (consonantsContainer) {
      consonantsContainer.innerHTML = "";
      const consonantCount = Math.max(
        selectedLanguage1 === 'en' ? englishConsonants.length :
        selectedLanguage1 === 'hi' ? hindiConsonants.length : kannadaConsonants.length,
        selectedLanguage2 === 'en' ? englishConsonants.length :
        selectedLanguage2 === 'hi' ? hindiConsonants.length : kannadaConsonants.length
      );

      for (let i = 0; i < consonantCount; i++) {
        const card = document.createElement("div");
        card.className = "language-letter-card language-letter-card-consonant";
        
        const firstDiv = document.createElement("div");
        firstDiv.className = "language-letter-first";
        firstDiv.textContent = getLetter(selectedLanguage1, 'consonant', i);

        const secondDiv = document.createElement("div");
        secondDiv.className = "language-letter-second";
        secondDiv.textContent = getLetter(selectedLanguage2, 'consonant', i);

        card.append(firstDiv, secondDiv);
        consonantsContainer.appendChild(card);
      }
    }
  }

  // Set up event listeners
  document.addEventListener("DOMContentLoaded", () => {
    const dropdown1 = document.getElementById("languageDropdown1");
    const dropdown2 = document.getElementById("languageDropdown2");
    const toggleButton = document.getElementById("toggleButton");

    if (dropdown1) {
      dropdown1.addEventListener("change", (e) => {
        selectedLanguage1 = e.target.value;
        updateGrid();
      });
    }

    if (dropdown2) {
      dropdown2.addEventListener("change", (e) => {
        selectedLanguage2 = e.target.value;
        updateGrid();
      });
    }

    if (toggleButton) {
      toggleButton.addEventListener("click", () => {
        toggleButton.classList.toggle("toggled");
        document.querySelectorAll(".language-letter-card").forEach(card => {
          card.classList.toggle("reverse");
        });
        
        const hindiLabel = document.getElementById("hindiLabel");
        const kannadaLabel = document.getElementById("kannadaLabel");
        if (hindiLabel && kannadaLabel) {
          hindiLabel.classList.toggle("active");
          kannadaLabel.classList.toggle("active");
        }
      });
    }

    // Initial render
    updateGrid();
  });
</script>
<style>
  /* Dropdown Container */
  .toggle-container {
    display: flex;
    justify-content: center;
    gap: 2rem;
    /*margin-bottom: 1rem;*/
    position: relative;
    z-index: 2;
    flex-wrap: wrap;
  }

  /* Dropdown Wrapper */
  .dropdown-wrapper {
    position: relative;
    min-width: 240px;
    margin: 0.5rem;
  }

  /* Dropdown Label */
  .dropdown-label {
    display: block;
    margin-bottom: 0.8rem;
    font-size: 1.1rem;
    color: #2dd4bf;
    /*color:#1d4ed8;*/
    text-transform: uppercase;
    letter-spacing: 1px;
    font-weight: 600;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  /* Dropdown Select */
  .toggle-container select {
    width: 100%;
    padding: 1rem 2.5rem 1rem 1.5rem;
    font-size: 1.1rem;
    border: 2px solid rgba(125, 211, 252, 0.3);
    border-radius: 12px;
    background: linear-gradient(145deg, #1d4ed8, #123085);
    color: white;
    cursor: pointer;
    appearance: none;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow:
      0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  /* Custom Dropdown Arrow */
  .toggle-container select {
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3e%3cpath d='M7 10l5 5 5-5z'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 1rem center;
    background-size: 1.5em;
  }

  /* Hover Effects */
  .toggle-container select:hover {
    border-color: #7dd3fc;
    transform: translateY(-1px);
    box-shadow:
      0 10px 15px -3px rgba(0, 0, 0, 0.1),
      0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }

  /* Focus State */
  .toggle-container select:focus {
    outline: none;
    border-color: #2dd4bf;
    box-shadow: 0 0 0 3px rgba(45, 212, 191, 0.3);
  }

  /* Option Styling */
  .toggle-container select option {
    padding: 1rem;
    background: #1e293b;
    color: #f8fafc;
    border-bottom: 1px solid rgba(125, 211, 252, 0.1);
  }

  .toggle-container select option:checked {
    background: rgba(29, 78, 216, 0.5);
    font-weight: 600;
  }

  /* Responsive Design */
  @media (max-width: 640px) {
    .toggle-container {
      flex-direction: column;
      gap: 1rem;
    }

    .dropdown-wrapper {
      width: 100%;
      min-width: auto;
    }

    .toggle-container select {
      font-size: 1rem;
      padding: 0.8rem 2rem 0.8rem 1rem;
    }
  }
</style>

<!--<style>
  .language-letters-container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .toggle-container {
    display: flex;
    justify-content: center;
    gap: 2rem;
    position: relative;
    z-index: 2;
    flex-wrap: wrap;
  }

  .dropdown-wrapper {
    position: relative;
    min-width: 240px;
    margin: 0.5rem;
  }

  .dropdown-label {
    display: block;
    margin-bottom: 0.8rem;
    font-size: 1.1rem;
    color: #2dd4bf;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-weight: 600;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .toggle-container select {
    width: 100%;
    padding: 1rem 2.5rem 1rem 1.5rem;
    font-size: 1.1rem;
    border: 2px solid rgba(125, 211, 252, 0.3);
    border-radius: 12px;
    background: linear-gradient(145deg, #1d4ed8, #123085);
    color: white;
    cursor: pointer;
    appearance: none;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow:
      0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  .toggle-container select {
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3e%3cpath d='M7 10l5 5 5-5z'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 1rem center;
    background-size: 1.5em;
  }

  .toggle-container select:hover {
    border-color: #7dd3fc;
    transform: translateY(-1px);
    box-shadow:
      0 10px 15px -3px rgba(0, 0, 0, 0.1),
      0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }

  .toggle-container select:focus {
    outline: none;
    border-color: #2dd4bf;
    box-shadow: 0 0 0 3px rgba(45, 212, 191, 0.3);
  }

  .toggle-container select option {
    padding: 1rem;
    background: #1e293b;
    color: #f8fafc;
    border-bottom: 1px solid rgba(125, 211, 252, 0.1);
  }

  .toggle-container select option:checked {
    background: rgba(29, 78, 216, 0.5);
    font-weight: 600;
  }

  .letters-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    gap: 1rem;
    margin: 1rem 0;
  }

  .language-letter-card {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 1rem;
    border-radius: 0.5rem;
    background: #1e293b;
    transition: all 0.3s ease;
  }

  .language-letter-card.reverse {
    flex-direction: column-reverse;
  }

  .language-letter-card-vowel {
    border: 2px solid rgba(45, 212, 191, 0.3);
  }

  .language-letter-card-consonant {
    border: 2px solid rgba(125, 211, 252, 0.3);
  }

  .language-letter-first,
  .language-letter-second {
    font-size: 1.5rem;
    padding: 0.5rem;
    transition: all 0.3s ease;
  }

  .group-heading {
    grid-column: 1 / -1;
    color: #2dd4bf;
    font-size: 1.2rem;
    margin: 1.5rem 0 1rem;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .language-letters-separator {
    grid-column: 1 / -1;
    height: 2px;
    background: rgba(45, 212, 191, 0.2);
    margin: 2rem 0;
  }

  @media (max-width: 640px) {
    .toggle-container {
      flex-direction: column;
      gap: 1rem;
    }

    .dropdown-wrapper {
      width: 100%;
      min-width: auto;
    }

    .toggle-container select {
      font-size: 1rem;
      padding: 0.8rem 2rem 0.8rem 1rem;
    }
  }

  /* Toggle Button Styles */
  .toggle-button {
      position: relative;
      display: flex;
      align-items: center;
      padding: 0.5rem;
      background: #1e293b;
      border: 2px solid rgba(45, 212, 191, 0.3);
      border-radius: 12px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .toggle-button:hover {
      border-color: #2dd4bf;
      transform: translateY(-1px);
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }

    .toggle-slider {
      position: absolute;
      top: 0;
      left: 0;
      width: 50%;
      height: 100%;
      background: rgba(29, 78, 216, 0.3);
      border-radius: 10px;
      transition: transform 0.3s ease;
    }

    .toggle-button.toggled .toggle-slider {
      transform: translateX(100%);
    }

    .language-label {
      position: relative;
      z-index: 1;
      padding: 0.5rem 1rem;
      font-size: 1.1rem;
      color: rgba(255, 255, 255, 0.6);
      transition: all 0.3s ease;
    }

    .language-label.active {
      color: #ffffff;
      font-weight: 600;
    }

    /* Animation for letter cards */
    .language-letter-card {
      transform: scale(1);
      opacity: 1;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .language-letter-card:hover {
      transform: scale(1.05);
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
      z-index: 1;
    }

    .language-letter-card.hidden {
      transform: scale(0.9);
      opacity: 0;
    }

    /* Keyboard interaction styles */
    .language-letter-card[data-active="true"] {
      background: rgba(45, 212, 191, 0.2);
      border-color: #2dd4bf;
      transform: scale(1.1);
    }

    /* Additional responsive styles */
    @media (max-width: 768px) {
      .language-letters-grid {
        grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
      }

      .language-letter-card {
        padding: 0.75rem;
      }

      .language-letter-first,
      .language-letter-second {
        font-size: 1.25rem;
      }

      .toggle-button {
        padding: 0.4rem;
      }

      .language-label {
        padding: 0.4rem 0.8rem;
        font-size: 1rem;
      }
    }

    @media (max-width: 480px) {
      .language-letters-container {
        padding: 1rem;
      }

      .language-letters-grid {
        grid-template-columns: repeat(auto-fill, minmax(70px, 1fr));
        gap: 0.75rem;
      }

      .group-heading {
        font-size: 1rem;
      }
    }
  </style>-->