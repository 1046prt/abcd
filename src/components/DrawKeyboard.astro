---
import { alphabetMapper } from "@/mappers/alphabet";
import { IMAGE_DIR, colorBox, fontBox, numberBox } from "@/utils/constants";
---

<head>
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Fira+Sans&family=Lobster&family=Merriweather&family=Open+Sans&family=Orbitron&family=Press+Start+2P&family=Ubuntu&display=swap">
</head>

<div class="container">
  <header class="header">
    <div class="action">
      <!--<a href="/" class="back-button" aria-label="Go back" title="Go back">← Back</a>-->
    </div>
    <h1 class="info" aria-live="polite">Press any key</h1>
  </header>

  <main class="main">
    <section class="board" id="board" aria-live="polite">
      <div class="char" id="char"></div>
      <div class="instruction" id="instruction">Press any key</div>
    </section>
  </main>
</div>

<!-- Popup Modal -->
<div class="popup-overlay" id="popupOverlay">
  <div class="popup">
    <div class="popup-icon">⚠️</div>
    <h3>Invalid Key Pressed!</h3>
    <p>You pressed: <span id="pressedKey" class="pressed-key"></span></p>
    <p>Please press a valid key:</p>
    <div class="valid-keys">
      <span class="key-group">Letters: A-Z, a-z</span>
      <span class="key-group">Numbers: 0-9</span>
    </div>
    <button class="popup-close" id="popupClose">Got it!</button>
  </div>
</div>

<script
  define:vars={{
    colorBox,
    fontBox,
    numberBox,
    alphabetMapper,
    IMAGE_DIR
  }}
  is:inline
>
  // Initialize state
  let currentFontIndex = 0;
  let isUpperCase = true;
  let hasKeyBeenPressed = false;

  // DOM elements
  const mainEl = document.querySelector("main");
  const boardDiv = document.getElementById("board");
  const charDiv = document.getElementById("char");
  const instructionDiv = document.getElementById("instruction");
  const toggleCaseSwitch = document.getElementById("toggleCase");
  const toggleFontSwitch = document.getElementById("toggleFont");
  const toggleBackgroundSwitch = document.getElementById("toggleBg");
  const info = document.querySelector(".info");
  const popupOverlay = document.getElementById("popupOverlay");
  const pressedKeySpan = document.getElementById("pressedKey");
  const popupClose = document.getElementById("popupClose");

  function getRandomValue(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
  }

  function showPopup(key) {
    pressedKeySpan.textContent = key === ' ' ? 'Spacebar' : key;
    popupOverlay.style.display = 'flex';
    
    setTimeout(() => {
      hidePopup();
    }, 3000);
  }

  function hidePopup() {
    popupOverlay.style.display = 'none';
  }

  function updateDisplay(key) {
    try {
      const audio = new Audio("data:audio/wav;base64,UklGRggAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhBAAAAAEA");
      audio.volume = 0.1;
      audio.play().catch(() => {});
    } catch (error) {
      console.log("Audio feedback unavailable");
    }

    hasKeyBeenPressed = true;

    if (!isNaN(Number(key))) {
      boardDiv.style.backgroundColor = getRandomValue(colorBox);
      boardDiv.style.backgroundImage = "";
      charDiv.textContent = key;
      instructionDiv.textContent = numberBox[key] || "Unknown";
      charDiv.style.fontFamily = `"${fontBox[currentFontIndex]}"`;
      return;
    }

    const found = alphabetMapper.find((alpha) => alpha.key.toUpperCase() === key.toUpperCase());
    if (found) {
      instructionDiv.textContent = found.value;
      if (!toggleBackgroundSwitch?.checked) {
        boardDiv.style.backgroundImage = `url(${IMAGE_DIR}/${found.value}.jpg)`;
        boardDiv.style.backgroundColor = "";
      }
    } else {
      boardDiv.style.backgroundImage = "";
    }

    charDiv.textContent = isUpperCase ? key.toUpperCase() : key.toLowerCase();
  }

  function handleKeyPress(e) {
    const key = e.key;
    
    if (key.length === 1 && /[a-zA-Z0-9]/.test(key)) {
      updateDisplay(key);
    } else if (key.length === 1 && !e.ctrlKey && !e.altKey && !e.metaKey) {
      showPopup(key);
    }
  }

  toggleCaseSwitch?.addEventListener("change", (e) => {
    isUpperCase = !e.target.checked;
    const currentText = charDiv.textContent;
    if (currentText) {
      charDiv.textContent = isUpperCase ? currentText.toUpperCase() : currentText.toLowerCase();
    }
  });

  toggleFontSwitch?.addEventListener("change", () => {
    currentFontIndex = (currentFontIndex + 1) % fontBox.length;
    const currentFont = fontBox[currentFontIndex];

    document.fonts.load(`1em "${currentFont}"`).then(() => {
      charDiv.style.fontFamily = `"${currentFont}"`;
    }).catch(() => {
      console.warn(`Font "${currentFont}" failed to load.`);
      charDiv.style.fontFamily = `"${currentFont}"`;
    });
  });

  toggleBackgroundSwitch?.addEventListener("change", (e) => {
    if (e.target.checked) {
      mainEl.style.backgroundBlendMode = "soft-light";
      mainEl.style.filter = "brightness(0.9)";
      boardDiv.style.backgroundImage = "none";
      boardDiv.style.backgroundColor =
        getRandomValue(colorBox) || getComputedStyle(document.documentElement).getPropertyValue("--solid-bg");
    } else {
      mainEl.style.backgroundBlendMode = "normal";
      mainEl.style.filter = "brightness(1)";
      boardDiv.style.backgroundColor = "";
    }
  });

  popupClose.addEventListener("click", hidePopup);
  
  popupOverlay.addEventListener("click", (e) => {
    if (e.target === popupOverlay) {
      hidePopup();
    }
  });

  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      hidePopup();
    }
  });

  document.addEventListener("keydown", handleKeyPress);

  console.log("Welcome to abcdkbd.com - Enhanced Interactive Learning");

  document.addEventListener('keyboardReset', (e) => {
    currentFontIndex = 0;
    isUpperCase = true;
    hasKeyBeenPressed = false;
    
    if (mainEl) {
        mainEl.style.backgroundBlendMode = 'normal';
        mainEl.style.filter = 'brightness(1)';
    }
    
    if (boardDiv) {
        boardDiv.style.backgroundColor = '';
        boardDiv.style.backgroundImage = '';
    }
    
    if (charDiv) {
        charDiv.style.fontFamily = '';
        charDiv.textContent = '';
    }
    
    if (instructionDiv) {
        instructionDiv.textContent = 'Press any key';
    }
    
    if (toggleCaseSwitch) toggleCaseSwitch.checked = false;
    if (toggleFontSwitch) toggleFontSwitch.checked = false;
    if (toggleBackgroundSwitch) toggleBackgroundSwitch.checked = false;
    
    hidePopup();
  });
</script>

<style>
  :root {
    --primary-bg: linear-gradient(135deg, #e0e7ff 0%, #a5b4fc 100%);
    --header-bg: #f9fafb;
    --accent-color: #4338ca;
    --control-bg: rgba(255, 255, 255, 0.95);
    --text-color: #ffffff;
    --solid-bg: #a5b4fc;
    --shadow: 0 6px 12px -2px rgba(0, 0, 0, 0.1), 0 3px 6px -3px rgba(0, 0, 0, 0.08);
    --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    --light-border: #e2e8f0;
  }

  * {
    box-sizing: border-box;
    margin: auto;
    padding: 0;
  }

  .container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    font-family: "Inter", system-ui, sans-serif;
    text-align: center;
    padding: 1rem;
  }

  .header {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 50%;
    padding: 1.5rem 2rem;
    gap: 1rem;
    position: sticky; 
    top: 0;
    z-index: 100; 
    background: rgb(224, 222, 222);
    border: 1px solid var(--light-border);
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    margin-bottom: 0.5rem;
    border-color: #4338ca;
    border-width: 4px;
  }

  .action {
    width: 100%;
  }

  .info {
    margin-top: -25px;
    color: rgb(29, 25, 25); 
    font-weight: 500;
    text-align: center;
    text-transform: uppercase;
    font-size: 2rem;
  }

  .main {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: calc(100vh - 120px);
    overflow: hidden;
    transition: var(--transition);
    margin-top: 1rem;
  }

  .board {
    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    overflow: hidden;
    padding: 2rem;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    transition: var(--transition);
    border: 2px solid var(--accent-color);
    border-radius: 1rem;
  }

  .char {
    position: relative;
    z-index: 2;
    text-align: center;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: clamp(10rem, 30vw, 25rem);
    font-weight: 800;
    color: white;
    text-shadow: 0 6px 20px rgba(0, 0, 0, 0.4);
    transition: var(--transition);
    animation: charReveal 0.4s ease-out;
    will-change: transform, opacity;
  }

  .instruction {
    position: absolute;
    bottom: 2rem;
    color: white;
    font-size: 2rem;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
    z-index: 3;
  }

  @keyframes charReveal {
    from {
      opacity: 0;
      transform: scale(0.8);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  /* Popup Styles */
  .popup-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    z-index: 1000;
    justify-content: center;
    align-items: center;
    backdrop-filter: blur(4px);
  }

  .popup {
    background: white;
    padding: 2rem;
    border-radius: 16px;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
    text-align: center;
    max-width: 400px;
    width: 90%;
    animation: popupSlideIn 0.3s ease-out;
  }

  @keyframes popupSlideIn {
    from {
      opacity: 0;
      transform: scale(0.9) translateY(-20px);
    }
    to {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
  }

  .popup-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
  }

  .popup h3 {
    color: #dc2626;
    margin-bottom: 1rem;
    font-size: 1.5rem;
  }

  .popup p {
    color: #374151;
    margin-bottom: 1rem;
    line-height: 1.5;
  }

  .pressed-key {
    font-weight: bold;
    color: #dc2626;
    background: #fee2e2;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-family: monospace;
  }

  .valid-keys {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
  }

  .key-group {
    background: #f3f4f6;
    padding: 0.5rem;
    border-radius: 0.5rem;
    font-family: monospace;
    font-size: 0.9rem;
    color: #374151;
  }

  .popup-close {
    background: var(--accent-color);
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 0.5rem;
    font-size: 1rem;
    cursor: pointer;
    transition: var(--transition);
    font-weight: 500;
  }

  .popup-close:hover {
    background: #3730a3;
    transform: translateY(-2px);
  }

  @media (max-width: 640px) {
    .header {
      padding: 1rem;
      width: 90%;
    }

    .info {
      font-size: 1.25rem;
    }

    .char {
      font-size: clamp(4rem, 25vw, 15rem);
    }

    .instruction {
      font-size: 1.5rem;
    }
  }
</style>
