---
import { alphabetMapper } from "@/mappers/alphabet";
import { IMAGE_DIR, colorBox, fontBox, numberBox, fontColor } from "@/utils/constants";
import Keyboard from "@/components/Keyboard.astro";
---

<div class="container">
  <div class="header-container">
    <header class="header">
      <h1 class="info" aria-live="polite">Press any key</h1>
    </header>
    <div class="continue-message" id="continueMessage" style="display: none;">Press any key to continue</div>
  </div>

  <main class="main">
    <section class="board" id="board" aria-live="polite">
      <div class="content-wrapper">
        <div class="char" id="char"></div>
        <div class="instruction" id="instruction"></div>
      </div>
    </section>
  </main>
  <Keyboard />
</div>

<div class="popup-overlay" id="popupOverlay">
  <div class="popup">
    <div class="popup-icon">⚠️</div>
    <p class="popup-line">You pressed: <span id="pressedKey" class="pressed-key"></span></p>
    <p class="popup-line">Press A-Z, a-z or 0-9 keys</p>
    <button class="popup-close" id="popupClose">Got it!</button>
  </div>
</div>

<script
  define:vars={{
    colorBox,
    fontBox,
    numberBox,
    alphabetMapper,
    IMAGE_DIR,
    fontColor
  }}
  is:inline
>
  // Initialize state
  let currentFontIndex = 0;
  let currentFontColorIndex = 0;
  let isUpperCase = true;
  let hasKeyBeenPressed = false;
  let showImages = true;
  let isNumberPressed = false;
  let backgroundMode = "none";
  let currentDisplayedKey = "";

  // DOM elements
  const mainEl = document.querySelector("main");
  const boardDiv = document.getElementById("board");
  const charDiv = document.getElementById("char");
  const instructionDiv = document.getElementById("instruction");
  const toggleCaseSwitch = document.getElementById("toggleCase");
  const toggleFontSwitch = document.getElementById("toggleFont");
  const toggleImgSwitch = document.getElementById("toggleImg");
  const toggleBackgroundSwitch = document.getElementById("toggleBg");
  const toggleColorSwitch = document.getElementById("toggleColor");
  const info = document.querySelector(".info");
  const popupOverlay = document.getElementById("popupOverlay");
  const pressedKeySpan = document.getElementById("pressedKey");
  const popupClose = document.getElementById("popupClose");
  const imgToggle = document.querySelector(".img-toggle");
  const bgToggle = document.querySelector(".bg-toggle");
  const colorToggle = document.querySelector(".color-toggle");

  function showContinueMessage() {
    const continueMsg = document.getElementById("continueMessage");
    if (continueMsg) {
      continueMsg.style.display = "block";
    }
  }

  function initializeDisplay() {
    charDiv.textContent = "";
    instructionDiv.textContent = "";
    clearAllBackgrounds();
    info.textContent = "Press any key";
    isNumberPressed = false;
    backgroundMode = "none";
    showImages = true;
    currentDisplayedKey = "";
    currentFontColorIndex = 0;
    updateFontColor();

    const continueMsg = document.getElementById("continueMessage");
    if (continueMsg) {
      continueMsg.style.display = "none";
    }

    forceUpdateToggleButtons();

    if (imgToggle) {
      imgToggle.style.pointerEvents = "";
      imgToggle.style.opacity = "";
    }
  }

  function getRandomValue(arr) {
    if (!arr || arr.length === 0) return "#ffffff";
    return arr[Math.floor(Math.random() * arr.length)];
  }

  function showPopup(key) {
    pressedKeySpan.textContent = key;
    popupOverlay.style.display = "flex";
    document.body.style.overflow = "hidden";
    document.documentElement.style.overflow = "hidden";
  }

  function hidePopup() {
    popupOverlay.style.display = "none";
    document.body.style.overflow = "";
    document.documentElement.style.overflow = "";
  }

  function clearAllBackgrounds() {
    if (boardDiv) {
      boardDiv.style.backgroundImage = "";
      boardDiv.style.backgroundColor = "";
      boardDiv.style.background = "";
      boardDiv.removeAttribute("style");
      boardDiv.setAttribute("style", "");
    }
    backgroundMode = "none";
  }

  function setBackgroundImage(imagePath) {
    clearAllBackgrounds();
    if (boardDiv) {
      // Check network status
      const basePath = navigator.onLine ? IMAGE_DIR : "/assets/images/background";
      const fullPath = `${basePath}/${imagePath.split("/").pop()}`;
      boardDiv.style.backgroundImage = `url(${fullPath})`;
      boardDiv.style.backgroundSize = "cover";
      boardDiv.style.backgroundPosition = "center";
      boardDiv.style.backgroundRepeat = "no-repeat";
    }
    backgroundMode = "image";
  }

  function setBackgroundColor(color) {
    clearAllBackgrounds();
    if (boardDiv) {
      boardDiv.style.backgroundColor = color;
    }
    backgroundMode = "color";
  }

  function updateFontColor() {
    const currentColor = fontColor[currentFontColorIndex];
    if (charDiv) {
      charDiv.style.color = currentColor;
    }
    if (instructionDiv) {
      instructionDiv.style.color = currentColor;
    }
  }

  function forceUpdateToggleButtons() {
    if (imgToggle) {
      imgToggle.classList.remove("active");
      imgToggle.style.backgroundColor = "";
      imgToggle.style.color = "";
    }
    if (bgToggle) {
      bgToggle.classList.remove("active");
      bgToggle.style.backgroundColor = "";
      bgToggle.style.color = "";
    }
    if (colorToggle) {
      colorToggle.classList.remove("active");
      colorToggle.style.backgroundColor = "";
      colorToggle.style.color = "";
    }

    updateToggleButtons();
  }

  function updateToggleButtons() {
    if (!imgToggle || !bgToggle || !colorToggle) return;

    if (backgroundMode === "image") {
      imgToggle.classList.add("active");
      imgToggle.style.backgroundColor = "#007bff";
      imgToggle.style.color = "white";
      bgToggle.classList.remove("active");
      bgToggle.style.backgroundColor = "";
      bgToggle.style.color = "";
    } else if (backgroundMode === "color") {
      bgToggle.classList.add("active");
      bgToggle.style.backgroundColor = "#007bff";
      bgToggle.style.color = "white";
      imgToggle.classList.remove("active");
      imgToggle.style.backgroundColor = "";
      imgToggle.style.color = "";
    } else {
      imgToggle.classList.remove("active");
      imgToggle.style.backgroundColor = "";
      imgToggle.style.color = "";
      bgToggle.classList.remove("active");
      bgToggle.style.backgroundColor = "";
      bgToggle.style.color = "";
    }

    if (toggleImgSwitch) {
      toggleImgSwitch.checked = backgroundMode === "image";
    }
    if (toggleBackgroundSwitch) {
      toggleBackgroundSwitch.checked = backgroundMode === "color";
    }

    if (imgToggle) {
      if (isNumberPressed) {
        imgToggle.style.pointerEvents = "none";
        imgToggle.style.opacity = "0.5";
      } else {
        imgToggle.style.pointerEvents = "";
        imgToggle.style.opacity = "";
      }
    }
  }

  function updateDisplay(key) {
    hasKeyBeenPressed = true;
    instructionDiv.textContent = "";
    const isDifferentKey = currentDisplayedKey !== key.toUpperCase();

    if (isDifferentKey) {
      currentFontColorIndex = 0;
    }

    if (!isNaN(Number(key))) {
      isNumberPressed = true;
      const randomColor = getRandomValue(colorBox);
      setBackgroundColor(randomColor);
      charDiv.textContent = key;
      info.textContent = numberBox[key] || "Unknown";
      charDiv.style.fontFamily = instructionDiv.style.fontFamily = `"${fontBox[currentFontIndex]}"`;
      charDiv.style.fontSize = "";
      currentDisplayedKey = key;
      updateFontColor();
      showContinueMessage();
      updateToggleButtons();
      return;
    }

    isNumberPressed = false;
    const found = alphabetMapper.find((alpha) => alpha.key.toUpperCase() === key.toUpperCase());

    if (found) {
      info.textContent = found.value;
      charDiv.textContent = isUpperCase ? key.toUpperCase() : key.toLowerCase();
      charDiv.style.fontFamily = instructionDiv.style.fontFamily = `"${fontBox[currentFontIndex]}"`;
      currentDisplayedKey = key.toUpperCase();
      updateFontColor();

      if (showImages && backgroundMode !== "color") {
        setBackgroundImage(`${found.value}.jpg`);
        charDiv.style.fontSize = "40vh";
      } else if (backgroundMode === "color") {
        const randomColor = getRandomValue(colorBox);
        setBackgroundColor(randomColor);
        charDiv.style.fontSize = "";
      } else {
        clearAllBackgrounds();
        charDiv.style.fontSize = "";
      }

      updateToggleButtons();
    } else {
      showPopup(key);
    }
    showContinueMessage();
  }

  function handleKeyPress(e) {
    const key = e.key;

    if (popupOverlay.style.display === "flex") {
      if (key === "Escape") {
        hidePopup();
      }
      return;
    }

    if (key.length === 1 && /[a-zA-Z0-9]/.test(key)) {
      updateDisplay(key);
    } else if (key.length === 1 && !e.ctrlKey && !e.altKey && !e.metaKey) {
      showPopup(key);
    }
  }

  initializeDisplay();

  // Add virtual keyboard event listener
  document.addEventListener("virtualKeyPress", (e) => {
    if (popupOverlay.style.display === "flex") return;
    updateDisplay(e.detail.key);
  });

  document.addEventListener("keydown", handleKeyPress);
  if (popupClose) popupClose.addEventListener("click", hidePopup);

  if (popupOverlay) {
    popupOverlay.addEventListener("click", (e) => {
      if (e.target === popupOverlay) {
        hidePopup();
      }
    });
  }

  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      hidePopup();
    }
  });

  if (imgToggle) {
    imgToggle.addEventListener("click", () => {
      if (isNumberPressed) return;
      if (backgroundMode === "color") {
        bgToggle.classList.remove("active");
        bgToggle.style.backgroundColor = "";
        bgToggle.style.color = "";
      }

      if (backgroundMode === "image") {
        clearAllBackgrounds();
        backgroundMode = "none";
        showImages = false;
        imgToggle.classList.remove("active");
        imgToggle.style.backgroundColor = "";
        imgToggle.style.color = "";
        charDiv.style.fontSize = "";
      } else {
        backgroundMode = "image";
        showImages = true;
        if (hasKeyBeenPressed && charDiv.textContent) {
          const currentChar = charDiv.textContent;
          if (!/\d/.test(currentChar)) {
            const found = alphabetMapper.find((alpha) => alpha.key.toUpperCase() === currentChar.toUpperCase());
            if (found) {
              setBackgroundImage(`${found.value}.jpg`);
              charDiv.style.fontSize = "40vh";
              updateFontColor();
            }
          }
        }
        imgToggle.classList.add("active");
        imgToggle.style.backgroundColor = "#007bff";
        imgToggle.style.color = "white";
      }

      setTimeout(() => {
        updateToggleButtons();
      }, 10);
    });
  }

  if (bgToggle) {
    bgToggle.addEventListener("click", () => {
      if (backgroundMode === "image") {
        imgToggle.classList.remove("active");
        imgToggle.style.backgroundColor = "";
        imgToggle.style.color = "";
      }

      if (backgroundMode === "color") {
        clearAllBackgrounds();
        backgroundMode = "none";
        showImages = false;
        bgToggle.classList.remove("active");
        bgToggle.style.backgroundColor = "";
        bgToggle.style.color = "";
      } else {
        backgroundMode = "color";
        showImages = false;

        if (hasKeyBeenPressed && charDiv.textContent) {
          const randomColor = getRandomValue(colorBox);
          setBackgroundColor(randomColor);
          charDiv.style.fontSize = "";
          updateFontColor();
        } else {
          const randomColor = getRandomValue(colorBox);
          setBackgroundColor(randomColor);
        }

        bgToggle.classList.add("active");
        bgToggle.style.backgroundColor = "#007bff";
        bgToggle.style.color = "white";
      }
    });
  }

  if (colorToggle) {
    colorToggle.addEventListener("click", () => {
      currentFontColorIndex = (currentFontColorIndex + 1) % fontColor.length;
      updateFontColor();

      colorToggle.classList.add("active");
      colorToggle.style.backgroundColor = "#007bff";
      colorToggle.style.color = "white";

      if (toggleColorSwitch) {
        toggleColorSwitch.checked = true;
      }
    });
  }

  if (toggleCaseSwitch) {
    toggleCaseSwitch.addEventListener("change", (e) => {
      isUpperCase = !e.target.checked;
      const currentText = charDiv.textContent;
      if (currentText && /[a-zA-Z]/.test(currentText)) {
        charDiv.textContent = isUpperCase ? currentText.toUpperCase() : currentText.toLowerCase();
      }
    });
  }

  if (toggleFontSwitch) {
    toggleFontSwitch.addEventListener("change", () => {
      currentFontIndex = (currentFontIndex + 1) % fontBox.length;
      const currentFont = fontBox[currentFontIndex];

      document.fonts
        .load(`1em "${currentFont}"`)
        .then(() => {
          if (charDiv) charDiv.style.fontFamily = `"${currentFont}"`;
          if (instructionDiv) instructionDiv.style.fontFamily = `"${currentFont}"`;
        })
        .catch(() => {
          console.warn(`Font "${currentFont}" failed to load.`);
          if (charDiv) charDiv.style.fontFamily = `"${currentFont}"`;
          if (instructionDiv) instructionDiv.style.fontFamily = `"${currentFont}"`;
        });
    });
  }

  console.log("Welcome to abcdkbd.com - Enhanced Interactive Learning");

  document.addEventListener("keyboardReset", () => {
    currentFontIndex = 0;
    currentFontColorIndex = 0;
    isUpperCase = true;
    hasKeyBeenPressed = false;
    showImages = true;
    isNumberPressed = false;
    backgroundMode = "none";
    currentDisplayedKey = "";
    initializeDisplay();

    if (mainEl) {
      mainEl.style.backgroundBlendMode = "normal";
      mainEl.style.filter = "brightness(1)";
    }

    if (toggleCaseSwitch) toggleCaseSwitch.checked = false;
    if (toggleFontSwitch) toggleFontSwitch.checked = false;
    if (toggleBackgroundSwitch) toggleBackgroundSwitch.checked = false;
    if (toggleImgSwitch) toggleImgSwitch.checked = true;
    if (toggleColorSwitch) toggleColorSwitch.checked = false;

    hidePopup();
  });
</script>

<style>
  :root {
    --primary-bg: linear-gradient(135deg, #e0e7ff 0%, #a5b4fc 100%);
    --header-bg: #f9fafb;
    --accent-color: #4338ca;
    --control-bg: rgba(255, 255, 255, 0.95);
    --text-color: #ffffff;
    --solid-bg: #a5b4fc;
    --shadow: 0 6px 12px -2px rgba(0, 0, 0, 0.1), 0 3px 6px -3px rgba(0, 0, 0, 0.08);
    --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    --light-border: #e2e8f0;
  }

  * {
    box-sizing: border-box;
    margin: auto;
    padding: 0;
  }

  .container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    font-family: "Inter", system-ui, sans-serif;
    text-align: center;
    padding: 1rem;
    position: relative;
    padding-bottom: 15rem;
  }

  .header-container {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    width: 100%;
    max-width: 1500px;
    gap: 2rem;
    margin-bottom: 1rem;
    position: relative;
  }

  .header {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    width: 75%;
    height: 60px;
    padding: 1rem 0.6rem;
    gap: 1rem;
    position: sticky;
    top: 0;
    z-index: 100;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 16px;
    box-shadow:
      0 8px 32px rgba(31, 38, 135, 0.37),
      0 4px 16px rgba(0, 0, 0, 0.1),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
    transition: all 0.3s ease;
  }

  .info {
    color: #ffffff;
    font-weight: 600;
    text-align: center;
    text-transform: uppercase;
    font-size: 2rem;
    margin: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    width: 100%;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    letter-spacing: 0.1em;
  }

  .continue-message {
    color: dark-light(#ffffff, black);
    font-size: 1.1rem;
    font-weight: 400;
    font-style: italic;
    text-align: right;
    margin-right: 1%;
    margin-bottom: -15px;
  }
  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .main {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: calc(100vh - 120px);
    overflow: hidden;
    transition: var(--transition);
  }

  .board {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    overflow: hidden;
    padding: 2rem;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    transition: var(--transition);
    border: 2px solid var(--accent-color);
    border-radius: 1rem;
  }

  .content-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    gap: 4rem;
  }

  .char {
    text-align: center;
    font-size: 60vh;
    font-weight: 800;
    color: white;
    text-shadow: 0 6px 20px rgba(0, 0, 0, 0.4);
    transition: var(--transition);
    animation: charReveal 0.4s ease-out;
    will-change: transform, opacity;
    line-height: 1;
    margin: 0;
  }

  .instruction {
    color: white;
    font-size: 1.75rem;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
    transition: var(--transition);
    text-align: center;
    margin: 0;
    padding: 0;
    line-height: 1.5;
  }

  @keyframes charReveal {
    from {
      opacity: 0;
      transform: scale(0.8);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  .popup-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.6);
    z-index: 1000;
    justify-content: center;
    align-items: center;
    backdrop-filter: blur(4px);
  }

  .popup {
    background: white;
    padding: 1rem;
    border-radius: 16px;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
    text-align: center;
    max-width: 350px;
    width: 50%;
    animation: popupSlideIn 0.3s ease-out;
    border: 5px solid #ff0000;
  }

  @keyframes popupSlideIn {
    from {
      opacity: 0;
      transform: scale(0.9) translateY(-20px);
    }
    to {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
  }

  .popup-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
  }

  .popup h3 {
    color: #2563eb;
    margin-bottom: 1rem;
    font-size: 1.5rem;
  }

  .popup p {
    color: #374151;
    margin-bottom: 1rem;
    line-height: 1.5;
  }

  .pressed-key {
    color: #2563eb;
    background: transparent;
    padding: 0.1rem 0.1rem;
    border-radius: 0.25rem;
    font-family: monospace;
  }

  .valid-keys {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
  }

  .key-group {
    background: rgb(201, 203, 205);
    padding: 0.5rem;
    border-radius: 0.5rem;
    font-family: monospace;
    font-size: 0.9rem;
    color: #374151;
  }

  .popup-close {
    background: #2563eb;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 0.5rem;
    font-size: 1rem;
    cursor: pointer;
    transition: var(--transition);
    font-weight: 500;
  }

  .popup-close:hover {
    background: rgba(15, 23, 42, 0.7);
    transform: translateY(-2px);
  }

  @media (max-width: 1024px) {
    .header-container {
      flex-direction: column;
      align-items: center;
      gap: 0.5rem;
    }

    .header {
      width: 90%;
      padding: 1rem;
      height: auto;
    }

    .info {
      font-size: 1.25rem;
    }

    .continue-message {
      width: 90%;
      height: auto;
      font-size: 0.9rem;
      padding: 0.5rem 1rem;
    }

    .main {
      height: calc(100vh - 200px);
    }

    .char {
      margin-top: 10%;
      font-size: clamp(20rem, 50vw, 40rem);
    }

    .instruction {
      font-size: 1.25rem;
    }

    .board {
      width: 95% !important;
      height: calc(85vh - 200px) !important;
      margin-top: 1px;
    }
  }
</style>
