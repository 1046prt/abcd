---
---
<main>
  <div class="board">
    <div id="char"></div>
  </div>
  <div class="controls">
    <label class="switch">
      <input type="checkbox" id="toggleCase" />
      <span class="slider">Caps</span>
    </label>
    <label class="switch">
      <input type="checkbox" id="toggleFont" />
      <span class="slider">Font</span>
    </label>
    <!-- <label class="switch">
      <input type="checkbox" id="toggleBg" />
      <span class="slider">Bold</span>
    </label> -->
  </div>
  <div class="info"></div>
  <span id="text"></span>
</main>

<script>
  import { IMAGE_DIR, colorBox, fontBox, numberBox } from '../utils/draw';
  import { getRandomValue, isAlphabet, isNumber } from '../utils/index';
  import { alphabetMapper } from '../mappers/alphabet';

  let main: HTMLElement;
  let boardDiv: HTMLElement;
  let charDiv: HTMLElement;
  let toggleCaseSwitch: HTMLInputElement;
  let toggleFontSwitch: HTMLInputElement;
  let toggleBackgroundSwitch: HTMLInputElement;
  let info: HTMLElement;
  let textSpan: HTMLElement;
  let fontCounter = 0;

  const initElements = () => {
    main = document.querySelector('main')!;
    boardDiv = document.querySelector('.board')!;
    charDiv = document.getElementById('char')!;
    toggleCaseSwitch = document.getElementById('toggleCase') as HTMLInputElement;
    toggleFontSwitch = document.getElementById('toggleFont') as HTMLInputElement;
    toggleBackgroundSwitch = document.getElementById('toggleBg') as HTMLInputElement;
    info = document.querySelector('.info')!;
    textSpan = document.getElementById('text')!;
  };

  const setupEventListeners = () => {
    toggleCaseSwitch?.addEventListener('change', (e: Event) => {
      const target = e.target as HTMLInputElement;
      charDiv.style.textTransform = target.checked ? 'lowercase' : 'uppercase';
      const after = window.getComputedStyle(textSpan, '::after');
      const { content } = after;
      textSpan.style.setProperty(
        '--content',
        target.checked ? `${content.toLowerCase()}` : `${content.toUpperCase()}`
      );
    });

    toggleFontSwitch?.addEventListener('change', () => {
      fontCounter = (fontCounter + 1) % fontBox.length;
      charDiv.style.fontFamily = fontBox[fontCounter];
    });

    toggleBackgroundSwitch?.addEventListener('change', (e: Event) => {
      const target = e.target as HTMLInputElement;
      main.style.setProperty('--mode', target.checked ? 'inherit' : 'soft-light');
    });
  };

  const drawNumber = (key: string = '0') => {
    const randomColor = getRandomValue(colorBox);
    boardDiv.style.backgroundColor = randomColor;
    charDiv.textContent = key;
    info.textContent = numberBox[parseInt(key)];
  };

  const drawLetter = (key: string = 'A') => {
    const char = key.toLowerCase();
    boardDiv.style.backgroundColor = 'transparent';
    charDiv.textContent = key;
    textSpan.style.setProperty(
      '--content',
      toggleCaseSwitch.checked ? `'${char}'` : `'${key.toUpperCase()}'`
    );

    const found = alphabetMapper.find(alpha => alpha.key === char);
    if (found) {
      info.textContent = found.value;
      main.style.backgroundImage = `url(${IMAGE_DIR}/${found.value}.jpg)`;
    }
  };

  const handleKeyPress = (e: KeyboardEvent) => {
    const keyCode = e.keyCode || e.which;
    
    if (isNumber(keyCode)) {
      drawNumber(e.key);
    } else if (isAlphabet(keyCode)) {
      drawLetter(e.key);
    }
  };

  const handleTouch = (e: TouchEvent) => {
  };

  const init = () => {
    initElements();
    setupEventListeners();
    
    document.addEventListener('keydown', handleKeyPress);
    document.addEventListener('touchstart', handleTouch);
  };

  // Initialize when DOM is ready
  if (document.readyState !== 'loading') {
    init();
  } else {
    document.addEventListener('DOMContentLoaded', init);
  }
</script>

<style>
  /* @font-face {
    font-family: 'boisuStroke';
    src: url('/fonts/boisuStroke.woff2') format('woff2');
  } */

  /* @font-face {
    font-family: 'atkinson';
    src: url('/fonts/atkinson.woff2') format('woff2');
  }

  @font-face {
    font-family: 'sportrop';
    src: url('/fonts/sportrop.woff2') format('woff2');
  }

  @font-face {
    font-family: 'Ananda';
    src: url('/fonts/Ananda.woff2') format('woff2');
  } */

  /* @font-face {
    font-family: 'MudraMohta';
    src: url('/fonts/MudraMohta.woff2') format('woff2');
  } */

  main {
    --mode: soft-light;
    min-height: 100vh;
    background-size: cover;
    background-position: center;
    background-blend-mode: var(--mode);
    display: grid;
    place-items: center;
    grid-template-rows: 1fr auto auto;
    gap: 2rem;
    padding: 2rem;
    transition: background-image 0.3s ease;
  }

  .board {
    width: min(80vw, 400px);
    aspect-ratio: 1;
    border: 4px solid #333;
    border-radius: 1rem;
    display: grid;
    place-items: center;
    background-color: transparent;
    transition: background-color 0.3s ease;
  }

  #char {
    font-size: clamp(10rem, 20vw, 20rem);
    font-weight: bold;
    text-transform: uppercase;
    user-select: none;
    transition: font-family 0.3s ease;
  }

  .controls {
    display: flex;
    gap: 1rem;
  }

  .switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 34px;
  }

  .switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
    border-radius: 34px;
    display: grid;
    place-items: center;
    font-size: 0.8rem;
    color: #333;
  }

  .slider:before {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
  }

  input:checked + .slider {
    background-color: #2196F3;
  }

  input:checked + .slider:before {
    transform: translateX(26px);
  }

  .info {
    font-size: 1.5rem;
    text-align: center;
    min-height: 2rem;
    transition: all 0.3s ease;
  }

  #text {
    position: relative;
  }

  #text::after {
    content: var(--content, '');
    position: absolute;
    left: 100%;
    margin-left: 0.5rem;
  }
</style>