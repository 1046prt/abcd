---
import { alphabetMapper } from "@/mappers/alphabet";
import { IMAGE_DIR, colorBox, fontBox, numberBox } from "@/utils/draw";
import "@/assets/styles/draw.css";
---

<div class="container">
  <header class="header">
    <div class="action">
      <!--<a href="/" class="back-button" aria-label="Go back" title="Go back">‚Üê Back</a>-->
    </div>
    <h1 class="info" aria-live="polite">Press any key</h1>
  </header>

  <main class="main">
    <section class="board" id="board" aria-live="polite">
      <div class="char" id="char"></div>
    </section>
  </main>
</div>

<script
  define:vars={{
    colorBox,
    fontBox,
    numberBox,
    alphabetMapper,
    IMAGE_DIR
  }}
  is:inline
>
  // Initialize state
  let currentFontIndex = 0;
  let isUpperCase = true;

  // DOM elements
  const mainEl = document.querySelector("main");
  const boardDiv = document.getElementById("board");
  const charDiv = document.getElementById("char");
  const toggleCaseSwitch = document.getElementById("toggleCase");
  const toggleFontSwitch = document.getElementById("toggleFont");
  const toggleBackgroundSwitch = document.getElementById("toggleBg");
  const info = document.querySelector(".info");
  const textSpan = document.getElementById("text");

  function getRandomValue(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
  }

  function updateDisplay(key) {
    try {
      const audio = new Audio("data:audio/wav;base64,UklGRggAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhBAAAAAEA");
      audio.volume = 0.1;
      audio.play().catch(() => {});
    } catch (error) {
      console.log("Audio feedback unavailable");
    }

    if (!isNaN(Number(key))) {
      boardDiv.style.backgroundColor = getRandomValue(colorBox);
      boardDiv.style.backgroundImage = "";
      charDiv.textContent = key;
      info.textContent = numberBox[key] || "Unknown";
      return;
    }

    const found = alphabetMapper.find((alpha) => alpha.key.toUpperCase() === key.toUpperCase());
    if (found) {
      info.textContent = found.value;
      if (!toggleBackgroundSwitch?.checked) {
        boardDiv.style.backgroundImage = `url(${IMAGE_DIR}/${found.value}.jpg)`;
        boardDiv.style.backgroundColor = "";
      }
    } else {
      boardDiv.style.backgroundImage = "";
    }

    charDiv.textContent = isUpperCase ? key.toUpperCase() : key.toLowerCase();
  }

  function handleKeyPress(e) {
    const key = e.key;
    if (key.length === 1 && /[a-zA-Z0-9]/.test(key)) {
      updateDisplay(key);
    }
  }

  toggleCaseSwitch?.addEventListener("change", (e) => {
    isUpperCase = !e.target.checked;
    const currentText = charDiv.textContent;
    charDiv.textContent = isUpperCase ? currentText.toUpperCase() : currentText.toLowerCase();
    textSpan?.setAttribute("aria-checked", !e.target.checked);
  });

  toggleFontSwitch?.addEventListener("change", () => {
    currentFontIndex = (currentFontIndex + 1) % fontBox.length;
    charDiv.style.fontFamily = fontBox[currentFontIndex];
  });

  toggleBackgroundSwitch?.addEventListener("change", (e) => {
    if (e.target.checked) {
      mainEl.style.backgroundBlendMode = "soft-light";
      mainEl.style.filter = "brightness(0.9)";
      boardDiv.style.backgroundImage = "none";
      boardDiv.style.backgroundColor =
        getRandomValue(colorBox) || getComputedStyle(document.documentElement).getPropertyValue("--solid-bg");
    } else {
      mainEl.style.backgroundBlendMode = "normal";
      mainEl.style.filter = "brightness(1)";
      boardDiv.style.backgroundColor = "";
    }
  });

  document.addEventListener("keydown", handleKeyPress);
</script>
