---
---
<main>
  <div class="board">
    <div id="char"></div>
  </div>
  <div class="controls">
    <label class="switch">
      <input type="checkbox" id="toggleCase" />
      <span class="slider">Caps</span>
    </label>
    <label class="switch">
      <input type="checkbox" id="toggleFont" />
      <span class="slider">Font</span>
    </label>
    <!-- <label class="switch">
      <input type="checkbox" id="toggleBg" />
      <span class="slider">Bold</span>
    </label> -->
  </div>
  <div class="info"></div>
  <span id="text"></span>
</main>

<script>
  import { IMAGE_DIR, colorBox, fontBox, numberBox } from '../utils/draw';
  import { getRandomValue, isAlphabet, isNumber } from '../utils/index';
  import { alphabetMapper } from '../mappers/alphabet';

  let main: HTMLElement;
  let boardDiv: HTMLElement;
  let charDiv: HTMLElement;
  let toggleCaseSwitch: HTMLInputElement;
  let toggleFontSwitch: HTMLInputElement;
  let toggleBackgroundSwitch: HTMLInputElement;
  let info: HTMLElement;
  let textSpan: HTMLElement;
  let fontCounter = 0;

  const initElements = () => {
    main = document.querySelector('main')!;
    boardDiv = document.querySelector('.board')!;
    charDiv = document.getElementById('char')!;
    toggleCaseSwitch = document.getElementById('toggleCase') as HTMLInputElement;
    toggleFontSwitch = document.getElementById('toggleFont') as HTMLInputElement;
    toggleBackgroundSwitch = document.getElementById('toggleBg') as HTMLInputElement;
    info = document.querySelector('.info')!;
    textSpan = document.getElementById('text')!;
  };

  const setupEventListeners = () => {
    toggleCaseSwitch?.addEventListener('change', (e: Event) => {
      const target = e.target as HTMLInputElement;
      charDiv.style.textTransform = target.checked ? 'lowercase' : 'uppercase';
      const after = window.getComputedStyle(textSpan, '::after');
      const { content } = after;
      textSpan.style.setProperty(
        '--content',
        target.checked ? `${content.toLowerCase()}` : `${content.toUpperCase()}`
      );
    });

    toggleFontSwitch?.addEventListener('change', () => {
      fontCounter = (fontCounter + 1) % fontBox.length;
      charDiv.style.fontFamily = fontBox[fontCounter];
    });

    toggleBackgroundSwitch?.addEventListener('change', (e: Event) => {
      const target = e.target as HTMLInputElement;
      main.style.setProperty('--mode', target.checked ? 'inherit' : 'soft-light');
    });
  };

  const drawNumber = (key: string = '0') => {
    const randomColor = getRandomValue(colorBox);
    boardDiv.style.backgroundColor = randomColor;
    charDiv.textContent = key;
    info.textContent = numberBox[parseInt(key)];
  };

  const drawLetter = (key: string = 'A') => {
    const char = key.toLowerCase();
    boardDiv.style.backgroundColor = 'transparent';
    charDiv.textContent = key;
    textSpan.style.setProperty(
      '--content',
      toggleCaseSwitch.checked ? `'${char}'` : `'${key.toUpperCase()}'`
    );

    const found = alphabetMapper.find(alpha => alpha.key === char);
    if (found) {
      info.textContent = found.value;
      main.style.backgroundImage = `url(${IMAGE_DIR}/${found.value}.jpg)`;
    }
  };

  const handleKeyPress = (e: KeyboardEvent) => {
    const keyCode = e.keyCode || e.which;
    
    if (isNumber(keyCode)) {
      drawNumber(e.key);
    } else if (isAlphabet(keyCode)) {
      drawLetter(e.key);
    }
  };

  const handleTouch = (e: TouchEvent) => {
  };

  const init = () => {
    initElements();
    setupEventListeners();
    
    document.addEventListener('keydown', handleKeyPress);
    document.addEventListener('touchstart', handleTouch);
  };

  // Initialize when DOM is ready
  if (document.readyState !== 'loading') {
    init();
  } else {
    document.addEventListener('DOMContentLoaded', init);
  }
</script>

<style>
  /* Font Faces (Uncomment if you have the fonts) */
/* @font-face {
  font-family: 'boisuStroke';
  src: url('/fonts/boisuStroke.woff2') format('woff2');
}

@font-face {
  font-family: 'atkinson';
  src: url('/fonts/atkinson.woff2') format('woff2');
}

@font-face {
  font-family: 'sportrop';
  src: url('/fonts/sportrop.woff2') format('woff2');
}

@font-face {
  font-family: 'Ananda';
  src: url('/fonts/Ananda.woff2') format('woff2');
}

@font-face {
  font-family: 'MudraMohta';
  src: url('/fonts/MudraMohta.woff2') format('woff2');
} */

/* body {
  font-family: 'Roboto', sans-serif;
  background-color: #f5f5f5;
  color: #333;
  margin: 0;
  padding: 0;
} */

main {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  background-size: cover;
  background-position: center;
  background-blend-mode: soft-light;
  padding: 2rem;
  gap: 2rem;
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  background-color: #f5f5f5;
}

.controls {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 1.5rem;
  width: 100%;
  z-index: 10;
}

.board {
  width: min(80vw, 500px);
  aspect-ratio: 1;
  display: grid;
  place-items: center;
  background-color: transparent;
  border: none;
  border-radius: 2rem;
  transition: all 0.4s ease;
  box-shadow: 
    0 0 60px rgba(0, 0, 0, 0.1),
    inset 0 0 0 2px rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  animation: float 6s ease-in-out infinite;
}

#char {
  font-size: clamp(8rem, 25vw, 20rem);
  font-weight: bold;
  text-transform: uppercase;
  user-select: none;
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  background: linear-gradient(135deg, #333 0%, #666 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  text-shadow: 3px 3px 6px rgba(0, 0, 0, 0.2);
  text-align: center;
  width: 100%;
}

.info {
  font-size: 1.5rem;
  text-align: center;
  min-height: 2.5rem;
  transition: all 0.4s ease;
  color: #333;
  font-weight: 500;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.switch {
  position: relative;
  display: inline-block;
  width: 120px;
  height: 40px;
}

.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(255, 255, 255, 0.9);
  transition: 0.4s;
  border-radius: 20px;
  display: grid;
  place-items: center;
  font-size: 0.9rem;
  font-weight: 500;
  color: #666;
  text-transform: uppercase;
  letter-spacing: 1px;
  box-shadow: 
    0 4px 15px rgba(0, 0, 0, 0.1),
    inset 0 0 0 1px rgba(0, 0, 0, 0.05);
}

.slider:before {
  position: absolute;
  content: "";
  height: 32px;
  width: 32px;
  left: 4px;
  bottom: 4px;
  background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%);
  transition: 0.4s;
  border-radius: 50%;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

input:checked + .slider {
  background-color: rgba(33, 150, 243, 0.1);
  color: #2196F3;
}

input:checked + .slider:before {
  transform: translateX(80px);
}

@keyframes float {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-10px); }
}

@media (max-width: 768px) {
  main {
    gap: 1rem;
    padding: 1rem;
  }

  .controls {
    flex-direction: column;
    gap: 1rem;
  }

  .board {
    width: min(90vw, 400px);
  }

  #char {
    font-size: clamp(6rem, 25vw, 16rem);
  }

  .switch {
    width: 100px;
    height: 36px;
  }

  .slider {
    font-size: 0.8rem;
  }

  .slider:before {
    height: 28px;
    width: 28px;
  }

  input:checked + .slider:before {
    transform: translateX(64px);
  }
}

@media (max-width: 480px) {
  .board {
    width: min(95vw, 300px);
  }

  #char {
    font-size: clamp(4rem, 25vw, 12rem);
  }

  .switch {
    width: 90px;
    height: 32px;
  }

  .info {
    font-size: 1.2rem;
  }
}
</style>