---
import "@/assets/styles/canvas.css"
---

<div class="canvas-generator">
  <nav>
    <div class="nav-left">
      <!--<button class="hint" id="tip">❓</button>-->
    </div>
    <h1>Create Fun Images!</h1>
  </nav>

  <main class="controls">
    <div class="input-area">
      <input 
        type="text" 
        placeholder="Type your text here..." 
        id="name" 
        class="text-input"
      />
      <div class="buttons">
        <button data-variant="text" class="action-button">Draw</button>
        <button data-variant="time" class="action-button">Clock</button>
        <button data-variant="reset" class="action-button">Clear</button>
      </div>
      <div class="checkbox-area">
        <input type="checkbox" id="full" />
        <label for="full">Use Full Name</label>
      </div>
    </div>
    <div id="canvasDiv" class="image-grid"></div>
  </main>

  <dialog id="helpDialog">
    <div class="dialog-content">
      <h2>🌈 Let's Create!</h2>
      <ul>
        <li><strong>Draw:</strong> Make a colorful picture with your text!</li>
        <li><strong>Clock:</strong> Create an image with the current time.</li>
        <li><strong>Clear:</strong> Start over and make a new picture.</li>
      </ul>
      <p><strong>Tip:</strong> Right-click to save your awesome artwork!</p>
      <button id="closeDialog" class="dialog-close">Got it!</button>
    </div>
  </dialog>
</div>


<script>
  class CanvasGenerator {
    constructor() {
      this.initializeElements();
      this.bindEvents();
    }

    initializeElements() {
      this.input = document.getElementById('name');
      this.canvasContainer = document.getElementById('canvasDiv');
      this.fullCheckbox = document.getElementById('full');
      this.helpDialog = document.getElementById('helpDialog');
      this.tipButton = document.getElementById('tip');
      this.closeDialogButton = document.getElementById('closeDialog');
    }

    bindEvents() {
      document.querySelectorAll('.action-button').forEach(button => {
        button.addEventListener('click', (e) => this.handleClick(e));
      });

      if (this.tipButton) {
        this.tipButton.addEventListener('click', () => this.helpDialog.showModal());
      }

      if (this.closeDialogButton) {
        this.closeDialogButton.addEventListener('click', () => this.helpDialog.close());
      }
    }

    handleClick(event) {
      const variant = event.target.dataset.variant;

      switch (variant) {
        case 'text':
          this.generateTextImage();
          break;
        case 'time':
          this.generateTimeImage();
          break;
        case 'reset':
          this.resetCanvas();
          break;
      }
    }

    createCanvas(text) {
      const canvas = document.createElement('canvas');
      canvas.width = 300;
      canvas.height = 200;

      const ctx = canvas.getContext('2d');
      const bgColor = this.getChildFriendlyColor();

      // Draw background
      ctx.fillStyle = bgColor;
      ctx.fillRect(0, 0, 300, 200);

      // Draw text
      ctx.font = 'bold 24px Comic Sans MS';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillStyle = 'white';
      ctx.fillText(text, 150, 100);

      return canvas.toDataURL();
    }

    getChildFriendlyColor() {
      const colors = [
        '#FF6B6B',  // Soft Red
        '#4ECDC4',  // Turquoise
        '#45B7D1',  // Sky Blue
        '#FDCB6E',  // Soft Yellow
        '#6C5CE7',  // Soft Purple
        '#A8E6CF',  // Mint Green
        '#FF8ED4'   // Soft Pink
      ];
      return colors[Math.floor(Math.random() * colors.length)];
    }

    generateTextImage() {
      const text = this.input.value.trim();
      if (!text) return;

      const processedText = this.fullCheckbox.checked ?
        text :
        text.split(' ').map(w => w[0]).join('').toUpperCase();

      this.displayImage(this.createCanvas(processedText));
    }

    generateTimeImage() {
      const now = new Date();
      const timeString = [
        now.getHours().toString().padStart(2, '0'),
        now.getMinutes().toString().padStart(2, '0'),
        now.getSeconds().toString().padStart(2, '0')
      ].join(':');

      this.displayImage(this.createCanvas(timeString));
    }

    displayImage(dataUrl) {
      const img = document.createElement('img');
      img.src = dataUrl;
      img.alt = 'Generated fun image';
      this.canvasContainer.prepend(img);
    }

    resetCanvas() {
      this.canvasContainer.innerHTML = '';
      this.input.value = '';
      this.fullCheckbox.checked = false;
    }
  }

  // Ensure the script runs after the DOM is fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    new CanvasGenerator();
  });
</script>