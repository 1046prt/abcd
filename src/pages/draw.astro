---
import Layout from "@/layouts/Base";
import Keyboard from "@/components/DrawKeyboard.astro";
import Help from "@/components/Help.astro";
import ImageIcon from "@/assets/icons/image.svg";
---

<Layout meta={{ title: "Draw by Keyboard" }}>
  <Fragment slot="header-right">
    <div class="controls-container">
      <div class="controls">
        <label for="toggleCase" class="control-item" data-tooltip="Toggle case">
          <input type="checkbox" name="change_case" id="toggleCase" class="visually-hidden hidden" />
          <span id="text" class="control-button case-toggle" role="switch" aria-checked="false"> Aa </span>
        </label>

        <label for="toggleFont" class="control-item" data-tooltip="Toggle font">
          <input type="checkbox" name="change_font" id="toggleFont" class="visually-hidden hidden" />
          <span id="font" class="control-button font-toggle" role="switch" aria-checked="false">
            <span class="font-icon">F</span>
            <span class="font-icon-alt">F</span>
          </span>
        </label>

        <div class="control-group">
          <label for="toggleImg" class="control-item" data-tooltip="Toggle Image">
            <input type="checkbox" name="toggle_img" id="toggleImg" class="visually-hidden hidden" />
            <span id="img" class="control-button img-toggle" role="switch" aria-checked="false">
              <ImageIcon class="img-icon" />
              <ImageIcon class="img-icon-alt" />
            </span>
          </label>

          <label for="toggleColor" class="control-item" data-tooltip="Toggle Font Color">
            <input type="checkbox" name="toggle_color" id="toggleColor" class="visually-hidden hidden" />
            <span class="control-button color-toggle" role="switch" aria-checked="false">
              <span class="color-icon">T</span>
              <span class="color-icon-alt">T</span>
            </span>
          </label>
        </div>

        <label for="toggleBg" class="control-item" data-tooltip="Toggle background">
          <input type="checkbox" name="change_bg" id="toggleBg" class="visually-hidden hidden" />
          <span class="control-button bg-toggle" role="switch" aria-checked="false">
            <span class="bg-icon">ðŸŽ¨</span>
            <span class="bg-icon-alt">ðŸŽ¨</span>
          </span>
        </label>

        <div class="control-item" data-tooltip="Reset all">
          <button class="control-button reset-button" id="resetButton">â†»</button>
        </div>
      </div>

      <Help
        title="Draw Keyboard"
        description="Draw letters by sliding your finger across the keys! Try the buttons to change the style, make it BIG or small, change the images, pick cool backgrounds, and customize font colors!"
      />
    </div>
  </Fragment>
  <Keyboard />
</Layout>

<style>
  :root {
    --keyboard-bg: white;
    --keyboard-alt-bg: #f0f0f0;
    --font-normal: "Arial", sans-serif;
    --font-fancy: "Brush Script MT", cursive;
  }

  .controls-container {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .controls {
    display: flex;
    gap: 0.5rem;
  }

  .control-group {
    display: flex;
    gap: 0.25rem;
  }

  .control-item {
    display: flex;
    align-items: center;
    position: relative;
  }

  .control-button {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 3.2rem;
    height: 3.2rem;
    border-radius: 50%;
    cursor: pointer;
    border: 1px solid #3b82f6;
    transition: all 0.2s var(--ease);
    box-shadow: 0 1px 3px var(--shadow-sm);
    font-size: 1.25rem;
    color: #3b82f6;
    font-weight: 600;
    background-color: transparent;
    position: relative;
    overflow: hidden;
  }

  .control-button:hover {
    transform: translateY(-2px) scale(1.05);
    box-shadow: 0 6px 12px var(--shadow-lg);
    border-color: #2563eb;
  }

  .control-button.active {
    background-color: #3b82f6;
    color: white;
  }

  .control-button.active:hover {
    transform: translateY(-2px) scale(1.05);
    box-shadow: 0 6px 12px rgba(59, 130, 246, 0.4);
    background-color: #2563eb;
  }

  .reset-button {
    margin-left: 0;
  }

  .reset-button:hover {
    transition: all 0.3s ease;
  }

  .font-icon,
  .font-icon-alt {
    position: absolute;
    transition: opacity 0.2s ease;
    font-size: 1.25rem;
  }

  .font-icon {
    opacity: 1;
    font-family: Arial, sans-serif;
  }

  .font-icon-alt {
    opacity: 0;
    font-family: "Brush Script MT", cursive;
  }

  .font-toggle.active .font-icon {
    opacity: 0;
  }

  .font-toggle.active .font-icon-alt {
    opacity: 1;
  }

  .img-icon,
  .img-icon-alt {
    position: absolute;
    transition: opacity 0.2s ease;
    width: 1.25rem;
    height: 1.25rem;
  }

  .img-icon {
    opacity: 1;
  }

  .img-icon-alt {
    opacity: 0;
  }

  .img-toggle.active .img-icon {
    opacity: 0;
  }

  .img-toggle.active .img-icon-alt {
    opacity: 1;
  }

  .color-icon,
  .color-icon-alt {
    position: absolute;
    transition: opacity 0.2s ease;
    font-size: 1.25rem;
    font-weight: bold;
  }

  .color-icon {
    opacity: 1;
  }

  .color-icon-alt {
    opacity: 0;
  }

  .color-toggle.active .color-icon {
    opacity: 0;
  }

  .color-toggle.active .color-icon-alt {
    opacity: 1;
  }

  .bg-icon,
  .bg-icon-alt {
    position: absolute;
    transition: opacity 0.2s ease;
    font-size: 1.25rem;
  }

  .bg-icon {
    opacity: 1;
  }

  .bg-icon-alt {
    opacity: 0;
  }

  .bg-toggle.active .bg-icon {
    opacity: 0;
  }

  .bg-toggle.active .bg-icon-alt {
    opacity: 1;
  }

  .control-item::after,
  .reset-button::after {
    content: attr(data-tooltip);
    position: absolute;
    bottom: -2.5rem;
    left: 50%;
    transform: translateX(-50%);
    background: transparent;
    color: light-dark(black, white);
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    font-weight: 500;
    opacity: 0;
    transition: all 0.2s var(--ease);
    white-space: nowrap;
    pointer-events: none;
    z-index: 10;
  }

  .control-item:hover::after,
  .reset-button:hover::after {
    opacity: 1;
    bottom: -2rem;
  }

  .hidden {
    display: none;
  }

  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  @media (max-width: 1024px) {
    .controls {
      position: absolute;
      right: 0.5rem;
      top: 12rem;
      bottom: 0;
      margin: auto -8px;
      flex-direction: column;
      gap: 0.5rem;
      padding: 0.5rem 0;
      z-index: 100;
      background: transparent; 
    }

    .control-group {
      flex-direction: column;
      gap: 0.25rem;
    }

    .control-button {
      width: 2.8rem;
      height: 2.8rem;
      font-size: 1.1rem;
    }

    .img-icon,
    .img-icon-alt {
      width: 1.1rem;
      height: 1.1rem;
    }

    .font-icon,
    .font-icon-alt,
    .color-icon,
    .color-icon-alt,
    .bg-icon,
    .bg-icon-alt {
      font-size: 1.1rem;
    }

    .control-item::after,
    .reset-button::after {
      font-size: 0.7rem;
      bottom: -2.25rem;
    }

    .control-item:hover::after,
    .reset-button:hover::after {
      bottom: -1.75rem;
    }
  }

  @media (max-width: 768px) {
    .controls {
      right: 0.25rem;
      padding: 0.5rem 20px;
      gap: 0.25rem;
    }
    
    .control-button {
      width: 2.5rem;
      height: 2.5rem;
      font-size: 1rem;
    }

    .img-icon,
    .img-icon-alt {
      width: 1rem;
      height: 1rem;
    }

    .font-icon,
    .font-icon-alt,
    .color-icon,
    .color-icon-alt,
    .bg-icon,
    .bg-icon-alt {
      font-size: 1rem;
    }

    .control-item::after,
    .reset-button::after {
      font-size: 0.65rem;
      bottom: -2rem;
    }

    .control-item:hover::after,
    .reset-button:hover::after {
      bottom: -1.5rem;
    }
  }


    @media (max-width: 690px) {
    .controls {
      margin-top:-10px;
      right: 0.25rem;
      padding: 0.75rem 10px;
      gap: 0.25rem;
    }

    .control-button {
      width: 2.5rem;
      height: 2.5rem;
      font-size: 1rem;
    }

    .img-icon,
    .img-icon-alt {
      width: 1rem;
      height: 1rem;
    }

    .font-icon,
    .font-icon-alt,
    .color-icon,
    .color-icon-alt,
    .bg-icon,
    .bg-icon-alt {
      font-size: 1rem;
    }

    .control-item::after,
    .reset-button::after {
      font-size: 0.65rem;
      bottom: -2rem;
    }

    .control-item:hover::after,
    .reset-button:hover::after {
      bottom: -1.5rem;
    }
  }

  #board {
    position: relative;
    z-index: 1;
  }

  .controls {
    z-index: 100;
  }

  *:focus {
    outline: none;
    box-shadow: none;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Get all buttons and elements
    const caseToggle = document.querySelector(".case-toggle") as HTMLElement;
    const fontToggle = document.querySelector(".font-toggle") as HTMLElement;
    const bgToggle = document.querySelector(".bg-toggle") as HTMLElement;
    const colorToggle = document.querySelector(".color-toggle") as HTMLElement;
    const resetButton = document.getElementById("resetButton") as HTMLButtonElement;

    // Get elements from the second file that need to be reset
    const mainEl = document.querySelector("main");
    const boardDiv = document.getElementById("board");
    const charDiv = document.getElementById("char");
    const toggleImgSwitch = document.getElementById("toggleImg") as HTMLInputElement;
    const toggleCaseSwitch = document.getElementById("toggleCase") as HTMLInputElement;
    const toggleFontSwitch = document.getElementById("toggleFont") as HTMLInputElement;
    const toggleBackgroundSwitch = document.getElementById("toggleBg") as HTMLInputElement;
    const toggleColorSwitch = document.getElementById("toggleColor") as HTMLInputElement;
    const info = document.querySelector(".info");

    // Store original values for complete reset
    const originalState = {
      isUpperCase: true,
      currentFontIndex: 0,
      mainElBackgroundBlendMode: "normal",
      mainElFilter: "brightness(1)",
      boardDivBackgroundColor: "",
      boardDivBackgroundImage: "",
      charDivFontFamily: "",
      charDivColor: "",
      infoText: "Press any key",
      charText: ""
    };

    // Simple toggle for case button
    caseToggle.addEventListener("click", () => {
      const isActive = caseToggle.classList.contains("active");
      if (isActive) {
        caseToggle.classList.remove("active");
        caseToggle.setAttribute("aria-checked", "false");
        caseToggle.textContent = "Aa";
        caseToggle.style.fontSize = "1.25rem";
      } else {
        caseToggle.classList.add("active");
        caseToggle.setAttribute("aria-checked", "true");
        caseToggle.textContent = "Aa";
        caseToggle.style.fontSize = "1rem";
      }
    });

    // Modified toggle for font button - stays active until reset
    fontToggle.addEventListener("click", () => {
      const isActive = fontToggle.classList.contains("active");
      if (!isActive) {
        fontToggle.classList.add("active");
        fontToggle.setAttribute("aria-checked", "true");
        if (toggleFontSwitch) {
          toggleFontSwitch.checked = true;
        }
      }
    });

    // Modified toggle for image button - stays active until reset
    toggleImgSwitch.addEventListener("click", () => {
      const isActive = toggleImgSwitch.classList.contains("active");
      if (!isActive) {
        // Reset background toggle when image is clicked
        bgToggle.classList.remove("active");
        bgToggle.setAttribute("aria-checked", "false");
        if (toggleBackgroundSwitch) {
          toggleBackgroundSwitch.checked = false;
        }

        // Activate image toggle
        toggleImgSwitch.classList.add("active");
        toggleImgSwitch.setAttribute("aria-checked", "true");
        if (toggleImgSwitch) {
          toggleImgSwitch.checked = true;
        }

        console.log("Image mode activated - ready for future container image changes");
      }
    });

    // Modified toggle for color button - stays active until reset
    colorToggle.addEventListener("click", () => {
      const isActive = colorToggle.classList.contains("active");
      if (!isActive) {
        colorToggle.classList.add("active");
        colorToggle.setAttribute("aria-checked", "true");
        if (toggleColorSwitch) {
          toggleColorSwitch.checked = true;
        }
        
        console.log("Color mode activated - ready for font color changes");
      }
    });

    // Modified toggle for background button - resets image when clicked
    bgToggle.addEventListener("click", () => {
      const isActive = bgToggle.classList.contains("active");
      if (!isActive) {
        // Reset image toggle when background is clicked
        toggleImgSwitch.classList.remove("active");
        toggleImgSwitch.setAttribute("aria-checked", "false");
        if (toggleImgSwitch) {
          toggleImgSwitch.checked = false;
        }

        // Activate background toggle
        bgToggle.classList.add("active");
        bgToggle.setAttribute("aria-checked", "true");
        if (toggleBackgroundSwitch) {
          toggleBackgroundSwitch.checked = true;
        }
      }
    });

    resetButton.addEventListener("click", () => {
      // Reset case toggle button
      caseToggle.classList.remove("active");
      caseToggle.setAttribute("aria-checked", "false");
      caseToggle.textContent = "Aa";
      caseToggle.style.fontSize = "1.25rem";

      // Reset font toggle button
      fontToggle.classList.remove("active");
      fontToggle.setAttribute("aria-checked", "false");

      // Reset image toggle button
      toggleImgSwitch.classList.remove("active");
      toggleImgSwitch.setAttribute("aria-checked", "false");

      // Reset color toggle button
      colorToggle.classList.remove("active");
      colorToggle.setAttribute("aria-checked", "false");

      // Reset background toggle button
      bgToggle.classList.remove("active");
      bgToggle.setAttribute("aria-checked", "false");

      // Reset the actual checkboxes (if they exist)
      if (toggleCaseSwitch) {
        toggleCaseSwitch.checked = false;
      }
      if (toggleFontSwitch) {
        toggleFontSwitch.checked = false;
      }
      if (toggleImgSwitch) {
        toggleImgSwitch.checked = false;
      }
      if (toggleColorSwitch) {
        toggleColorSwitch.checked = false;
      }
      if (toggleBackgroundSwitch) {
        toggleBackgroundSwitch.checked = false;
      }

      // Reset the main application state
      if (mainEl) {
        mainEl.style.backgroundBlendMode = originalState.mainElBackgroundBlendMode;
        mainEl.style.filter = originalState.mainElFilter;
      }

      // Reset board styles
      if (boardDiv) {
        boardDiv.style.backgroundColor = originalState.boardDivBackgroundColor;
        boardDiv.style.backgroundImage = originalState.boardDivBackgroundImage;
      }

      // Reset character display
      if (charDiv) {
        charDiv.style.fontFamily = originalState.charDivFontFamily;
        charDiv.style.color = originalState.charDivColor;
        charDiv.textContent = originalState.charText;
      }

      // Reset info text
      if (info) {
        info.textContent = originalState.infoText;
      }

      // Dispatch custom reset event for other scripts to listen to
      document.dispatchEvent(
        new CustomEvent("keyboardReset", {
          detail: { originalState: originalState }
        })
      );

      console.log("Keyboard reset to original state");
    });
  });
</script>