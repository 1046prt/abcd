---
import BaseLayout from "@/layouts/Base";
import "@/assets/styles/vedic.css";
import vedicData from "@/assets/json/vedic.json";

const timeUnits = vedicData.time_units;
---

<BaseLayout meta={{ title: "Vedic Time" }}>
  <div class="container__vedic">
    <script type="text/javascript" async>
      const options = {
        year: "numeric",
        month: "numeric",
        day: "numeric",
        hour: "numeric",
        minute: "numeric",
        second: "numeric",
        hour12: false,
        timeZone: "America/Los_Angeles"
      };

      const fullEnglish = {
        weekday: "long",
        dayPeriod: "long",
        year: "numeric",
        month: "long",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        second: "numeric",
        calendar: "iso8601",
        timeZone: "Asia/Kolkata",
        timeZoneName: "short",
        formatMatcher: "basic",
        hourCycle: "h12"
      };

      const fullHindi = {
        weekday: "long",
        dayPeriod: "long",
        year: "numeric",
        month: "long",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        second: "numeric",
        calendar: "indian",
        timeZone: "Asia/Kolkata",
        numberingSystem: "deva",
        /* timeZoneName: 'shortGeneric', */
        formatMatcher: "basic",
        hourCycle: "h12"
      };

      const styleOption = {
        dateStyle: "full",
        timeStyle: "long",
        calendar: "iso8601", // 'indian',
        /* numberingSystem: 'deva', */
        timeZone: "Asia/Kolkata",
        hour12: false,
        useGrouping: true,
        minimumIntegerDigits: 1
      };

      const dateInEnglish = new Intl.DateTimeFormat("en-us", fullEnglish);
      const samay = new Intl.DateTimeFormat("hi", fullHindi);
      console.log(samay);
      const dateInHindi = new Intl.DateTimeFormat("hi", styleOption);
    </script>

    <div class="tab-buttons">
      <button class="tab-button active" data-tab="tithi">Tithi</button>
      <button class="tab-button" data-tab="converter">Converter</button>
    </div>

    <div id="tithi-tab-content" class="tab-content active">
      <div class="tithi-header">
        <div class="tithi-title-wrapper">
          <h1 class="tithi-title">Tithi</h1>
          <button id="dateToggle" class="date-toggle" aria-label="Toggle date formats">
            <svg class="calendar-icon" viewBox="0 0 24 24" width="24" height="24">
              <path
                fill="currentColor"
                d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V9h14v10zM5 7V5h14v2H5z"
              ></path>
              <path fill="currentColor" d="M7 11h2v2H7zm4 0h2v2h-2zm4 0h2v2h-2zm-8 4h2v2H7zm4 0h2v2h-2zm4 0h2v2h-2z"
              ></path>
            </svg>
          </button>
        </div>
        <div id="dateDisplay" class="date-display">
          <p id="singleDate" class="single-date">Loading date...</p>
          <div id="multiDate" class="multi-date" style="display: none;">
            <p class="date-format"></p>
            <p class="date-format"></p>
            <p class="date-format"></p>
          </div>
        </div>
      </div>
    </div>

    <div id="converter-tab-content" class="tab-content">
      <div class="converter__horizontal">
        <div class="form__group">
          <label for="input__value">Enter a number</label>
          <input type="number" id="input__value" placeholder="e.g. 123" required />
        </div>

        <div class="form__group">
          <label for="from__unit">From</label>
          <select id="from__unit">
            {timeUnits.map((unit) => <option value={unit.name}>{unit.name}</option>)}
          </select>
        </div>

        <button id="swapButton" class="swap-button" aria-label="Swap units">
          <svg class="swap-icon" viewBox="0 0 24 24">
            <path fill="currentColor" d="M9 3L5 7H8V14H10V7H13M16 17V10H14V17H11L15 21L19 17H16Z"></path>
          </svg>
        </button>

        <div class="form__group">
          <label for="to__unit">To</label>
          <select id="to__unit">
            {timeUnits.map((unit) => <option value={unit.name}>{unit.name}</option>)}
          </select>
        </div>
      </div>
      <div id="result" class="result__display in"></div>
    </div>

    <div class="units__timeline-container">
      <h2 class="units__title">Vedic Time Journey</h2>
      <div class="timeline-wrapper">
        <div class="timeline-line"></div>
        {
          timeUnits.map((unit, index) => (
            <div class="timeline-node">
              <div class="timeline-card">
                <div class="unit__header">
                  <h3>{unit.name}</h3>
                </div>
                <div class="unit__details">
                  <div class="unit__value">
                    <span class="icon">üïõ</span>
                    {unit.seconds.toLocaleString()} seconds
                  </div>
                  <div class="unit__value">
                    <span class="icon">‚è≥</span>
                    {unit.minutes.toLocaleString()} minutes
                  </div>
                  <div class="unit__value">
                    <span class="icon">üìÖ</span>
                    {unit.years.toLocaleString()} years
                  </div>
                </div>
              </div>
              <div class="timeline-dot" />
            </div>
          ))
        }
      </div>
    </div>
  </div>

  <script is:inline define:vars={{ timeUnits }}>
    function convert(value, fromUnit, toUnit) {
      const from = timeUnits.find((u) => u.name === fromUnit);
      const to = timeUnits.find((u) => u.name === toUnit);
      if (!from || !to) return null;

      const seconds = value * from.seconds;
      return seconds / to.seconds;
    }

    function updateResult() {
      const inputValue = document.getElementById("input__value");
      const fromUnit = document.getElementById("from__unit");
      const toUnit = document.getElementById("to__unit");
      const resultBox = document.getElementById("result");

      if (inputValue.value && fromUnit.value && toUnit.value) {
        const value = parseFloat(inputValue.value);
        const result = convert(value, fromUnit.value, toUnit.value);
        resultBox.style.display = "block";
        resultBox.textContent = `${value} ${fromUnit.value} = ${result.toLocaleString(undefined, {
          maximumFractionDigits: 4
        })} ${toUnit.value}`;
      } else {
        resultBox.style.display = "none";
      }
    }

    document.addEventListener("DOMContentLoaded", () => {
      // Setup event listeners for converter
      const inputValue = document.getElementById("input__value");
      const fromUnit = document.getElementById("from__unit");
      const toUnit = document.getElementById("to__unit");
      const swapButton = document.getElementById("swapButton");

      if (inputValue) inputValue.addEventListener("input", updateResult);
      if (fromUnit) fromUnit.addEventListener("change", updateResult);
      if (toUnit) toUnit.addEventListener("change", updateResult);

      // Swap button functionality
      if (swapButton) {
        swapButton.addEventListener("click", () => {
          const temp = fromUnit.value;
          fromUnit.value = toUnit.value;
          toUnit.value = temp;

          swapButton.classList.toggle("active");

          updateResult();
        });
      }

      // Tab functionality
      const tabButtons = document.querySelectorAll(".tab-button");
      const tabContents = document.querySelectorAll(".tab-content");

      tabButtons.forEach((button) => {
        button.addEventListener("click", () => {
          // Remove active class from all buttons and contents
          tabButtons.forEach((btn) => btn.classList.remove("active"));
          tabContents.forEach((content) => content.classList.remove("active"));

          // Add active class to clicked button
          button.classList.add("active");

          // Show corresponding tab content
          const targetTab = button.dataset.tab;
          document.getElementById(`${targetTab}-tab-content`).classList.add("active");

          // Call updateResult if switching to converter tab to ensure result is shown if inputs have values
          if (targetTab === "converter") {
            updateResult();
          }
        });
      });

      // Initialize with Tithi tab active
      document.querySelector('.tab-button[data-tab="tithi"]').click(); // Simulate click to activate default tab

      // Tithi date display functionality
      const tithiNames = [
        "‡§™‡•ç‡§∞‡§§‡§ø‡§™‡§¶‡§æ",
        "‡§¶‡•ç‡§µ‡§ø‡§§‡•Ä‡§Ø‡§æ",
        "‡§§‡•É‡§§‡•Ä‡§Ø‡§æ",
        "‡§ö‡§§‡•Å‡§∞‡•ç‡§•‡•Ä",
        "‡§™‡§Ç‡§ö‡§Æ‡•Ä",
        "‡§∑‡§∑‡•ç‡§†‡•Ä",
        "‡§∏‡§™‡•ç‡§§‡§Æ‡•Ä",
        "‡§Ö‡§∑‡•ç‡§ü‡§Æ‡•Ä",
        "‡§®‡§µ‡§Æ‡•Ä",
        "‡§¶‡§∂‡§Æ‡•Ä",
        "‡§è‡§ï‡§æ‡§¶‡§∂‡•Ä",
        "‡§¶‡•ç‡§µ‡§æ‡§¶‡§∂‡•Ä",
        "‡§§‡•ç‡§∞‡§Ø‡•ã‡§¶‡§∂‡•Ä",
        "‡§ö‡§§‡•Å‡§∞‡•ç‡§¶‡§∂‡•Ä",
        "‡§™‡•Ç‡§∞‡•ç‡§£‡§ø‡§Æ‡§æ",
        "‡§Ö‡§Æ‡§æ‡§µ‡§∏‡•ç‡§Ø‡§æ"
      ];

      const getLunarDate = (gregorianDay) => {
        // Calculate the lunar day (1-30) based on the gregorian day
        const lunarDay = ((gregorianDay - 1) % 15) + 1; // Ensure it wraps correctly (1-15)

        // Calculate the paksha
        const paksha = gregorianDay <= 15 ? "‡§∂‡•Å‡§ï‡•ç‡§≤ ‡§™‡§ï‡•ç‡§∑" : "‡§ï‡•É‡§∑‡•ç‡§£ ‡§™‡§ï‡•ç‡§∑";

        // Determine tithi
        const tithi = lunarDay - 1;
        console.log({ tithi });

        return {
          paksha,
          tithi: tithiNames[tithi]
        };
      };

      const dateToggle = document.getElementById("dateToggle");
      const singleDate = document.getElementById("singleDate");
      const multiDate = document.getElementById("multiDate");
      const dateFormats = document.querySelectorAll(".date-format");

      function getEnglishDate() {
        return new Date().toLocaleString("en-US", {
          weekday: "long",
          year: "numeric",
          month: "long",
          day: "numeric",
          hour: "2-digit",
          minute: "2-digit",
          second: "2-digit"
        });
      }

      function getHindiDate() {
        return new Date().toLocaleString("hi-IN", {
          weekday: "long",
          year: "numeric",
          month: "long",
          day: "numeric",
          hour: "2-digit",
          minute: "2-digit",
          second: "2-digit"
        });
      }

      function getVedicDate() {
        const today = new Date();
        const gregorianDay = today.getDate(); // Get current day of the month (1-31)
        const { paksha, tithi } = getLunarDate(gregorianDay);
        return `Vedic Date: ${tithi} (${paksha})`;
      }

      function updateDates() {
        const dates = [getEnglishDate(), getHindiDate(), getVedicDate()];
        if (singleDate) singleDate.textContent = dates[0];

        dateFormats.forEach((format, index) => {
          if (format) format.textContent = dates[index];
        });
      }

      if (dateToggle) {
        dateToggle.addEventListener("click", () => {
          if (multiDate && singleDate) {
            if (multiDate.style.display === "none") {
              // Show multiple dates
              multiDate.style.display = "block";
              singleDate.style.display = "none";
              dateToggle.classList.add("active"); // Add active class
            } else {
              // Show single date
              multiDate.style.display = "none";
              singleDate.style.display = "block";
              dateToggle.classList.remove("active"); // Remove active class
            }
          }
        });
      }

      // Initial update and set interval for Tithi
      updateDates();
      setInterval(updateDates, 1000);

      // Add scroll effect to title for timeline
      const timelineContainer = document.querySelector(".units__timeline-container");
      const title = document.querySelector(".units__title");

      if (timelineContainer && title) {
        timelineContainer.addEventListener("scroll", () => {
          if (timelineContainer.scrollTop > 10) {
            title.classList.add("scrolled");
          } else {
            title.classList.remove("scrolled");
          }
        });
      }
    });
  </script>
</BaseLayout>
