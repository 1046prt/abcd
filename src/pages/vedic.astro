---
import BaseLayout from "@/layouts/Base";
import "@/assets/styles/vedic.css";
import vedicData from "@/assets/json/vedic.json";

const timeUnits = vedicData.time_units;
---

<BaseLayout meta={{ title: "Vedic Time" }}>
  <div class="container__vedic">
    <script type="text/javascript" async>
    const options = {
      year: "numeric",
      month: "numeric",
      day: "numeric",
      hour: "numeric",
      minute: "numeric",
      second: "numeric",
      hour12: false,
      timeZone: "America/Los_Angeles",
    };

    const fullEnglish = {
      weekday: 'long',
      dayPeriod: 'long',
      year: 'numeric',
      month: 'long',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: 'numeric',
      calendar: 'iso8601',
      timeZone: 'Asia/Kolkata',
      timeZoneName: 'short',
      formatMatcher: 'basic',
      hourCycle: 'h12',
    };

    const fullHindi = {
      weekday: 'long',
      dayPeriod: 'long',
      year: 'numeric',
      month: 'long',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: 'numeric',
      calendar: 'indian',
      timeZone: 'Asia/Kolkata',
      numberingSystem: 'deva',
      /* timeZoneName: 'shortGeneric', */
      formatMatcher: 'basic',
      hourCycle: 'h12',
    };

    const styleOption = {
      dateStyle: 'full',
      timeStyle: 'long',
      calendar:  'iso8601', // 'indian',
      /* numberingSystem: 'deva', */
      timeZone: 'Asia/Kolkata',
      hour12: false,
      useGrouping: true,
      minimumIntegerDigits: 1
    };

    const dateInEnglish = new Intl.DateTimeFormat("en-us", fullEnglish);
    const samay = new Intl.DateTimeFormat("hi", fullHindi);
    console.log(samay);
    const dateInHindi = new Intl.DateTimeFormat('hi',styleOption);
    

  </script>

      <!-- Updated Tithi header with SVG icon as fallback -->
      <div class="tithi-header">
        <div class="tithi-title-wrapper">
          <h1 class="tithi-title">Tithi</h1>
          <button id="dateToggle" class="date-toggle" aria-label="Toggle date formats">
            <svg class="calendar-icon" viewBox="0 0 24 24" width="24" height="24">
              <path fill="currentColor" d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V9h14v10zM5 7V5h14v2H5z"/>
              <path fill="currentColor" d="M7 11h2v2H7zm4 0h2v2h-2zm4 0h2v2h-2zm-8 4h2v2H7zm4 0h2v2h-2zm4 0h2v2h-2z"/>
            </svg>
          </button>
        </div>
        <div id="dateDisplay" class="date-display">
          <p id="singleDate" class="single-date">Loading date...</p>
          <div id="multiDate" class="multi-date" style="display: none;">
            <p class="date-format"></p>
            <p class="date-format"></p>
            <p class="date-format"></p>
          </div>
        </div>
      </div>
<script>
    const tithiNames = [
      "‡§™‡•ç‡§∞‡§§‡§ø‡§™‡§¶‡§æ", "‡§¶‡•ç‡§µ‡§ø‡§§‡•Ä‡§Ø‡§æ", "‡§§‡•É‡§§‡•Ä‡§Ø‡§æ", "‡§ö‡§§‡•Å‡§∞‡•ç‡§•‡•Ä", "‡§™‡§Ç‡§ö‡§Æ‡•Ä", "‡§∑‡§∑‡•ç‡§†‡•Ä",
      "‡§∏‡§™‡•ç‡§§‡§Æ‡•Ä", "‡§Ö‡§∑‡•ç‡§ü‡§Æ‡•Ä", "‡§®‡§µ‡§Æ‡•Ä", "‡§¶‡§∂‡§Æ‡•Ä", "‡§è‡§ï‡§æ‡§¶‡§∂‡•Ä", "‡§¶‡•ç‡§µ‡§æ‡§¶‡§∂‡•Ä",
      "‡§§‡•ç‡§∞‡§Ø‡•ã‡§¶‡§∂‡•Ä", "‡§ö‡§§‡•Å‡§∞‡•ç‡§¶‡§∂‡•Ä", "‡§™‡•Ç‡§∞‡•ç‡§£‡§ø‡§Æ‡§æ", "‡§Ö‡§Æ‡§æ‡§µ‡§∏‡•ç‡§Ø‡§æ"
    ];

    const getLunarDate = (gregorianDay) => {
      // Calculate the lunar day (1-30) based on the gregorian day
      const lunarDay = (gregorianDay - 1) % 15 + 1; // Ensure it wraps correctly (1-15)

      // Calculate the paksha
      const paksha = gregorianDay <= 15 ? "‡§∂‡•Å‡§ï‡•ç‡§≤ ‡§™‡§ï‡•ç‡§∑" : "‡§ï‡•É‡§∑‡•ç‡§£ ‡§™‡§ï‡•ç‡§∑";

      // Determine tithi
      const tithi = lunarDay - 1;
      console.log({tithi});

      return {
        paksha,
        tithi: tithiNames[tithi]
      };
    };
    const hindu = document.querySelector('[data-id="hindu"]');
    const hindi = document.querySelector('[data-id="hindi"]');
    const english = document.querySelector('[data-id="english"]');
    const timeElem = document.querySelector('time');

    const renderClock = () => {
      const today = new Date();
      const eng =  dateInEnglish.format(today);
      const hi = samay.format(today);
      console.log(samay.formatToParts());
      const hindi_date = dateInHindi.format(today);
      /* const { paksha, tithi } = getLunarDate(); */
      /* console.log({paksha, tithi}) */
      hindi.innerHTML = hindi_date;
      hindu.innerHTML =  hi;
      english.innerHTML = eng;
      const h = today.getHours();
      const m = today.getMinutes();
      const s = today.getSeconds();
      timeElem.style.setProperty("--h", h*15);
      timeElem.style.setProperty("--m", m);
      timeElem.style.setProperty("--s", s*10);
      timeElem.style.backgroundColor  = `hsl(${h} ${m} ${s})`;
    };
    renderClock();
    setInterval(renderClock, 1000);
  </script>
    <div class="vedic__layout">
      <!-- Converter Card -->
      <div class="converter__card">
        <form id="converter__form" class="converter__form">
          <div class="form__group">
            <label for="input__value">Enter Value</label>
            <input type="number" id="input__value" placeholder="Enter value" required />
          </div>

          <div class="form__grid">
            {
              ["From", "To"].map((label) => (
                <div class="form__group">
                  <label for={`${label.toLowerCase()}__unit`}>{label}</label>
                  <select id={`${label.toLowerCase()}__unit`}>
                    {timeUnits.map((unit) => (
                      <option value={unit.name}>{unit.name}</option>
                    ))}
                  </select>
                </div>
              ))
            }
              <button type="button" id="swapButton" class="swap-button" aria-label="Swap units">
    <svg class="swap-icon" viewBox="0 0 24 24">
      <path fill="currentColor" d="M9 3L5 7H8V14H10V7H13M16 17V10H14V17H11L15 21L19 17H16Z" />
    </svg>
  </button>
          </div>

          <button type="submit" class="convert__button">Convert</button>
          <div id="result" class="result__display"></div>
        </form>
      </div>

      <!-- Units Reference -->
      <div class="units__card">
        <h2 class="units__title">Vedic Time Units</h2>
        <div class="units__grid">
          {
            timeUnits.map((unit) => (
              <div class="unit__item">
                <div class="unit__header">
                  <h3>{unit.name}</h3>
                  <span class="approx">‚âà</span>
                </div>
                <div class="unit__details">
                  <div class="unit__value">
                    <span class="icon">üïõ</span>
                    {unit.seconds.toLocaleString()} seconds
                  </div>
                  <div class="unit__value">
                    <span class="icon">‚è≥</span>
                    {unit.minutes.toLocaleString()} minutes
                  </div>
                  <div class="unit__value">
                    <span class="icon">üìÖ</span>
                    {unit.years.toLocaleString()} years
                  </div>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<script is:inline define:vars={{ timeUnits }}>
  function convert(value, fromUnit, toUnit) {
    const from = timeUnits.find((u) => u.name === fromUnit);
    const to = timeUnits.find((u) => u.name === toUnit);
    if (!from || !to) return null;

    const seconds = value * from.seconds;
    return seconds / to.seconds;
  }

  function updateResult(value, fromUnit, toUnit) {
    const result = convert(value, fromUnit, toUnit);
    const resultBox = document.getElementById("result");
    resultBox.style.display = "block";
    resultBox.textContent = `${value} ${fromUnit} = ${result.toLocaleString(undefined, {
      maximumFractionDigits: 4
    })} ${toUnit}`;
  }

  document.getElementById("converter__form").addEventListener("submit", (e) => {
    e.preventDefault();
    const value = parseFloat(document.getElementById("input__value").value);
    const fromUnit = document.getElementById("from__unit").value;
    const toUnit = document.getElementById("to__unit").value;
    updateResult(value, fromUnit, toUnit);
  });

  // Swap button functionality
  document.getElementById("swapButton").addEventListener("click", () => {
    const swapButton = document.getElementById("swapButton");
    const fromUnit = document.getElementById("from__unit");
    const toUnit = document.getElementById("to__unit");
    const inputValue = document.getElementById("input__value");
    
    // Toggle active state
    swapButton.classList.toggle("active");
    
    // Swap the values
    const temp = fromUnit.value;
    fromUnit.value = toUnit.value;
    toUnit.value = temp;
    
    // If there's a value, calculate the new result
    if (inputValue.value) {
      const value = parseFloat(inputValue.value);
      updateResult(value, fromUnit.value, toUnit.value);
    }
  });
</script>
<script is:inline>
document.addEventListener('DOMContentLoaded', () => {
  const dateToggle = document.getElementById('dateToggle');
  const singleDate = document.getElementById('singleDate');
  const multiDate = document.getElementById('multiDate');
  const dateFormats = document.querySelectorAll('.date-format');

  function getEnglishDate() {
    return new Date().toLocaleString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  }

  function getHindiDate() {
    return new Date().toLocaleString('hi-IN', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  }

  function getVedicDate() {
    // Replace with your actual Vedic date calculation
    return "Vedic Date: " + new Date().toLocaleString();
  }

  function updateDates() {
    const dates = [getEnglishDate(), getHindiDate(), getVedicDate()];
    singleDate.textContent = dates[0];
    
    dateFormats.forEach((format, index) => {
      format.textContent = dates[index];
    });
  }


  if (dateToggle) {
    dateToggle.addEventListener('click', () => {
      if (multiDate.style.display === 'none') {
        // Show multiple dates
        multiDate.style.display = 'block';
        singleDate.style.display = 'none';
        dateToggle.classList.add('active'); // Add active class
      } else {
        // Show single date
        multiDate.style.display = 'none';
        singleDate.style.display = 'block';
        dateToggle.classList.remove('active'); // Remove active class
      }
    });
  }


  // Initial update and set interval
  updateDates();
  setInterval(updateDates, 1000);
});
</script>

