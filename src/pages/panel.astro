---
import "@/assets/styles/panel.css";
import Help from "@/components/Help.astro";
import BaseLayout from "@/layouts/Base";
import "@/assets/styles/common.css";
---

<BaseLayout meta={{ title: "Panel" }}>
  <Fragment slot="header-right">
    <Help
      title="Panel"
      description="Press any arrow key from keyboard to cycle through the letters, up/down arrows changes the orientation to vertical and left/right keys changes to horizontal or  press any letter key, that letter will appears."
    />
  </Fragment>
  <article class="tv container__panel">
    <section id="option-box" class="panel__options">
      <label class="vertical" for="vertical">
        <input type="radio" class="orientation" name="orientation" id="vertical" value="X" />
        <span class="icon">↕️</span>
      </label>

      <label class="horizontal" for="horizontal">
        <input type="radio" class="orientation" name="orientation" id="horizontal" value="Y" />
        <span class="icon">↔️</span>
      </label>
    </section>

    <section class="scene">
      <letter-panel>
        <div class="panel" id="panel"></div>
      </letter-panel>
    </section>
  </article>
</BaseLayout>
<script>
  enum ArrowKeys {
    LEFT = 37,
    UP = 38,
    RIGHT = 39,
    DOWN = 40
  }
  // Define the behaviour for our new type of HTML element.
  class LetterPanel extends HTMLElement {
    #panel;
    #orientationPanel;
    #orientation = "Y";
    #selectedIndex = 0;
    #radius = "0px";
    #theta = 0;
    #angle = "0deg";

    constructor() {
      super();
      this.#panel = this.querySelector("#panel") as HTMLElement;
      this.#orientationPanel = document.querySelectorAll(".orientation");
      this.#emitEvent();
    }

    connectedCallback() {
      this.buildPanel();
      //this.changePanel(); // TODO: uncomment to see complete letter panel on load
      this.rotatePanel({ by: "X" });
    }

    #emitEvent() {
      document.addEventListener("keyup", (e: KeyboardEvent) => {
        const { charCode, code, keyCode, key } = e;
        console.log({ charCode, code, keyCode, key });
        this.onKeyChange(keyCode);
      });

      this.#orientationPanel.forEach((radio) => {
        radio.addEventListener(
          "click",
          (e: Event) => {
            const target = e.target as HTMLInputElement;
            this.#orientation = target.value;
            this.changePanel();
            target.blur(); //unfocus the radio button
          },
          false
        );
      });
    }

    doTheMath() {
      const cellWidth = this.#panel.offsetWidth;
      const cellCount = 26; //Number(cellRange.value);
      const halfCell = cellWidth / 2;
      const divideBy = Math.tan(Math.PI / cellCount);
      this.#radius = Math.round(halfCell / divideBy) + "px";
      this.#theta = 360 / cellCount;
      this.#angle = this.#theta * this.#selectedIndex + "deg";
    }

    buildPanel(num = 26) {
      const fragment = document.createDocumentFragment();
      for (let i = 0; i < num; i++) {
        const div = document.createElement("div");
        div.classList.add("panel__cell");
        div.textContent = String.fromCodePoint(65 + i); // A to Z
        fragment.appendChild(div);
      }
      this.#panel.innerHTML = "";
      this.#panel.appendChild(fragment);
    }

    changePanel() {
      //this.buildPanel(cellCount);
      const cells = document.querySelectorAll(".panel__cell") as unknown as HTMLElement[];
      this.doTheMath();
      cells.forEach((cell, i) => {
        const cellAngle = this.#theta * i;
        const transformString = `rotate${this.#orientation}(${cellAngle}deg) translateZ(${this.#radius})`;
        cell.style.transform = transformString;
      });
      this.rotatePanel({ by: this.#orientation });
    }

    rotatePanel({ by = "X" }) {
      this.doTheMath();
      const transformString = `translateZ(-${this.#radius}) rotate${by}(${this.#angle})`;
      this.#panel.style.transform = transformString;
    }

    onKeyChange(code: number) {
      switch (code) {
        case ArrowKeys.RIGHT: {
          this.#selectedIndex++;
          this.#orientation = "Y";
          break;
        }
        case ArrowKeys.LEFT: {
          this.#selectedIndex--;
          this.#orientation = "Y";
          break;
        }
        case ArrowKeys.UP: {
          this.#selectedIndex++;
          this.#orientation = "X";
          break;
        }
        case ArrowKeys.DOWN: {
          this.#selectedIndex--;
          this.#orientation = "X";
          break;
        }
        default: {
          //if (isAlphabet(keyCode)) {
          this.#selectedIndex = 65 - code;
          //} else {
          //  this.#selectedIndex--;
          //}
        }
      }
      this.changePanel();
    }
  }
  // Tell the browser to use our LetterPanel class for <letter-panel> elements.
  customElements.define("letter-panel", LetterPanel);
</script>
