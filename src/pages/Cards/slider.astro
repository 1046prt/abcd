---
import { alphabetMapper } from "@/mappers/alphabet";
import { IMAGE_DIR } from "@/utils/constants";
import Base from "@/layouts/Base";
import BackButton from "@/components/ui/backButton.astro";
import Help from "@/components/Help.astro";

const pageTitle = "Slider | Interactive Alphabet";
const pageDescription = "Explore the alphabet through interactive images. Click or use arrow keys to slide.";

const pageMeta = {
  title: pageTitle,
  description: pageDescription
};

interface AlphabetItem {
  key: string;
  value: string;
  desc: string;
}

const items: Record<string, AlphabetItem> = alphabetMapper.reduce((acc, { key, value }) => {
  acc[key.toUpperCase()] = {
    key: key.toUpperCase(),
    value,
    desc: `${value} representing the letter ${key.toUpperCase()}`
  };
  return acc;
}, {} as Record<string, AlphabetItem>);

const entries = Object.entries(items);
const count = entries.length;
---

<Base meta={pageMeta}>
  <Fragment slot="header-right">
    <div class="header-tools-wrapper"></div>
    <Help
      title="Alphabet Gallery"
      description="Click images or use arrow keys to navigate. Active item shows details."
    />
  </Fragment>
  <BackButton/>
  
  <main class="gallery-page">
    <div class="gallery-wrapper">
      <section class="gallery-container">
        <header class="gallery-header">
          <h1 class="gallery-title">Interactive Alphabet</h1>
        </header>
        
        <div class="gallery-controls">
          <button class="nav-button prev-button" aria-label="Previous items" id="prevBtn">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
              <path d="M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"/>
            </svg>
          </button>
          
          <div class="gallery-scroller" id="scroller">
            <div class="gallery-track">
              {entries.map(([key, item], index) => (
                <div class="gallery-item-container">
                  <article 
                    class="gallery-item"
                    data-letter={key}
                    data-index={index}
                    tabindex="0"
                  >
                    <div class="item-image-container">
                      <img
                        src={`${IMAGE_DIR}/${item.value}.jpg`}
                        alt={item.desc}
                        loading="lazy"
                        class="item-image"
                      />
                    </div>
                  </article>
                  <div class="item-details">
                    <h2 class="letter">{key}</h2>
                    <p class="item-desc">{item.value}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
          
          <button class="nav-button next-button" aria-label="Next items" id="nextBtn">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
              <path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"/>
            </svg>
          </button>
        </div>
      </section>
    </div>
  </main>

<style>
:root {
  --item-width: 400px;
  --item-height: 400px;
  --item-gap: 40px;
  --active-scale: 1.05;
  --transition-duration: 0.3s;
  --ease-out: cubic-bezier(0.25, 0.46, 0.45, 0.94);
  --scrollbar-height: 6px;
  --nav-button-size: 48px;
  --active-border: 4px solid #3b82f6;
}

.gallery-page {
  width: 100%;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  overflow-x: hidden;
}

.gallery-wrapper {
  width: 100%;
  padding: 2rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.gallery-container {
  width: 100%;
  max-width: 70rem;
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.gallery-header {
  text-align: center;
}

.gallery-title {
  font-size: 2.5rem;
  font-weight: 700;
  background: linear-gradient(135deg, #818cf8, #6a7fe0, #3d60eb);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  margin: 0;
  text-shadow: 0 4px 20px rgba(129, 140, 248, 0.3);
}

.gallery-controls {
  display: flex;
  align-items: center;
  gap: 20px;
  position: relative;
}

.gallery-scroller {
  width: 100%;
  height: calc(var(--item-height) + 200px);
  overflow-x: auto;
  overflow-y: hidden;
  scroll-behavior: smooth;
  padding: 2rem 0;
  -webkit-overflow-scrolling: touch;
  cursor: grab;
  flex-grow: 1;
}

.gallery-scroller:active {
  cursor: grabbing;
}

.gallery-track {
  display: inline-flex;
  gap: var(--item-gap);
  padding: 0 calc((100% - var(--item-width)) / 2);
  height: 100%;
}

.nav-button {
  width: var(--nav-button-size);
  height: var(--nav-button-size);
  border-radius: 50%;
  background: rgba(129, 140, 248, 0.2);
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.2s ease;
  flex-shrink: 0;
  outline: none;
}

.nav-button:hover {
  background: rgba(129, 140, 248, 0.4);
  transform: scale(1.1);
}

.nav-button:focus-visible {
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.5);
}

.nav-button svg {
  fill: #3b82f6;
  width: 24px;
  height: 24px;
}

.nav-button:disabled {
  opacity: 0.3;
  cursor: not-allowed;
}

.gallery-item-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1.5rem;
  height: 100%;
}

.gallery-item {
  width: var(--item-width);
  height: var(--item-height);
  flex: 0 0 auto;
  border-radius: 0.75rem;
  overflow: hidden;
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
  transform: scale(1);
  transition: all var(--transition-duration) var(--ease-out);
  cursor: pointer;
  position: relative;
  border: 2px solid transparent;
}

.gallery-item.active {
  transform: scale(var(--active-scale));
  box-shadow: 0 12px 32px rgba(0, 0, 0, 0.2);
  z-index: 10;
  border: var(--active-border);
  outline: none;
}

.gallery-item:focus-visible {
  outline: 3px solid #3b82f6;
  outline-offset: 3px;
}

.item-image-container {
  width: 100%;
  height: 100%;
  overflow: hidden;
}

.item-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.5s var(--ease-out);
}

.gallery-item.active .item-image {
  transform: scale(1.05);
}

.item-details {
  width: 100%;
  max-width: var(--item-width);
  opacity: 0;
  transform: translateY(20px);
  transition: all var(--transition-duration) var(--ease-out);
  text-align: center;
  padding: 0 1rem;
  pointer-events: none;
}

.gallery-item.active + .item-details {
  opacity: 1;
  transform: translateY(0);
}

.letter {
  font-size: 2.5rem;
  font-weight: 900;
  color: #1e40af;
  margin: 0;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.item-desc {
  font-size: 1.5rem;
  color: #4b5563;
  margin: 0.5rem 0 0;
  font-weight: 600;
}

.gallery-scroller::-webkit-scrollbar {
  height: var(--scrollbar-height);
}

.gallery-scroller::-webkit-scrollbar-track {
  background: rgba(0, 0, 0, 0.05);
  border-radius: calc(var(--scrollbar-height) / 2);
  margin: 0 calc((100% - var(--item-width)) / 2);
}

.gallery-scroller::-webkit-scrollbar-thumb {
  background: rgba(129, 140, 248, 0.6);
  border-radius: calc(var(--scrollbar-height) / 2);
}

.gallery-scroller::-webkit-scrollbar-thumb:hover {
  background: rgba(129, 140, 248, 0.8);
}


.gallery-scroller {
  scrollbar-width: thin;
  scrollbar-color: rgba(129, 140, 248, 0.6) rgba(0, 0, 0, 0.05);
}

/* Responsive adjustments */
@media (max-width: 1600px) {
  :root {
    --item-width: 360px;
    --item-height: 360px;
  }
}

@media (max-width: 1200px) {
  :root {
    --item-width: 320px;
    --item-height: 320px;
    --item-gap: 30px;
    --nav-button-size: 40px;
  }
}

@media (max-width: 900px) {
  :root {
    --item-width: 280px;
    --item-height: 280px;
    --item-gap: 25px;
  }
  
  .gallery-title {
    font-size: 2rem;
  }
  
  .letter {
    font-size: 2rem;
  }
  
  .item-desc {
    font-size: 1.25rem;
  }
}

@media (max-width: 600px) {
  :root {
    --item-width: 240px;
    --item-height: 240px;
    --item-gap: 20px;
    --scrollbar-height: 4px;
    --nav-button-size: 36px;
  }
  
  .gallery-wrapper {
    padding: 1.5rem;
  }
  
  .gallery-title {
    font-size: 1.75rem;
  }
  
  .letter {
    font-size: 1.75rem;
  }
  
  .item-desc {
    font-size: 1.1rem;
  }
  
  .nav-button svg {
    width: 20px;
    height: 20px;
  }
}
</style>

<script is:inline>
const sounds = {
  snap: new Audio('https://assets.codepen.io/2585/snap.mp3'),
  pop: new Audio('https://assets.codepen.io/2585/pop.m4a'),
};

document.addEventListener('DOMContentLoaded', () => {
  const scroller = document.getElementById('scroller');
  const prevBtn = document.getElementById('prevBtn');
  const nextBtn = document.getElementById('nextBtn');
  const items = Array.from(document.querySelectorAll('.gallery-item'));
  const details = Array.from(document.querySelectorAll('.item-details'));
  let activeIndex = 0;
  
  // Initialize first item as active
  items[activeIndex].classList.add('active');
  details[activeIndex].style.opacity = '1';
  details[activeIndex].style.transform = 'translateY(0)';
  
  // Navigation functions
  const navigateTo = (index) => {
    // Validate index
    index = Math.max(0, Math.min(index, items.length - 1));
    
    // Play sound based on navigation direction
    if (index < activeIndex) {
      sounds.snap.play().catch((error) => console.error('Error playing snap sound:', error));
    } else if (index > activeIndex) {
      sounds.pop.play().catch((error) => console.error('Error playing pop sound:', error));
    }
    
    // Update active state
    items[activeIndex].classList.remove('active');
    details[activeIndex].style.opacity = '0';
    details[activeIndex].style.transform = 'translateY(20px)';
    
    activeIndex = index;
    
    items[activeIndex].classList.add('active');
    details[activeIndex].style.opacity = '1';
    details[activeIndex].style.transform = 'translateY(0)';
    
    // Center the item
    items[activeIndex].scrollIntoView({
      behavior: 'smooth',
      block: 'nearest',
      inline: 'center'
    });
  };
  
  // Navigation buttons
  prevBtn.addEventListener('click', () => navigateTo(activeIndex - 1));
  nextBtn.addEventListener('click', () => navigateTo(activeIndex + 1));
  
  // Keyboard navigation for buttons
  prevBtn.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      navigateTo(activeIndex - 1);
    }
  });
  
  nextBtn.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      navigateTo(activeIndex + 1);
    }
  });
  
  // Click on items
  items.forEach((item, index) => {
    item.addEventListener('click', () => navigateTo(index));
    
    // Keyboard navigation for items
    item.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        navigateTo(index);
      }
    });
  });
  
  // Global keyboard navigation
  document.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowLeft') {
      e.preventDefault();
      navigateTo(activeIndex - 1);
    } else if (e.key === 'ArrowRight') {
      e.preventDefault();
      navigateTo(activeIndex + 1);
    }
  });
  
  // Convert vertical scroll to horizontal
  scroller.addEventListener('wheel', (e) => {
    if (Math.abs(e.deltaY) > Math.abs(e.deltaX)) {
      e.preventDefault();
      scroller.scrollLeft += e.deltaY;
    }
  }, { passive: false });
});
</script>

</Base>