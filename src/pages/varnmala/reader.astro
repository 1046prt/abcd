---
import "@/assets/styles/varnmala/reader.css";
import Help from "@/components/Help.astro";
import BaseLayout from "@/layouts/Base";
import BackButton from "@/components/ui/backButton.astro";
---

<BaseLayout meta={{ title: "Audio Reader" }}>
  <Fragment slot="header-right">
    <div class="action">
      <button type="button" title="click audio" id="mute" class="mute-button mute-button-audio"></button>
    </div>
    
    <!-- New Voices Dropdown Structure -->
    <div class="voices-dropdown">
      <button type="button" id="voices-btn" class="voices-btn">
        <span id="selected-voice-text">Voices</span> ‚ñº
      </button>
      <div id="voices-options" class="voices-options">
        <div data-name="mudra" class="voice-option">Mudra</div>
        <div data-name="rutvi" class="voice-option">Rutvi</div>
      </div>
    </div>

    <Help
      title="Reader"
      description="Press any letter key (A-Z) to display it with a related emoji. Use the Voices dropdown to change voices, and use the audio button to mute/unmute sounds."
    />
  </Fragment>

  <BackButton />
  <article id="container__reader" class="container__reader">aüçé</article>
  <section class="section--audio hide">
    <audio id="audioPlayer" controlslist="nodownload" controls autoplay></audio>
  </section>
  <script>
    // JavaScript will be updated in the next step
    import { getRandomValue, isAlphabet, isNumber } from "@/utils/index";
    import { emojiList } from "@/mappers/alphabet";

    const mainBlock = document.querySelector("#container__reader") as HTMLElement;
    const muteButton = document.querySelector("#mute") as HTMLButtonElement;
    const audioPlayer = document.querySelector("#audioPlayer") as HTMLAudioElement;

    // Dropdown elements
    const voicesButton = document.querySelector("#voices-btn") as HTMLButtonElement;
    const selectedVoiceText = document.querySelector("#selected-voice-text") as HTMLSpanElement;
    const voicesOptionsContainer = document.querySelector("#voices-options") as HTMLElement;
    const voiceOptionElements = Array.from(voicesOptionsContainer.querySelectorAll(".voice-option")) as HTMLElement[];

    let speakerName: string | null = null; // Default to null
    let isMuted = false;

    function setSpeaker(name: string | null | undefined, displayText: string) {
      speakerName = name ?? null;
      
      voiceOptionElements.forEach(opt => {
        opt.classList.toggle("active", opt.dataset.name === name);
      });
      if (voicesOptionsContainer) {
        voicesOptionsContainer.classList.remove("show");
      }
    }

    // Initialize with a default speaker
    if (voiceOptionElements.length > 0) {
      const defaultSpeakerElement = voiceOptionElements[0]; 
      setSpeaker(defaultSpeakerElement.dataset.name, defaultSpeakerElement.textContent || "Mudra");
    } else {
      setSpeaker(null, "Voices"); // Fallback if no options
    }

    // Toggle dropdown visibility
    if (voicesButton) {
      voicesButton.addEventListener("click", (e) => {
        e.stopPropagation(); // Prevent click from immediately closing
        voicesOptionsContainer?.classList.toggle("show");
      });
    }

    // Handle voice option selection
    voiceOptionElements.forEach(option => {
      option.addEventListener("click", (e) => {
        e.stopPropagation();
        const target = e.currentTarget as HTMLElement;
        setSpeaker(target.dataset.name, target.textContent || "Voice");
      });
    });

    // Close dropdown if clicked outside
    document.addEventListener("click", (e) => {
      if (voicesButton && !voicesButton.contains(e.target as Node) &&
          voicesOptionsContainer && !voicesOptionsContainer.contains(e.target as Node)) {
        voicesOptionsContainer.classList.remove("show");
      }
    });

    // --- Your existing script logic below ---
    if (muteButton) {
      muteButton.addEventListener("click", (e: MouseEvent) => {
        isMuted = !isMuted;
        audioPlayer.muted = isMuted;
        const target = e.target as HTMLButtonElement;
        target.classList.toggle("mute");
      });
    }
    
    const getEmoji = (letter: string): string => {
      type List = { [key: string]: number[] };
      const upperCase = letter.toUpperCase();
      const list = (emojiList as List)[upperCase];
      if (list && list.length) { // Check if list exists and has items
        const codePoint = getRandomValue(list);
        return String.fromCodePoint(codePoint);
      }
      return ""; // Return empty string if no emoji
    };

    const attachAudio = (key: string, isNumberSound = false) => {
      if (!speakerName) {
        console.warn("No speaker selected. Cannot play audio.");
        return;
      }

      let keyName;
      let location = "/assets/media/"; // Make sure this path is correct
      if (isNumberSound) {
        keyName = key.replace("Digit", "");
        location += "numbers";
      } else {
        keyName = key.replace("Key", "").toLowerCase();
        location += "alphabets";
      }
      const source = `${location}/${speakerName}/${keyName}.ogg`;
      
      if (audioPlayer) {
        audioPlayer.src = source;
        audioPlayer.load();
        audioPlayer.oncanplaythrough = async () => {
          if (!isMuted) {
            try {
              await audioPlayer.play();
            } catch (playError: unknown) {
              if (playError instanceof Error && (playError.name === "NotAllowedError" || playError.name === "NotSupportedError")) {
                console.error(`Audio play error for ${source}: ${playError.name}. User interaction might be required.`);
              } else {
                console.error(`Audio play error for ${source}:`, playError);
              }
            }
          }
        };
        audioPlayer.onerror = (e) => {
          console.error(`Error loading audio source: ${source}`, audioPlayer.error);
        };
      }
    };

    const isNonPrintingKey = (e: KeyboardEvent): boolean => {
      const { altKey, ctrlKey, metaKey, shiftKey } = e;
      return metaKey || ctrlKey || shiftKey || altKey;
    };

    document.addEventListener("keydown", (e: KeyboardEvent) => {
      const { key, keyCode, which, code } = e;
      if (!mainBlock) return;

      if (!isNonPrintingKey(e)) {
        if (isAlphabet(which)) {
          const emoji = getEmoji(key);
          mainBlock.innerHTML = key + emoji;
          if (muteButton) attachAudio(code); // Check muteButton exists
        } else if (isNumber(keyCode)) {
          mainBlock.innerHTML = key;
          if (muteButton) attachAudio(code, true); // Check muteButton exists
        } else {
          const x = String.fromCodePoint(112080); // Consider if this is needed
          mainBlock.innerHTML = x;
        }
      }
    });
  </script>
</BaseLayout>
