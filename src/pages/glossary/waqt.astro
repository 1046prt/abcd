---
import BaseLayout from "../../layouts/Base.astro";
import BackButton from "../../components/ui/backButton.astro";

import "../../assets/styles/varnmala/greek-alphabet.css"; // General styles, adjust if needed
import "../../assets/styles/glossary/waqt.css"; 

const pageTitle = "Waqt (Times of Day)";

interface WaqtEntry {
  id: string;
  englishTerm: string;
  hindiTranslation: string;
  description: string;
  icon: string;
}

const waqtData: WaqtEntry[] = [
  {
    id: "dawn",
    englishTerm: "Dawn",
    hindiTranslation: "‡§≠‡•ã‡§∞ (Bhor), ‡§∏‡•Å‡§¨‡§π (Subah)",
    description: "The first light of day before sunrise; early morning twilight.",
    icon: "üåÑ"
  },
  {
    id: "sunrise",
    englishTerm: "Sunrise ",
    hindiTranslation: "‡§∏‡•Ç‡§∞‡•ç‡§Ø‡•ã‡§¶‡§Ø (Sooryoday), ‡§≠‡•ã‡§∞ (Bhor)",
    description: "The moment the sun appears above the horizon.",
    icon: "üåÖ"
  },
  {
    id: "morning",
    englishTerm: "Morning",
    hindiTranslation: "‡§∏‡•Å‡§¨‡§π (Subah), ‡§™‡•ç‡§∞‡§æ‡§§‡§É (Praatah)",
    description: "The early part of the day, from dawn until around noon.",
    icon: "üåÖ"
  },
  {
    id: "noon",
    englishTerm: "Noon",
    hindiTranslation: "‡§¶‡•ã‡§™‡§π‡§∞ (Dopehar)",
    description: "Midday, exactly 12:00 PM, or broadly the middle of the day.",
    icon: "üïõ"
  },
  {
    id: "afternoon",
    englishTerm: "Afternoon",
    hindiTranslation: "‡§¶‡•ã‡§™‡§π‡§∞ ‡§¨‡§æ‡§¶ (Dopehar Baad), ‡§Ö‡§™‡§∞‡§æ‡§π‡•ç‡§® (Apraahn)",
    description: "The time after noon until late afternoon/early evening.",
    icon: "‚òÄÔ∏è"
  },
  {
    id: "evening",
    englishTerm: "Evening",
    hindiTranslation: "‡§∂‡§æ‡§Æ (Shaam)",
    description: "The period from late afternoon until nightfall/dusk.",
    icon: "üåá"
  },
  {
    id: "twilight",
    englishTerm: "Twilight",
    hindiTranslation: "‡§∏‡§æ‡§Ç‡§ù (Saanjh), ‡§ó‡•ã‡§ß‡•Ç‡§≤‡§ø ‡§¨‡•á‡§≤‡§æ (Godhuli Bela)",
    description: "Dim light period either just before sunrise or just after sunset.",
    icon: "üå•Ô∏è"
  },
  {
    id: "dusk",
    englishTerm: "Dusk",
    hindiTranslation: "‡§ó‡•ã‡§ß‡•Ç‡§≤‡§ø (Godhuli), ‡§∂‡§æ‡§Æ (Shaam)",
    description: "The darker stage of twilight immediately after sunset.",
    icon: "üåÜ"
  },
  {
    id: "sunset",
    englishTerm: "Sunset",
    hindiTranslation: "‡§∏‡•Ç‡§∞‡•ç‡§Ø‡§æ‡§∏‡•ç‡§§ (Sooryaast), ‡§∂‡§æ‡§Æ (Shaam)",
    description: "The moment the sun disappears below the horizon.",
    icon: "üåá"
  },
  {
    id: "night",
    englishTerm: "Night",
    hindiTranslation: "‡§∞‡§æ‡§§ (Raat), ‡§∞‡§æ‡§§‡•ç‡§∞‡§ø (Raatri)",
    description: "The period of darkness from sunset to sunrise.",
    icon: "üåô"
  },
  {
    id: "midnight",
    englishTerm: "Midnight",
    hindiTranslation: "‡§Æ‡§ß‡•ç‡§Ø‡§∞‡§æ‡§§‡•ç‡§∞‡§ø (Madhyaraatri), ‡§Ü‡§ß‡•Ä ‡§∞‡§æ‡§§ (Aadhi Raat)",
    description: "Exactly 12:00 AM, the middle of the night.",
    icon: "üåÉ"
  },
  {
    id: "late-night",
    englishTerm: "Late Night",
    hindiTranslation: "‡§∞‡§æ‡§§ ‡§ó‡§π‡§∞‡§æ‡§®‡§æ (Raat Gahraana), ‡§¶‡•á‡§∞ ‡§∞‡§æ‡§§ (Der Raat)",
    description: "The deep part of the night, usually well after midnight.",
    icon: "üåå"
  }
];
---

<BaseLayout meta={{ title: pageTitle }}>
  <BackButton href="/Glossary" />
  <article class="container__page alphabet-page-container">
    <div class="page-header">
      <h1 class="page-main-title">{pageTitle}</h1>
      <button id="flip-all-button-waqt" class="flip__all__button">Flip All Cards</button>
    </div>

    <div class="grid-container alphabet-grid waqt-grid"> {/* Added waqt-grid class */}
      {
        waqtData.map((entry) => (
          <div class="flip__card" data-id={entry.id}>
            <div class="flip__card__inner">
              <div class="card card__front">
                <div class="flip__button">
                  <span class="flip__button__text flip-text-label" title="Flip Card">Flip Card</span>
                  <span class="flip__button__text rotate-symbol-label is-hidden" title="Reset Card">&#x21bb;</span>
                </div>
                <div class="card-content-front">
                  <div class="waqt-icon">{entry.icon}</div>
                  <h2 class="text">{entry.englishTerm}</h2>
                </div>
                <div class="card__glow"></div>
              </div>
              <div class="card card__back">
                <div class="flip__button">
                  <span class="flip__button__text flip-text-label" title="Flip Card">Flip Card</span>
                  <span class="flip__button__text rotate-symbol-label is-hidden" title="Reset Card">&#x21bb;</span>
                </div>
                <div class="card-content-back">
                  <h3 class="hindi-term">{entry.hindiTranslation}</h3>
                  <p class="description">{entry.description}</p>
                </div>
                <div class="card__glow"></div>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </article>
  </BaseLayout>

  <script>
    // Script for "Flip All Cards" button on the page
    const flipAllButtonPageWaqt = document.getElementById("flip-all-button-waqt") as HTMLButtonElement | null;
    const pageFlipCardsWaqt = document.querySelectorAll(".waqt-grid .flip__card");
    let allFlippedStatusWaqt = false;

    if (flipAllButtonPageWaqt) {
      flipAllButtonPageWaqt.addEventListener("click", () => {
        allFlippedStatusWaqt = !allFlippedStatusWaqt;
        pageFlipCardsWaqt.forEach((card) => {
          const flipCardElement = card as HTMLElement;
          if (allFlippedStatusWaqt) {
            flipCardElement.classList.add("flipped");
          } else {
            flipCardElement.classList.remove("flipped");
          }
          const allButtonsOnThisCard = flipCardElement.querySelectorAll(".flip__button") as NodeListOf<HTMLElement>;
          allButtonsOnThisCard.forEach(btn => {
            const textLabel = btn.querySelector(".flip-text-label") as HTMLElement | null;
            const symbolLabel = btn.querySelector(".rotate-symbol-label") as HTMLElement | null;
            if (textLabel && symbolLabel) {
              if (allFlippedStatusWaqt) {
                textLabel.classList.add("is-hidden");
                symbolLabel.classList.remove("is-hidden");
              } else {
                textLabel.classList.remove("is-hidden");
                symbolLabel.classList.add("is-hidden");
              }
            }
          });
        });
        flipAllButtonPageWaqt.textContent = allFlippedStatusWaqt ? "Reset All Cards" : "Flip All Cards";
        flipAllButtonPageWaqt.classList.add("active");
        setTimeout(() => {
          if (flipAllButtonPageWaqt) {
            flipAllButtonPageWaqt.classList.remove("active");
          }
        }, 300);
      });
    } else {
      console.warn("Page's Flip All button for waqt not found.");
    }

    // Script for individual card interactions (mousemove and flip button)
    const cardsForMouseInteractionWaqt = document.querySelectorAll(".waqt-grid .card");
    cardsForMouseInteractionWaqt.forEach((cardElement) => {
      cardElement.addEventListener("mousemove", (e: Event) => {
        const htmlCardElement = cardElement as HTMLElement;
        const rect = htmlCardElement.getBoundingClientRect();
        const event = e as MouseEvent;
        const x = ((event.clientX - rect.left) / htmlCardElement.clientWidth) * 100;
        const y = ((event.clientY - rect.top) / htmlCardElement.clientHeight) * 100;
        htmlCardElement.style.setProperty("--mouse-x", `${x}%`);
        htmlCardElement.style.setProperty("--mouse-y", `${y}%`);
      });
    });

    const individualFlipCardsWaqt = document.querySelectorAll(".waqt-grid .flip__card");
    individualFlipCardsWaqt.forEach((card) => {
      const flipButtonsOnThisCard = card.querySelectorAll(".flip__button") as NodeListOf<HTMLElement>;

      flipButtonsOnThisCard.forEach((button) => {
        button.addEventListener("click", (event) => {
          event.stopPropagation();
          card.classList.toggle("flipped");

          const isFlipped = card.classList.contains("flipped");
          
          flipButtonsOnThisCard.forEach(btnInstance => {
            const textLabel = btnInstance.querySelector(".flip-text-label") as HTMLElement | null;
            const symbolLabel = btnInstance.querySelector(".rotate-symbol-label") as HTMLElement | null;
            if (textLabel && symbolLabel) {
              if (isFlipped) {
                textLabel.classList.add("is-hidden");
                symbolLabel.classList.remove("is-hidden");
              } else {
                textLabel.classList.remove("is-hidden");
                symbolLabel.classList.add("is-hidden");
              }
            }
          });
        });
      });
    });
  </script>