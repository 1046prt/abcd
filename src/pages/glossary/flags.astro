---
// filepath: c:\Users\Lenovo\OneDrive\Desktop\parixan\abcd\src\pages\glossary\flags.astro
import BaseLayout from "../../layouts/Base.astro"; 
import BackButton from "../../components/ui/backButton.astro";     
import "../../assets/styles/varnmala/greek-alphabet.css"; // Keep for general page styles if needed
import "../../assets/styles/glossary/flags.css"; // Import the specific styles for this page

// Define the type for our flag data entries
export interface FlagEntry {
  id: string;
  letter: string; // Emoji for front
  text: string;   // Country name for front
  description: string; // Capital city (used for alt text & front)
  imageUrl: string; // Path to the flag image for the back
}

const pageTitle = "Country Flags";

const flagsData: FlagEntry[] = [
  {
    id: "usa",
    letter: "ðŸ‡ºðŸ‡¸",
    text: "United States",
    description: "Capital: Washington, D.C.",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/us.svg"
  },
  {
    id: "canada",
    letter: "ðŸ‡¨ðŸ‡¦",
    text: "Canada",
    description: "Capital: Ottawa",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/ca.svg"
  },
  {
    id: "india",
    letter: "ðŸ‡®ðŸ‡³",
    text: "India",
    description: "Capital: New Delhi",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/in.svg"
  },
  {
    id: "japan",
    letter: "ðŸ‡¯ðŸ‡µ",
    text: "Japan",
    description: "Capital: Tokyo",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/jp.svg"
  },
  {
    id: "brazil",
    letter: "ðŸ‡§ðŸ‡·",
    text: "Brazil",
    description: "Capital: BrasÃ­lia",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/br.svg"
  },
  {
    id: "australia",
    letter: "ðŸ‡¦ðŸ‡º",
    text: "Australia",
    description: "Capital: Canberra",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/au.svg"
  },
  {
    id: "germany",
    letter: "ðŸ‡©ðŸ‡ª",
    text: "Germany",
    description: "Capital: Berlin",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/de.svg"
  },
  {
    id: "southafrica",
    letter: "ðŸ‡¿ðŸ‡¦",
    text: "South Africa",
    description: "Capitals: Pretoria, Cape Town, Bloemfontein",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/za.svg"
  },
  {
    id: "france",
    letter: "ðŸ‡«ðŸ‡·",
    text: "France",
    description: "Capital: Paris",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/fr.svg"
  },
  {
    id: "unitedkingdom",
    letter: "ðŸ‡¬ðŸ‡§",
    text: "United Kingdom",
    description: "Capital: London",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/gb.svg"
  },
  {
    id: "china",
    letter: "ðŸ‡¨ðŸ‡³",
    text: "China",
    description: "Capital: Beijing",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/cn.svg"
  },
  {
    id: "italy",
    letter: "ðŸ‡®ðŸ‡¹",
    text: "Italy",
    description: "Capital: Rome",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/it.svg"
  }
];
---

<BaseLayout meta={{ title: pageTitle }}>
  <BackButton href="/Glossary" />
  <article class="container__page alphabet-page-container">
    <div class="page-header">
      <h1 class="page-main-title">{pageTitle}</h1>
      <button id="flip-all-button-page" class="flip__all__button">Flip All Cards</button>
    </div>

    <div class="grid-container alphabet-grid flags-grid">
      {
        flagsData.map((entry) => (
          <div class="flip__card" data-id={entry.id}>
            <div class="flip__card__inner">
              <div class="card card__front">
                <div class="flip__button">
                  {/* Modified flip button content */}
                  <span class="flip__button__text flip-text-label" title="Flip Card">Flip Card</span>
                  <span class="flip__button__text rotate-symbol-label is-hidden" title="Reset Card">&#x21bb;</span> {/* â†» symbol */}
                </div>
                <div class="letter__header">
                  <p class="character">{entry.letter}</p>
                </div>
                <div class="letter__content">
                  <h2 class="text">{entry.text}</h2>
                  <p class="description">{entry.description}</p>
                </div>
                <div class="card__glow"></div>
              </div>
              <div class="card card__back">
                <div class="flip__button">
                  {/* Modified flip button content */}
                  <span class="flip__button__text flip-text-label" title="Flip Card">Flip Card</span>
                  <span class="flip__button__text rotate-symbol-label is-hidden" title="Reset Card">&#x21bb;</span> {/* â†» symbol */}
                </div>
                {entry.imageUrl ? (
                  <img src={entry.imageUrl} alt={entry.description} class="image flag-image" />
                ) : (
                  <p class="flipped__text">{entry.description || entry.text}</p>
                )}
              </div>
            </div>
          </div> 
        ))
      }
    </div>
  </article>
  </BaseLayout>

  <script>
    // Script for "Flip All Cards" button on the page
    const flipAllButtonPage = document.getElementById("flip-all-button-page") as HTMLButtonElement | null;
    const pageFlipCards = document.querySelectorAll(".flags-grid .flip__card"); 
    let allFlippedStatus = false;

    if (flipAllButtonPage) {
      flipAllButtonPage.addEventListener("click", () => {
        allFlippedStatus = !allFlippedStatus;
        pageFlipCards.forEach((card) => {
          const flipCardElement = card as HTMLElement;
          if (allFlippedStatus) {
            flipCardElement.classList.add("flipped");
          } else {
            flipCardElement.classList.remove("flipped");
          }
          // Update text/icons for all buttons on this card based on new status
          const allButtonsOnThisCard = flipCardElement.querySelectorAll(".flip__button") as NodeListOf<HTMLElement>;
          allButtonsOnThisCard.forEach(btn => {
            const textLabel = btn.querySelector(".flip-text-label") as HTMLElement | null;
            const symbolLabel = btn.querySelector(".rotate-symbol-label") as HTMLElement | null;
            if (textLabel && symbolLabel) {
              if (allFlippedStatus) {
                textLabel.classList.add("is-hidden");
                symbolLabel.classList.remove("is-hidden");
              } else {
                textLabel.classList.remove("is-hidden");
                symbolLabel.classList.add("is-hidden");
              }
            }
          });
        });
        flipAllButtonPage.textContent = allFlippedStatus ? "Reset All Cards" : "Flip All Cards";
        flipAllButtonPage.classList.add("active");
        setTimeout(() => {
          if (flipAllButtonPage) { 
            flipAllButtonPage.classList.remove("active");
          }
        }, 300);
      });
    } else {
      console.warn("Page's Flip All button not found.");
    }

    // Script for individual card interactions (mousemove and flip button)
    const cardsForMouseInteraction = document.querySelectorAll(".flags-grid .card"); 
    cardsForMouseInteraction.forEach((cardElement) => { 
      cardElement.addEventListener("mousemove", (e: Event) => {
        const htmlCardElement = cardElement as HTMLElement; 
        const rect = htmlCardElement.getBoundingClientRect();
        const event = e as MouseEvent;
        const x = ((event.clientX - rect.left) / htmlCardElement.clientWidth) * 100;
        const y = ((event.clientY - rect.top) / htmlCardElement.clientHeight) * 100;
        htmlCardElement.style.setProperty("--mouse-x", `${x}%`);
        htmlCardElement.style.setProperty("--mouse-y", `${y}%`);
      });
    });

    const individualFlipCards = document.querySelectorAll(".flags-grid .flip__card"); 
    individualFlipCards.forEach((card) => { // card is .flip__card
      const flipButtonsOnThisCard = card.querySelectorAll(".flip__button") as NodeListOf<HTMLElement>; // Gets buttons on front and back of this card

      flipButtonsOnThisCard.forEach((button) => { 
        button.addEventListener("click", (event) => {
          event.stopPropagation(); 
          card.classList.toggle("flipped"); // Toggle the card's class

          const isFlipped = card.classList.contains("flipped");
          
          // Update text/icons for all buttons on this card
          flipButtonsOnThisCard.forEach(btnInstance => {
            const textLabel = btnInstance.querySelector(".flip-text-label") as HTMLElement | null;
            const symbolLabel = btnInstance.querySelector(".rotate-symbol-label") as HTMLElement | null;
            if (textLabel && symbolLabel) {
              if (isFlipped) {
                textLabel.classList.add("is-hidden");
                symbolLabel.classList.remove("is-hidden");
              } else {
                textLabel.classList.remove("is-hidden");
                symbolLabel.classList.add("is-hidden");
              }
            }
          });
        });
      });
    });
  </script>