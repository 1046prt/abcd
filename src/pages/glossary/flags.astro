---
// filepath: c:\Users\Lenovo\OneDrive\Desktop\parixan\abcd\src\pages\glossary\flags.astro
import BaseLayout from "../../layouts/Base.astro"; 
import BackButton from "../../components/ui/backButton.astro";     
import "../../assets/styles/varnmala/greek-alphabet.css"; // Keep for general page styles if needed

// Define the type for our flag data entries
export interface FlagEntry {
  id: string;
  letter: string; // Emoji for front
  text: string;   // Country name for front
  description: string; // Capital city (used for alt text & front)
  imageUrl: string; // Path to the flag image for the back
}

const pageTitle = "Country Flags";

const flagsData: FlagEntry[] = [
  {
    id: "usa",
    letter: "ðŸ‡ºðŸ‡¸",
    text: "United States",
    description: "Capital: Washington, D.C.",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/us.svg"
  },
  {
    id: "canada",
    letter: "ðŸ‡¨ðŸ‡¦",
    text: "Canada",
    description: "Capital: Ottawa",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/ca.svg"
  },
  {
    id: "india",
    letter: "ðŸ‡®ðŸ‡³",
    text: "India",
    description: "Capital: New Delhi",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/in.svg"
  },
  {
    id: "japan",
    letter: "ðŸ‡¯ðŸ‡µ",
    text: "Japan",
    description: "Capital: Tokyo",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/jp.svg"
  },
  {
    id: "brazil",
    letter: "ðŸ‡§ðŸ‡·",
    text: "Brazil",
    description: "Capital: BrasÃ­lia",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/br.svg"
  },
  {
    id: "australia",
    letter: "ðŸ‡¦ðŸ‡º",
    text: "Australia",
    description: "Capital: Canberra",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/au.svg"
  },
  {
    id: "germany",
    letter: "ðŸ‡©ðŸ‡ª",
    text: "Germany",
    description: "Capital: Berlin",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/de.svg"
  },
  {
    id: "southafrica",
    letter: "ðŸ‡¿ðŸ‡¦",
    text: "South Africa",
    description: "Capitals: Pretoria, Cape Town, Bloemfontein",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/za.svg"
  },
  {
    id: "france",
    letter: "ðŸ‡«ðŸ‡·",
    text: "France",
    description: "Capital: Paris",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/fr.svg"
  },
  {
    id: "unitedkingdom",
    letter: "ðŸ‡¬ðŸ‡§",
    text: "United Kingdom",
    description: "Capital: London",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/gb.svg"
  },
  {
    id: "china",
    letter: "ðŸ‡¨ðŸ‡³",
    text: "China",
    description: "Capital: Beijing",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/cn.svg"
  },
  {
    id: "italy",
    letter: "ðŸ‡®ðŸ‡¹",
    text: "Italy",
    description: "Capital: Rome",
    imageUrl: "https://cdn.jsdelivr.net/gh/hampusborgos/country-flags@main/svg/it.svg"
  }
];
---

<BaseLayout meta={{ title: pageTitle }}>
  <BackButton href="/Glossary" />
  <article class="container__page alphabet-page-container">
    <div class="page-header">
      <h1 class="page-main-title">{pageTitle}</h1>
      <button id="flip-all-button-page" class="flip__all__button">Flip All Cards</button>
    </div>

    <div class="grid-container alphabet-grid flags-grid">
      {
        flagsData.map((entry) => (
          <div class="flip__card" data-id={entry.id}>
            <div class="flip__card__inner">
              <div class="card card__front">
                <div class="flip__button">
                  {/* Modified flip button content */}
                  <span class="flip__button__text flip-text-label" title="Flip Card">Flip Card</span>
                  <span class="flip__button__text rotate-symbol-label is-hidden" title="Reset Card">&#x21bb;</span> {/* â†» symbol */}
                </div>
                <div class="letter__header">
                  <p class="character">{entry.letter}</p>
                </div>
                <div class="letter__content">
                  <h2 class="text">{entry.text}</h2>
                  <p class="description">{entry.description}</p>
                </div>
                <div class="card__glow"></div>
              </div>
              <div class="card card__back">
                <div class="flip__button">
                  {/* Modified flip button content */}
                  <span class="flip__button__text flip-text-label" title="Flip Card">Flip Card</span>
                  <span class="flip__button__text rotate-symbol-label is-hidden" title="Reset Card">&#x21bb;</span> {/* â†» symbol */}
                </div>
                {entry.imageUrl ? (
                  <img src={entry.imageUrl} alt={entry.description} class="image flag-image" />
                ) : (
                  <p class="flipped__text">{entry.description || entry.text}</p>
                )}
              </div>
            </div>
          </div> 
        ))
      }
    </div>
  </article>

  <script>
    // Script for "Flip All Cards" button on the page
    const flipAllButtonPage = document.getElementById("flip-all-button-page") as HTMLButtonElement | null;
    const pageFlipCards = document.querySelectorAll(".flags-grid .flip__card"); 
    let allFlippedStatus = false;

    if (flipAllButtonPage) {
      flipAllButtonPage.addEventListener("click", () => {
        allFlippedStatus = !allFlippedStatus;
        pageFlipCards.forEach((card) => {
          const flipCardElement = card as HTMLElement;
          if (allFlippedStatus) {
            flipCardElement.classList.add("flipped");
          } else {
            flipCardElement.classList.remove("flipped");
          }
          // Update text/icons for all buttons on this card based on new status
          const allButtonsOnThisCard = flipCardElement.querySelectorAll(".flip__button") as NodeListOf<HTMLElement>;
          allButtonsOnThisCard.forEach(btn => {
            const textLabel = btn.querySelector(".flip-text-label") as HTMLElement | null;
            const symbolLabel = btn.querySelector(".rotate-symbol-label") as HTMLElement | null;
            if (textLabel && symbolLabel) {
              if (allFlippedStatus) {
                textLabel.classList.add("is-hidden");
                symbolLabel.classList.remove("is-hidden");
              } else {
                textLabel.classList.remove("is-hidden");
                symbolLabel.classList.add("is-hidden");
              }
            }
          });
        });
        flipAllButtonPage.textContent = allFlippedStatus ? "Reset All Cards" : "Flip All Cards";
        flipAllButtonPage.classList.add("active");
        setTimeout(() => {
          if (flipAllButtonPage) { 
            flipAllButtonPage.classList.remove("active");
          }
        }, 300);
      });
    } else {
      console.warn("Page's Flip All button not found.");
    }

    // Script for individual card interactions (mousemove and flip button)
    const cardsForMouseInteraction = document.querySelectorAll(".flags-grid .card"); 
    cardsForMouseInteraction.forEach((cardElement) => { 
      cardElement.addEventListener("mousemove", (e: Event) => {
        const htmlCardElement = cardElement as HTMLElement; 
        const rect = htmlCardElement.getBoundingClientRect();
        const event = e as MouseEvent;
        const x = ((event.clientX - rect.left) / htmlCardElement.clientWidth) * 100;
        const y = ((event.clientY - rect.top) / htmlCardElement.clientHeight) * 100;
        htmlCardElement.style.setProperty("--mouse-x", `${x}%`);
        htmlCardElement.style.setProperty("--mouse-y", `${y}%`);
      });
    });

    const individualFlipCards = document.querySelectorAll(".flags-grid .flip__card"); 
    individualFlipCards.forEach((card) => { // card is .flip__card
      const flipButtonsOnThisCard = card.querySelectorAll(".flip__button") as NodeListOf<HTMLElement>; // Gets buttons on front and back of this card

      flipButtonsOnThisCard.forEach((button) => { 
        button.addEventListener("click", (event) => {
          event.stopPropagation(); 
          card.classList.toggle("flipped"); // Toggle the card's class

          const isFlipped = card.classList.contains("flipped");
          
          // Update text/icons for all buttons on this card
          flipButtonsOnThisCard.forEach(btnInstance => {
            const textLabel = btnInstance.querySelector(".flip-text-label") as HTMLElement | null;
            const symbolLabel = btnInstance.querySelector(".rotate-symbol-label") as HTMLElement | null;
            if (textLabel && symbolLabel) {
              if (isFlipped) {
                textLabel.classList.add("is-hidden");
                symbolLabel.classList.remove("is-hidden");
              } else {
                textLabel.classList.remove("is-hidden");
                symbolLabel.classList.add("is-hidden");
              }
            }
          });
        });
      });
    });
  </script>
</BaseLayout>

<style is:global>
  /* Color variables and base styles (as provided previously) */
  :root[data-theme="light"] {
    --character-gradient-start: var(--primary);
    --character-gradient-end: var(--primary-light);
    --character-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
  }

  :root[data-theme="dark"] {
    --character-gradient-start: hsl(48, 100%, 75%);
    --character-gradient-end: hsl(48, 100%, 85%);
    --character-shadow: 0 0 20px hsla(48, 100%, 75%, 0.2);
  }

  @media (prefers-color-scheme: dark) {
    :root:not([data-theme="light"]) {
      --character-gradient-start: hsl(48, 100%, 75%);
      --character-gradient-end: hsl(48, 100%, 85%);
      --character-shadow: 0 0 20px hsla(48, 100%, 75%, 0.2);
    }
  }

  @media (prefers-color-scheme: light) {
    :root:not([data-theme="dark"]) {
      --character-gradient-start: var(--primary);
      --character-gradient-end: var(--primary-light);
      --character-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
    }
  }

  /* Card structure and flip animation styles (scoped to .flags-grid) */
  .flags-grid .flip__card {
    width: 100%;
    height: 100%;
    perspective: 1000px;
    min-height: 250px; /* Or your preferred card height */
  }

  .flags-grid .flip__card .image { /* General style for images on cards */
    object-fit: cover; 
    width: 100%;
    height: 100%;
    background-color: var(--border); 
  }

  /* Specific style for flag images on the back */
  .flags-grid .flip__card .flag-image {
    object-fit: contain !important; /* Ensures the entire flag is visible and maintains aspect ratio */
    background-color: transparent !important; /* No background color behind the flag image itself */
    border: 1px solid #eee; /* Optional: a light border around the flag image */
    max-width: 100%; /* Ensure it doesn't exceed card padding */
    max-height: 100%;
  }

  .flags-grid .flip__card .character { /* For the flag emoji on the front */
    display: flex;
    justify-content: center; /* Centering the emoji if header is small */
    align-items: center;
    height: 100%;
    font-size: 4rem; /* Adjust size for flag emoji */
    margin: 0;
    line-height: 1;
    /* Change color to var(--primary) and remove overrides for native emoji color */
    color: var(--primary) !important; /* Set color to --primary */
    background: none !important; /* Keep if you don't want a background gradient */
    -webkit-background-clip: initial !important; /* Keep if you don't want a background gradient */
    background-clip: initial !important; /* Keep if you don't want a background gradient */
    text-shadow: none !important; /* Remove text shadow if not desired with primary color */
    text-align: center; /* Center emoji if it's the main content of letter__header */
  }

  .flags-grid .flip__card .flipped__text { /* Fallback text on back */
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
    font-size: 1.5rem;
    font-weight: 800;
    margin: 0;
    line-height: 1;
    color: var(--text); /* Ensure fallback text is visible */
    text-shadow: var(--character-shadow);
    text-align: center;
    padding: 1rem;
  }

  .flags-grid .flip__card .card {
    background: linear-gradient(145deg, var(--background), color-mix(in srgb, var(--background) 97%, var(--text) 3%));
    border-radius: 1.25rem;
    padding: 1.75rem;
    box-shadow:
      0 4px 15px rgba(0, 0, 0, 0.05),
      0 1px 2px rgba(0, 0, 0, 0.1);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
    position: relative;
    overflow: hidden;
    border: 1px solid var(--border);
    backdrop-filter: blur(10px);
    width: 100%;
    height: 100%;
  }

  .flags-grid .flip__card .card:hover .card__glow {
    opacity: 1;
  }

  .flags-grid .flip__card .card:hover .text { /* Country name text on front */
    background: linear-gradient(135deg, var(--primary), var(--primary-light));
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
  }

  .flags-grid .flip__card .flip__card__inner {
    width: 100%;
    height: 100%;
    text-align: left;
    transition: transform 0.8s;
    transform-style: preserve-3d;
  }

  .flags-grid .flip__card .card__front,
  .flags-grid .flip__card .card__back {
    position: absolute;
    width: 100%;
    height: 100%;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    top: 0;
    left: 0;
  }

  .flags-grid .flip__card .card__back {
    padding: 0.5rem; /* Padding for the back card content (image) */
    transform: rotateY(180deg);
    display: flex; /* For centering the image */
    justify-content: center;
    align-items: center;
    background-color: #f0f0f0; /* Light background for the back of the card, helps if flag has transparency */
  }

  .flags-grid .flip__card.flipped .flip__card__inner {
    transform: rotateY(180deg);
  }

  .flags-grid .flip__card .letter__header { /* Contains the flag emoji */
    display: flex;
    justify-content: flex-start; 
    align-items: flex-start; /* Align emoji to top-left of this container */
    position: relative;
    /* flex-grow: 1; Let content below dictate size, or set a fixed height */
     min-height: 50px; /* Ensure some space for the emoji */
  }

  .flags-grid .flip__card .flip__button {
    position: absolute;
    top: 0.75rem; /* Adjusted position */
    right: 0.75rem;
    z-index: 10; 
  }

  .flags-grid .flip__card .flip__button__text {
    font-size: 0.875rem;
    color: var(--secondary);
    padding: 0.35rem 0.75rem;
    background: color-mix(in srgb, var(--background) 97%, var(--text) 3%);
    border-radius: 2rem;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 1px solid var(--border);
    text-align: left;
  }

  .flags-grid .flip__card .flip__button__text:hover {
    background: var(--primary);
    color: var(--text-on-primary, #fff); /* Ensure contrast */
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .flags-grid .flip__card .letter__content { /* Contains country name and capital */
    display: flex; /* Added for better control */
    flex-direction: column;
    gap: 0.25rem; 
    z-index: 1;
    text-align: left;
    /* margin-top: -1rem; Removed, let natural flow or header height dictate */
  }

  .flags-grid .flip__card .text { /* Country Name */
    font-size: 1.25rem; 
    font-weight: 700;
    color: var(--text); 
    margin: 0;
    transition: color 0.3s ease;
    text-align: left;
  }

  .flags-grid .flip__card .description { /* Capital City */
    font-size: 0.8rem; 
    color: var(--secondary);
    margin: 0;
    line-height: 1.4;
    opacity: 0.9;
    text-align: left;
  }

  .flags-grid .flip__card .card__glow {
    position: absolute;
    inset: 0;
    background: radial-gradient(
      circle at var(--mouse-x, 50%) var(--mouse-y, 50%),
      color-mix(in srgb, var(--primary) 10%, transparent) 0%,
      transparent 60%
    );
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }

  @media (max-width: 768px) {
    .flags-grid .flip__card .character {
      font-size: 3rem; 
    }
    .flags-grid .flip__card .text { 
      font-size: 1.1rem;
    }
    .flags-grid .flip__card .description { 
      font-size: 0.75rem;
    }
    .flags-grid .flip__card .flipped__text { 
        font-size: 1.2rem;
    }
  }

  /* Grid layout for the flags page */
  .flags-grid.grid-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr)); /* This creates responsive columns */
    gap: 1.5rem; 
    padding: 1rem; 
  }

  .is-hidden {
    display: none !important;
  }

  .flags-grid .flip__card .flip__button__text.rotate-symbol-label {
    font-size: 1.1em; /* Slightly larger if needed, or adjust as preferred */
    line-height: 1; /* Ensure proper alignment */
  }
</style>