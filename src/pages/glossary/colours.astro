---
// filepath: c:\Users\Lenovo\OneDrive\Desktop\parixan\abcd\src\pages\glossary\colours.astro
import BaseLayout from "../../layouts/Base.astro"; 
import BackButton from "../../components/ui/backButton.astro";     
import "../../assets/styles/varnmala/greek-alphabet.css"; // General styles

// Define the type for our colour data entries
export interface ColourEntry {
  id: string;
  letter: string; 
  fullName: string;
  imageUrl: string; 
}

const pageTitle = "Colours";
// const category = "colours"; 

const coloursData: ColourEntry[] = [
  { id: "black",  letter: "‚¨õ", fullName: "Black (‡§ï‡§æ‡§≤‡§æ)", imageUrl: "https://kids-flashcards.com/images/en/30/cards/picture-flashcard/black.webp" },
  { id: "white",  letter: "‚¨ú", fullName: "White (‡§∏‡§´‡§º‡•á‡§¶)", imageUrl: "https://kids-flashcards.com/images/en/30/cards/picture-flashcard/white.webp" },
  { id: "red",    letter: "üü•", fullName: "Red (‡§≤‡§æ‡§≤)", imageUrl: "https://kids-flashcards.com/images/en/30/cards/picture-flashcard/red.webp" },
  { id: "green",  letter: "üü©", fullName: "Green (‡§π‡§∞‡§æ)", imageUrl: "https://kids-flashcards.com/images/en/30/cards/picture-flashcard/green.webp" },
  { id: "yellow", letter: "üü®", fullName: "Yellow (‡§™‡•Ä‡§≤‡§æ)", imageUrl: "https://kids-flashcards.com/images/en/30/cards/picture-flashcard/yellow.webp" },
  { id: "blue",   letter: "üü¶", fullName: "Blue (‡§®‡•Ä‡§≤‡§æ)", imageUrl: "https://kids-flashcards.com/images/en/30/cards/picture-flashcard/blue.webp" },
  { id: "brown",  letter: "üü´", fullName: "Brown (‡§≠‡•Ç‡§∞‡§æ)", imageUrl: "https://kids-flashcards.com/images/en/30/cards/picture-flashcard/brown.webp" },
  { id: "orange", letter: "üüß", fullName: "Orange (‡§®‡§æ‡§∞‡§Ç‡§ó‡•Ä)", imageUrl: "https://kids-flashcards.com/images/en/30/cards/picture-flashcard/orange.webp" },
  { id: "pink",   letter: "üíñ", fullName: "Pink (‡§ó‡•Å‡§≤‡§æ‡§¨‡•Ä)", imageUrl: "https://kids-flashcards.com/images/en/30/cards/picture-flashcard/pink.webp" },
  { id: "purple", letter: "üü™", fullName: "Purple (‡§¨‡•à‡§Ç‡§ó‡§®‡•Ä)", imageUrl: "https://kids-flashcards.com/images/en/30/cards/picture-flashcard/purple.webp" },
  { id: "gray",   letter: "ü©∂", fullName: "Gray (‡§∏‡•ç‡§≤‡•á‡§ü‡•Ä)", imageUrl: "https://kids-flashcards.com/images/en/30/cards/picture-flashcard/gray.webp" }
];

// Helper function to parse English and Hindi names
function parseNames(fullName: string): { english: string; hindi: string } {
  const match = fullName.match(/^(.*?) \((.*?)\)$/);
  if (match && match.length === 3) {
    return { english: match[1].trim(), hindi: match[2].trim() };
  }
  const hindiMatch = fullName.match(/([\u0900-\u097F]+)/); 
  if (hindiMatch) {
    const hindi = hindiMatch[0].trim();
    const english = fullName.replace(hindi, "").replace("()", "").trim(); 
    return { english, hindi };
  }
  return { english: fullName, hindi: "" }; 
}
---

<BaseLayout meta={{ title: pageTitle }}>
  <article class="container__page alphabet-page-container">
    <div class="page-header">
      <BackButton href="/Glossary" />
      <h1 class="page-main-title">{pageTitle}</h1>
      <button id="flip-all-button-colours" class="flip__all__button">Flip All Cards</button>
    </div>

    <div class="grid-container alphabet-grid colours-grid"> {/* Added 'colours-grid' for specific targeting */}
      {
        coloursData.map((entry) => {
          const names = parseNames(entry.fullName);
          return (
            <div class="flip__card" data-id={entry.id}> {/* Inlined Card Structure Starts */}
              <div class="flip__card__inner">
                <div class="card card__front">
                  <div class="flip__button">
                    <span class="flip__button__text" title="Flip Card">Flip Card</span>
                  </div>
                  {/* Front content: Only Colour Name */}
                  <div class="card-content-front">
                    <h2 class="text">{names.english}</h2>
                  </div>
                  <div class="card__glow"></div>
                </div>
                <div class="card card__back">
                  <div class="flip__button">
                    <span class="flip__button__text" title="Flip Card">Flip Card</span>
                  </div>
                  {/* Back content: Colour Image */}
                  {entry.imageUrl ? (
                    <img src={entry.imageUrl} alt={`${names.english} (${names.hindi})`} class="image colour-image" />
                  ) : (
                    <p class="flipped__text">{names.hindi || entry.letter}</p> /* Fallback to Hindi name or emoji */
                  )}
                </div>
              </div>
            </div> 
          );
        })
      }
    </div>
  </article>

  <script>
    // Script for "Flip All Cards" button on the page
    const flipAllButtonPage = document.getElementById("flip-all-button-colours") as HTMLButtonElement | null;
    const pageFlipCards = document.querySelectorAll(".colours-grid .flip__card"); 
    let allFlippedStatus = false;

    if (flipAllButtonPage) {
      flipAllButtonPage.addEventListener("click", () => {
        allFlippedStatus = !allFlippedStatus;
        pageFlipCards.forEach((card) => {
          if (allFlippedStatus) {
            card.classList.add("flipped");
          } else {
            card.classList.remove("flipped");
          }
        });
        flipAllButtonPage.textContent = allFlippedStatus ? "Reset All Cards" : "Flip All Cards";
        flipAllButtonPage.classList.add("active");
        setTimeout(() => {
          if (flipAllButtonPage) { 
            flipAllButtonPage.classList.remove("active");
          }
        }, 300);
      });
    } else {
      console.warn("Page's Flip All button for colours not found.");
    }

    // Script for individual card interactions (mousemove and flip button)
    const cardsForMouseInteraction = document.querySelectorAll(".colours-grid .card"); 
    cardsForMouseInteraction.forEach((cardElement) => { 
      cardElement.addEventListener("mousemove", (e: Event) => {
        const htmlCardElement = cardElement as HTMLElement; 
        const rect = htmlCardElement.getBoundingClientRect();
        const event = e as MouseEvent;
        const x = ((event.clientX - rect.left) / htmlCardElement.clientWidth) * 100;
        const y = ((event.clientY - rect.top) / htmlCardElement.clientHeight) * 100;
        htmlCardElement.style.setProperty("--mouse-x", `${x}%`);
        htmlCardElement.style.setProperty("--mouse-y", `${y}%`);
      });
    });

    const individualFlipCards = document.querySelectorAll(".colours-grid .flip__card"); 
    individualFlipCards.forEach((card) => {
      const flipButtons = card.querySelectorAll(".flip__button") as NodeListOf<HTMLElement>;

      flipButtons.forEach((button) => {
        button.addEventListener("click", (event) => {
          event.stopPropagation(); 
          card.classList.toggle("flipped");
        });
      });
    });
  </script>
</BaseLayout>

<style is:global>
  /* Color variables and base styles (adapt from flags.astro or your theme) */
  :root[data-theme="light"] {
    /* Define your theme's --primary, --secondary, --text, --background, --border etc. */
    /* Example: */
    --primary: #007bff;
    --primary-light: #54aeff;
    --secondary: #6c757d;
    --text: #212529;
    --background: #ffffff;
    --border: #dee2e6;
    --character-gradient-start: var(--primary); /* Used for text hover effect */
    --character-gradient-end: var(--primary-light);
    --character-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
  }

  :root[data-theme="dark"] {
    
    --primary: #0d6efd;
    --primary-light: #5fa2ff;
    --secondary: #adb5bd;
    --text: #f8f9fa;
    --background: #212529;
    --border: #495057;
    --character-gradient-start: hsl(211, 100%, 75%);
    --character-gradient-end: hsl(211, 100%, 85%);
    --character-shadow: 0 0 20px hsla(211, 100%, 75%, 0.2);
  }

  /* Styles for cards within .colours-grid */
  .colours-grid .flip__card {
    width: 100%;
    height: 100%;
    perspective: 1000px;
    min-height: 200px;
  }

  .colours-grid .flip__card .image {
    object-fit: cover; 
    width: 100%;
    height: 100%;
    background-color: var(--border); 
  }

  /* Specific style for colour images on the back */
  .colours-grid .flip__card .colour-image {
    object-fit: cover;
    background-color: transparent !important;
    /* border: 1px solid #eee; */ /* Optional border for the image */
    max-width: 100%; 
    max-height: 100%;
  }
  
  .colours-grid .flip__card .card-content-front {
    display: flex;
    flex-direction: column;
    justify-content: center; /* Center content vertically */
    align-items: center; /* Center content horizontally */
    height: 100%; /* Take full height of the card front's content area */
    text-align: center;
    padding: 1rem; /* Add some padding */
  }

  .colours-grid .flip__card .text { /* For the Colour Name on the front */
    font-size: 1.5rem; 
    font-weight: 700;
    color: var(--text); 
    margin: 0;
    transition: color 0.3s ease;
  }

  .colours-grid .flip__card .flipped__text { /* Fallback text on back */
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
    font-size: 1.5rem;
    font-weight: 800;
    margin: 0;
    line-height: 1;
    color: var(--text); 
    text-shadow: var(--character-shadow);
    text-align: center;
    padding: 1rem;
  }

  .colours-grid .flip__card .card {
    background: linear-gradient(145deg, var(--background), color-mix(in srgb, var(--background) 97%, var(--text) 3%));
    border-radius: 1.25rem;
    /* padding: 1.75rem; /* Padding is now in .card-content-front for better control */
    box-shadow:
      0 4px 15px rgba(0, 0, 0, 0.05),
      0 1px 2px rgba(0, 0, 0, 0.1);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex; /* Keep for overall card structure */
    flex-direction: column; /* Keep for overall card structure */
    /* gap: 1.25rem; /* Gap might not be needed if front content is simple */
    position: relative;
    overflow: hidden;
    border: 1px solid var(--border);
    backdrop-filter: blur(10px);
    width: 100%;
    height: 100%;
  }

  .colours-grid .flip__card .card:hover .card__glow {
    opacity: 1;
  }

  .colours-grid .flip__card .card.card__front:hover .text { /* Colour name text on front hover */
    /* Remove background gradient effect */
    background: none;
    -webkit-background-clip: initial;
    background-clip: initial;
    /* Set text color to primary */
    color: var(--primary); 
  }

  .colours-grid .flip__card .flip__card__inner {
    width: 100%;
    height: 100%;
    text-align: left;
    transition: transform 0.8s;
    transform-style: preserve-3d;
  }

  .colours-grid .flip__card .card__front,
  .colours-grid .flip__card .card__back {
    position: absolute;
    width: 100%;
    height: 100%;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    top: 0;
    left: 0;
  }

  .colours-grid .flip__card .card__back {
    padding: 0; /* Remove padding if image is to fill the back */
    transform: rotateY(180deg);
    display: flex; 
    justify-content: center;
    align-items: center;
    background-color: var(--background); /* Or a specific back card color */
  }

  .colours-grid .flip__card.flipped .flip__card__inner {
    transform: rotateY(180deg);
  }

  .colours-grid .flip__card .flip__button {
    position: absolute;
    top: 0.75rem; 
    right: 0.75rem;
    z-index: 10; 
  }

  .colours-grid .flip__card .flip__button__text {
    font-size: 0.875rem;
    color: var(--secondary);
    padding: 0.35rem 0.75rem;
    background: color-mix(in srgb, var(--background) 97%, var(--text) 3%);
    border-radius: 2rem;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 1px solid var(--border);
    text-align: left;
  }

  .colours-grid .flip__card .flip__button__text:hover {
    background: var(--primary);
    color: var(--text-on-primary, #fff); 
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .colours-grid .flip__card .card__glow {
    position: absolute;
    inset: 0;
    background: radial-gradient(
      circle at var(--mouse-x, 50%) var(--mouse-y, 50%),
      color-mix(in srgb, var(--primary) 10%, transparent) 0%,
      transparent 60%
    );
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }

  @media (max-width: 768px) {
    .colours-grid .flip__card .text { 
      font-size: 1.25rem;
    }
    .colours-grid .flip__card .flipped__text { 
        font-size: 1.2rem;
    }
  }

  /* Grid layout for the colours page */
  .colours-grid.grid-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); /* Adjust card size */
    gap: 1.5rem; 
    padding: 1rem; 
  }
</style>