---
import BackIcon from "@/assets/icons/back.svg";
import BaseLayout from "../../layouts/Base.astro";
import "@/assets/styles/alphabets/index.css"; // Global styles from alphabets index
import allAlphabetsData from "../../data/alphabets.json"; // Import the JSON data

// Define types for the data structure we expect from alphabets.json

interface HindiLetter {
  letter: string;
  code: string;
  meaning: string;
  emoji: string;
  unicode: string;
}

interface HindiAlphabetData {
  icon: string;
  description: string;
  data: {
    vowels: HindiLetter[];
    consonants: HindiLetter[];
  };
}

// For other alphabets:
interface AlphabetCategory {
  icon: string;
  description: string;
  data: any[]; // or a more specific type for those categories
}

// The main type:
interface AlphabetsData {
  general?: AlphabetCategory;
  greek?: AlphabetCategory;
  geek?: AlphabetCategory;
  nato?: AlphabetCategory;
  braille?: AlphabetCategory;
  fruits?: AlphabetCategory;
  animals?: AlphabetCategory;
  countries?: AlphabetCategory;
  Indian?: AlphabetCategory;
  hindi?: HindiAlphabetData;
  [key: string]: any; // (optional) allows for future flexibility
}

const typedAlphabetData = allAlphabetsData as AlphabetsData;

const pageTitle = "Learn Numbers";

// Get specific data from alphabets.json
const hindiNumbersCategory = typedAlphabetData["Hindi Numbers"];
const romanNumeralsCategory = typedAlphabetData["Roman Numerals"];

const numberSections = [
  {
    id: "english-numbers",
    title: "English Numbers", // Display title for the card
    categoryKey: "English Numbers", // For consistency, though not directly from JSON for this one
    description: "Learn about numbers in English (e.g., 1, 2, 3, One, Two, Three).",
    href: "/numbers/english",
    icon: "üî¢"
  },
  {
    id: "hindi-numbers",
    title: "Hindi Numbers",
    categoryKey: "Hindi Numbers",
    description: hindiNumbersCategory?.description || "Learn Devanagari numerals.",
    href: "/numbers/hindi",
    icon: hindiNumbersCategory?.icon || "üî¢"
  },
  {
    id: "roman-numerals",
    title: "Roman Numerals",
    categoryKey: "Roman Numerals",
    description: romanNumeralsCategory?.description || "Learn to read and write Roman numerals.",
    href: "/numbers/roman",
    icon: romanNumeralsCategory?.icon || "üèõÔ∏è"
  },
  {
    id: "Morse Code Numbers",
    title: "Morse Code Numbers",
    categoryKey: "Morse Code Numbers",
    description: "Learn to read and write Morse code for numbers.",
    href: "/numbers/morse",
    icon: "üì°"
  }
];
---

<BaseLayout meta={{ title: pageTitle }}>
  <section class="container__alphabets">
    <a href="/" class="back">
      <BackIcon class="bck" />
    </a>
    <div class="alphabets__header">
      <h1>{pageTitle}</h1>
    </div>
    <ul class="list__alphabets">
      {
        numberSections.map((section, index) => (
          <li class="card" style={`animation-delay: ${index * 50}ms`}>
            <div class="card__inner">
              {" "}
              {/* Replicating structure from alphabets/index.astro */}
              <div class="card__content">
                {section.icon && <div class="category__icon">{section.icon}</div>}
                <h2 class="category__title">{section.title}</h2>
                <p class="category__description">{section.description}</p>
              </div>
              <div class="card__actions">
                {/* "Learn" button, styled like 'btn-playground' */}
                <a href={section.href} class="btn btn-playground">
                  <span class="icon">üìö</span> {/* Using a "learn" icon */}
                  Explore
                </a>
                {/* "Practice" button has been removed */}
              </div>
            </div>
          </li>
        ))
      }
    </ul>
  </section>
</BaseLayout>

{/* Styles copied directly from src/pages/alphabets/index.astro for exact appearance */}
<style>
  .back {
    left: 0;
    top: 1rem;
    margin-bottom: 5px;
    display: flex;
    align-items: center;
    gap: 0.1rem;
    text-decoration: none;
    color: light-dark(black, white);
    font-weight: 500;
    font-size: 1.1rem;
    transition: color 0.3s ease;
  }

  .back svg {
    width: 24px;
    height: 24px;
    stroke: currentColor;
  }
  .card__inner {
    background: var(--background);
    border: 2px solid var(--border);
    border-radius: 1rem;
    padding: clamp(1rem, 3vw, 1.25rem);
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    gap: clamp(0.75rem, 2vw, 1rem);
    transition: all 0.2s ease;
  }

  .category__icon {
    font-size: clamp(2rem, 4vw, 2.5rem);
    margin-bottom: clamp(0.25rem, 2vw, 0.5rem);
    line-height: 1; /* Ensure icon vertical alignment if it's text-based */
  }

  .category__title {
    font-size: clamp(1.25rem, 3vw, 1.5rem);
    margin-bottom: 0.75rem;
  }

  .category__description {
    font-size: clamp(0.9rem, 2vw, 0.95rem);
    line-height: 1.6;
    /* Ensure description takes available space if card content is flex column */
    flex-grow: 1;
  }

  .btn {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: clamp(0.5rem, 2vw, 0.75rem) clamp(0.75rem, 2vw, 2rem);
    border-radius: 0.75rem;
    font-weight: 600;
    font-size: clamp(0.9rem, 2vw, 1.1rem);
    transition: all 0.2s ease;
    text-decoration: none;
    flex: 1; /* This will make the single "Learn" button take full width of card__actions */
    min-width: 119px; /* from alphabets/index.astro */
  }

  .card__actions {
    display: flex;
    /* gap: 0.4rem; */ /* Gap is not needed if there's only one button */
    /* flex-wrap: wrap; */ /* Not needed for a single button */
    margin-top: auto; /* Push actions to the bottom if card__content is main flex container */
  }

  @media (max-width: 768px) {
    /* .card__actions { */ /* No longer need to change direction for a single button */
    /* flex-direction: column; */
    /* gap: 0.75rem; */
    /* } */

    .btn {
      width: 100%; /* Ensures the button takes full width on small screens too */
    }
  }

  /* Styling for buttons to match playground/board appearance */
  .btn-playground {
    /* For "Learn" button */
    background: var(--primary);
    color: var(--background); /* Assuming --background is light for dark primary */
  }

  /* .btn-board class styling can be removed if not used elsewhere, or kept for future use */
  /*
  .btn-board { 
    background: var(--background);
    color: var(--text);
    border: 2px solid var(--border);
  }
  */

  .card:hover .card__inner {
    transform: translateY(-3px);
    border-color: var(--primary);
  }

  .btn:hover {
    transform: translateY(-2px);
  }

  .btn-playground:hover {
    background: var(--primary-light); /* Assuming --primary-light is defined */
  }

  /*
  .btn-board:hover {
    background: color-mix(in srgb, var(--background) 97%, var(--text) 3%); 
  }
  */

  .icon {
    /* General icon styling within buttons */
    font-size: 1.2em;
    margin-right: 0.5em; /* Space between icon and text in button */
  }
</style>
