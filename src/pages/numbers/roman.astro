---
import BaseLayout from "../../layouts/Base.astro"; 
import LetterCard from "../../components/LetterCard.astro"; 
import BackButton from "../../components/ui/backButton.astro";     
import "../../assets/styles/varnmala/greek-alphabet.css"; // Import the CSS styles

// Define the type for our Roman numeral data entries
export interface RomanNumeralEntry {
  id: number;
  letter: string; // The Roman numeral itself (e.g., "I", "V")
  text?: string;   // The numeric value (e.g., "1", "5")
  description?: string; // The word for the number (e.g., "One", "Five")
  code?: number;   // Corresponds to the numeric value for simplicity
  emoji?: string;  // Associated Braille emoji (can be empty if not applicable/available)
}

const pageTitle = "Roman Numerals";
const category = "roman-numerals"; 

const romanNumeralsData: RomanNumeralEntry[] = [
  { id: 0, letter: "N", text: "0", description: "Null (Zero)", code: 0, emoji: "" },
  { id: 1, letter: "I", text: "1", description: "One", code: 1, emoji: "⠁" },
  { id: 2, letter: "II", text: "2", description: "Two", code: 2, emoji: "⠃" },
  { id: 3, letter: "III", text: "3", description: "Three", code: 3, emoji: "⠉" },
  { id: 4, letter: "IV", text: "4", description: "Four", code: 4, emoji: "⠙" },
  { id: 5, letter: "V", text: "5", description: "Five", code: 5, emoji: "⠑" },
  { id: 6, letter: "VI", text: "6", description: "Six", code: 6, emoji: "⠋" },
  { id: 7, letter: "VII", text: "7", description: "Seven", code: 7, emoji: "⠛" },
  { id: 8, letter: "VIII", text: "8", description: "Eight", code: 8, emoji: "⠓" },
  { id: 9, letter: "IX", text: "9", description: "Nine", code: 9, emoji: "⠊" },
  { id: 10, letter: "X", text: "10", description: "Ten", code: 10, emoji: "⠚" },
  { id: 11, letter: "XI", text: "11", description: "Eleven", code: 11, emoji: "⠁⠁" },
  { id: 20, letter: "XX", text: "20", description: "Twenty", code: 20, emoji: "⠃⠚" },
  { id: 30, letter: "XXX", text: "30", description: "Thirty", code: 30, emoji: "⠉⠚" },
  { id: 40, letter: "XL", text: "40", description: "Forty", code: 40, emoji: "" },
  { id: 50, letter: "L", text: "50", description: "Fifty", code: 50, emoji: "⠇" },
  { id: 60, letter: "LX", text: "60", description: "Sixty", code: 60, emoji: "" },
  { id: 70, letter: "LXX", text: "70", description: "Seventy", code: 70, emoji: "" },
  { id: 80, letter: "LXXX", text: "80", description: "Eighty", code: 80, emoji: "" },
  { id: 90, letter: "XC", text: "90", description: "Ninety", code: 90, emoji: "" },
  { id: 100, letter: "C", text: "100", description: "One Hundred", code: 100, emoji: "⠋" },
  { id: 200, letter: "CC", text: "200", description: "Two Hundred", code: 200, emoji: "" },
  { id: 300, letter: "CCC", text: "300", description: "Three Hundred", code: 300, emoji: "" },
  { id: 400, letter: "CD", text: "400", description: "Four Hundred", code: 400, emoji: "" },
  { id: 500, letter: "D", text: "500", description: "Five Hundred", code: 500, emoji: "⠙" },
  { id: 600, letter: "DC", text: "600", description: "Six Hundred", code: 600, emoji: "" },
  { id: 700, letter: "DCC", text: "700", description: "Seven Hundred", code: 700, emoji: "" },
  { id: 800, letter: "DCCC", text: "800", description: "Eight Hundred", code: 800, emoji: "" },
  { id: 900, letter: "CM", text: "900", description: "Nine Hundred", code: 900, emoji: "" },
  { id: 1000, letter: "M", text: "1000", description: "One Thousand", code: 1000, emoji: "⠍" },
  { id: 1001, letter: "MI", text: "1001", description: "One Thousand One", code: 1001, emoji: "" }
];
---

<BaseLayout meta={{ title: pageTitle }}>
  <article class="container__page alphabet-page-container">
    <div class="page-header">
      <BackButton href="/numbers" />
      <h1 class="page-main-title">{pageTitle}</h1>
      <button id="flip-all-button" class="flip__all__button">Flip All Cards</button>
    </div>

    <div class="grid-container alphabet-grid">
      {
        romanNumeralsData.map((entry) => {
          const letterCardItem = {
            ...entry,
            text: entry.text || "", 
            description: entry.description || "",
            // This ensures the numeric value (entry.text) is used for the back of the card
            // if LetterCard.astro uses item.emoji for the back content.
            emoji: entry.text || "" 
          };
          return <LetterCard item={letterCardItem} category={category} />;
        })
      }
    </div>
  </article>

  <script>
    const flipAllButton = document.getElementById("flip-all-button") as HTMLButtonElement | null;
    const flipCards = document.querySelectorAll(".flip__card"); 
    let allFlipped = false;

    if (flipAllButton) {
      flipAllButton.addEventListener("click", () => {
        allFlipped = !allFlipped;

        flipCards.forEach((card) => {
          const flipCardElement = card as HTMLElement; // Cast to HTMLElement
          if (allFlipped) {
            flipCardElement.classList.add("flipped");
          } else {
            flipCardElement.classList.remove("flipped");
          }
           // Also toggle flip button text/icon on each card if LetterCard handles it
          const allButtonsOnThisCard = flipCardElement.querySelectorAll(".flip__button") as NodeListOf<HTMLElement>;
          allButtonsOnThisCard.forEach(btn => {
            const textLabel = btn.querySelector(".flip-text-label") as HTMLElement | null;
            const symbolLabel = btn.querySelector(".rotate-symbol-label") as HTMLElement | null;
            if (textLabel && symbolLabel) {
              if (allFlipped) {
                textLabel.classList.add("is-hidden");
                symbolLabel.classList.remove("is-hidden");
              } else {
                textLabel.classList.remove("is-hidden");
                symbolLabel.classList.add("is-hidden");
              }
            }
          });
        });
        
        flipAllButton.textContent = allFlipped ? "Reset All Cards" : "Flip All Cards";
        
        flipAllButton.classList.add("active");
        setTimeout(() => {
          if (flipAllButton) { 
            flipAllButton.classList.remove("active");
          }
        }, 300);
      });
    } else {
      console.warn("Flip All button with ID 'flip-all-button' not found.");
    }

    const cardsForMouseInteraction = document.querySelectorAll(".alphabet-grid .card"); 
    cardsForMouseInteraction.forEach((cardElement) => { 
      cardElement.addEventListener("mousemove", (e: Event) => {
        const htmlCardElement = cardElement as HTMLElement; 
        const rect = htmlCardElement.getBoundingClientRect();
        const event = e as MouseEvent;
        const x = ((event.clientX - rect.left) / htmlCardElement.clientWidth) * 100;
        const y = ((event.clientY - rect.top) / htmlCardElement.clientHeight) * 100;
        htmlCardElement.style.setProperty("--mouse-x", `${x}%`);
        htmlCardElement.style.setProperty("--mouse-y", `${y}%`);
      });
    });
  </script>
</BaseLayout>