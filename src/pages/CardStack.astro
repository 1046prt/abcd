---
import { alphabetMapper } from "@/mappers/alphabet";
import { IMAGE_DIR } from "@/utils/constants";
import Base from "@/layouts/Base";
import BackButton from "@/components/ui/backButton.astro" ;
import Help from "@/components/Help.astro";

const pageTitle = "Stack | Interactive Alphabet";
const pageDescription = "Explore the interactive alphabet with images and descriptions for each letter in a stack display format.";

const pageMeta = {
  title: pageTitle,
  description: pageDescription
};

interface AlphabetItem {
  key: string;
  value: string;
  desc: string;
}

const items: Record<string, AlphabetItem> = alphabetMapper.reduce((acc, { key, value }) => {
  acc[key.toUpperCase()] = {
    key: key.toUpperCase(),
    value,
    desc: `${value} representing the letter ${key.toUpperCase()}`
  };
  return acc;
}, {} as Record<string, AlphabetItem>);

const entries = Object.entries(items);
const count = entries.length;

function randomAngle(max: number, min: number): number {
  return +(min + (max - min) * Math.random()).toFixed(2);
}

let currentIndex = 0;
---

<Base meta={pageMeta}>
  <Fragment slot="header-right">
    <div class="header-tools-wrapper"></div>
    <Help
      title="Stack Designer"
      description="Swipe or press arrow keys to view the next alphabet-based stack design. "
    />
  </Fragment>
    <BackButton/>
  <main class="alphabet-page">
    <div class="alphabet-wrapper">
      <section
        class="alphabet-container"
        style={`--n: ${count}; --k: ${currentIndex}`}
        data-total={count}
        data-current-index={currentIndex}
        role="region"
        aria-label="Interactive Alphabet Explorer"
      >
        <header class="alphabet-header">
          <h1 class="alphabet-title">Interactive Alphabet</h1>
        </header>
        
        <div class="content-area">
          <div class="image-container">
            {entries.map(([key, item], i) => {
              const angle = randomAngle(15, -15);
              return (
                <article
                  class="alphabet-item"
                  style={`--i: ${i}; --a: ${angle}deg;`}
                  data-letter={key}
                  data-index={i}
                  role="img"
                  aria-label={`Letter ${key} - ${item.value}`}
                  tabindex={i === currentIndex ? "0" : "-1"}
                >
                  <img
                    class="item-image"
                    src={`${IMAGE_DIR}/${item.value}.jpg`}
                    alt={item.desc}
                    loading="lazy"
                  />
                  <div class="text-content">
                    <h2 class="letter" aria-hidden="true">{key}</h2>
                    <p class="item-desc">{item.value}</p>
                  </div>
                </article>
              );
            })}
          </div>
        </div>
        
        <nav class="nav-buttons" aria-label="Alphabet navigation">
          <button
            class="nav-button prev-button"
            aria-label="Previous letter"
            data-direction="prev"
            type="button"
          >
            <span class="sr-only">Previous</span>
          </button>
          <button
            class="nav-button next-button"
            aria-label="Next letter"
            data-direction="next"
            type="button"
          >
            <span class="sr-only">Next</span>
          </button>
        </nav>
      </section>

      <div class="keyboard-hint" role="status" aria-live="polite">
        Use arrow keys or press any letter key to navigate
      </div>
    </div>
  </main>

  <style>
    @charset "UTF-8";
    :root {
      --t: 0.8s;
      --ease: cubic-bezier(0.25, 0.46, 0.45, 0.94);
    }

    /* Register custom properties for animation */
    @property --p {
      syntax: '<number>';
      initial-value: 0;
      inherits: true;
    }
    @property --v {
      syntax: '<number>';
      initial-value: 0;
      inherits: true;
    }

    .alphabet-page {
      flex: 1;
      display: flex;
      flex-direction: column;
      min-height: 100vh;
      overflow: hidden;
    }

    .alphabet-wrapper {
      width: 100%;
      height: 100vh;
      padding: 2rem;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      position: relative;
    }

    .alphabet-container {
      position: relative;
      width: 100%;
      max-width: 1200px;
      height: 100%;
      min-height: 600px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      gap: 2rem;
      color: #f1f5f9;
      font: 1em poppins, sans-serif;
      counter-reset: k calc(1 + var(--k)) n var(--n);
      
      /* Animation properties */
      --p: var(--k);
      --abs-p: abs(var(--k) - var(--p));
      --end: clamp(0, var(--abs-p) - 1, 1);
      --dir: calc((1 - 2*var(--end))*sign(var(--k) - var(--p)));
      --fwd: calc(.5*(1 + var(--dir)));
      --v: var(--k);
      --abs-v: abs(var(--v) - var(--p));
      --prg: calc(var(--abs-v)/(1 - var(--end) + var(--end)*(var(--n) - 1)));
      transition: --p 0s var(--t), --v var(--t);
    }

    .alphabet-header {
      text-align: center;
      z-index: 100;
    }

    .alphabet-title {
      font-size: 2.5rem;
      font-weight: 700;
      background: linear-gradient(135deg, #818cf8, #a5b4fc, #c7d2fe);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin: 0;
      text-shadow: 0 4px 20px rgba(129, 140, 248, 0.3);
    }
    
    .content-area {
      position: relative;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      flex: 1;
      width: 100%;
      max-width: 800px;
    }

    .image-container {
      position: relative;
      width: 500px;
      height: 400px;
      perspective: 1200px;
      transform-style: preserve-3d;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .alphabet-item {
      --abs-top: abs(var(--k) - var(--i));
      --not-top: min(1, var(--abs-top));
      --top: calc(1 - var(--not-top));
      --val-mov: ((1 - var(--fwd))*var(--p) + var(--fwd)*var(--k) - var(--i));
      --abs-mov: abs(var(--val-mov));
      --not-mov: min(1, var(--abs-mov));
      --mov: calc(1 - var(--not-mov));
      --sin: sin(var(--prg)*.5turn);
      
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      gap: 1rem;
      z-index: mod(calc(var(--n) - 1 + var(--i) - var(--k)), var(--n));
      transition: z-index var(--t) cubic-bezier(1, -.9, 0, 1.9);
    }

    .alphabet-item:not(.active) .text-content {
      display: none;
    }

    .item-image {
      width: 450px;
      height: 300px;
      object-fit: cover;
      object-position: center;
      border-radius: 1rem;
      border: 2px solid light-dark(transparent,rgba(129, 140, 248, 0.4));
      backdrop-filter: blur(10px);
      translate: calc(-100% * var(--mov) * sqrt(var(--sin)));
      rotate: calc((1 - var(--sin)) * var(--a));
      will-change: transform, opacity;
    }

    .text-content {
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
      gap: 0.5rem;
      width: 100%;
      max-width: 400px;
      translate: 0 calc(var(--not-top)*1lh);
      opacity: var(--top);
      transition: translate calc(.5*var(--t)) calc(var(--top)*.5*var(--t)), opacity calc(.5*var(--t)) calc(var(--top)*.5*var(--t));
    }

    .letter {
      font-size: 3rem;
      font-weight: 900;
      text-transform: uppercase;
      text-shadow: 0 4px 20px rgba(129, 140, 248, 0.3);
      background: linear-gradient(135deg, #818cf8, #a5b4fc);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin: 0;
      line-height: 1;
      min-height: 3rem;
    }

    .item-desc {
      font-size: 1.5rem;
      text-transform: uppercase;
      color: rgba(241, 245, 249, 0.9);
      font-weight: 600;
      text-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
      margin: 0;
      line-height: 1.2;
      min-height: 2rem;
    }

      .nav-buttons {
      display: flex;
      gap: 5rem;
      justify-content: center;
      align-items: center;
      z-index: 200;
    }

    .nav-button {
      width: 4rem;
      height: 4rem;
      border-radius: 50%;
      margin-bottom: 10%;
      background: linear-gradient(135deg, rgba(129, 140, 248, 0.2), rgba(165, 180, 252, 0.1));
      color: #818cf8;
      font-size: 1rem;
      font-weight: 900;
      transition: all 0.3s ease-out;
      cursor: pointer;
      border: 2px solid rgba(129, 140, 248, 0.3);
      backdrop-filter: blur(10px);
      box-shadow:
        0 4px 15px rgba(129, 140, 248, 0.2),
        inset 0 1px 0 rgba(255, 255, 255, 0.1);
    }

    .nav-button::before {
      content: "";
      position: absolute;
      top: 50%;
      left: 50%;
      width: 12px;
      height: 12px;
      border: solid 3px currentColor;
      border-width: 0 3px 3px 0;
      transform: translate(-50%, -50%) rotate(135deg);
      transition: transform 0.3s ease-out;
    }

    .nav-button.next-button::before {
      transform: translate(-50%, -50%) rotate(-45deg);
    }

    .nav-button:hover,
    .nav-button:focus {
      background: linear-gradient(135deg, rgba(129, 140, 248, 0.4), rgba(165, 180, 252, 0.2));
      color: #a5b4fc;
      border-color: rgba(129, 140, 248, 0.6);
      box-shadow:
        0 6px 25px rgba(129, 140, 248, 0.4),
        inset 0 1px 0 rgba(255, 255, 255, 0.2);
      transform: translateY(-2px) scale(1.05);
    }

    .nav-button:active {
      transform: translateY(0) scale(0.95);
    }


    .keyboard-hint {
      position: absolute;
      bottom: -10px;
      left: 50%;
      transform: translateX(-50%);
      color: rgba(241, 245, 249, 0.5);
      font-size: 0.875rem;
      text-align: center;
      z-index: 1000;
      transition: opacity 0.3s ease-out;
      background: rgba(7, 4, 16, 0.8);
      padding: 0.5rem 1rem;
      border-radius: 1rem;
      border: 1px solid rgba(129, 140, 248, 0.2);
      backdrop-filter: blur(10px);
    }

    .sr-only {
      position: absolute;
      width: 5px;
      height: 10px;
      padding: 10px;
      margin: -10px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border: 0;
    }

    /* Support for browsers without abs() or sign() */
    @supports not (scale: Abs(-2)) {
      .alphabet-container {
        --abs-p: max(var(--k) - var(--p), var(--p) - var(--k));
        --abs-v: max(var(--v) - var(--p), var(--p) - var(--v));
      }
      
      .alphabet-item {
        --abs-top: max(var(--k) - var(--i), var(--i) - var(--k));
        --abs-mov: max(var(--val-mov), -1*var(--val-mov));
      }
    }

    @supports not (scale: Sign(-2)) {
      .alphabet-container {
        --dir: clamp(-1, (var(--k) - var(--p))*100000, 1);
      }
    }

    /* Responsive Design */
    @media (max-width: 1200px) {
      .alphabet-wrapper {
        padding: 2rem 1rem;
      }
      
      .alphabet-title {
        font-size: 2rem;
      }
      
      .image-container {
        width: 400px;
        height: 380px;
      }
      
      .item-image {
        width: 360px;
        height: 260px;
      }
    }

    @media (max-width: 768px) {
      .alphabet-wrapper {
        padding: 1.5rem 1rem;
      }
      
      .alphabet-title {
        font-size: 1.75rem;
      }
      
      .image-container {
        width: 300px;
        height: 360px;
      }
      
      .item-image {
        width: 260px;
        height: 240px;
      }
      
      .letter {
        font-size: 2.5rem;
        min-height: 2.5rem;
      }
      
      .item-desc {
        font-size: 1.25rem;
        min-height: 1.8rem;
      }

      .nav-button {
        width: 0.8lh;
        font-size: 1.5em;
      }

      .nav-buttons {
        gap: 1.5em;
      }
    }

    @media (max-width: 480px) {
      .alphabet-wrapper {
        padding: 1rem 0.5rem;
      }
      
      .alphabet-title {
        font-size: 1.5rem;
      }
      
      .image-container {
        width: 280px;
        height: 340px;
      }
      
      .item-image {
        width: 240px;
        height: 200px;
      }
      
      .letter {
        font-size: 2rem;
        min-height: 2rem;
      }
      
      .item-desc {
        font-size: 1.1rem;
        min-height: 1.5rem;
      }

      .nav-button {
        width: 0.7lh;
        font-size: 1.25em;
      }

      .nav-buttons {
        gap: 1em;
      }
    }

    @media (prefers-reduced-motion: reduce) {
      :root {
        --t: 0.2s;
      }
      
      .alphabet-item,
      .nav-button {
        transition-duration: 0.1s;
      }
    }

    .nav-button:focus-visible {
      outline: 2px solid #818cf8;
      outline-offset: 2px;
    }

    .alphabet-item:focus {
      outline: none;
    }

    .alphabet-item:focus-visible {
      outline: none;
    }
  </style>

<script>(function () {
  const container = document.querySelector('.alphabet-container')! as HTMLElement; // <-- fixed here
  const items = Array.from(document.querySelectorAll('.alphabet-item')) as HTMLElement[];
  const navButtons = Array.from(document.querySelectorAll('[data-direction]')) as HTMLElement[];

  const count: number = parseInt(container.dataset.total || '0', 10);
  let currentIndex: number = parseInt(container.dataset.currentIndex || '0', 10);
  let isTransitioning = false;

  const alphabetMap: Record<string, number> = {};
  items.forEach((item, index) => {
    const letter = item.dataset.letter;
    if (letter) {
      alphabetMap[letter.toUpperCase()] = index;
    }
  });

  function updateItemPositions(): void {
    items.forEach((item, index) => {
      item.classList.remove('active');
      item.setAttribute('tabindex', index === currentIndex ? '0' : '-1');
      item.setAttribute('aria-current', index === currentIndex ? 'true' : 'false');
      if (index === currentIndex) {
        item.classList.add('active');
      }
    });

    container.style.setProperty('--k', currentIndex.toString());
  }

  function navigateToIndex(newIndex: number, animate: boolean = true): void {
    if (isTransitioning || newIndex === currentIndex) return;

    const targetIndex = ((newIndex % count) + count) % count;

    if (animate) {
      isTransitioning = true;

      const newActiveItem = items[targetIndex];
      const previousActiveItem = items[currentIndex];

      if (previousActiveItem) previousActiveItem.blur();

      currentIndex = targetIndex;
      container.dataset.currentIndex = currentIndex.toString();
      updateItemPositions();

      setTimeout(() => {
        isTransitioning = false;
        if (newActiveItem && document.activeElement !== newActiveItem) {
          newActiveItem.focus({ preventScroll: true });
        }
      }, 800);
    } else {
      currentIndex = targetIndex;
      container.dataset.currentIndex = currentIndex.toString();
      updateItemPositions();

      const activeItem = items[targetIndex];
      if (activeItem && document.activeElement !== activeItem) {
        activeItem.focus({ preventScroll: true });
      }
    }
  }

  function navigateToLetter(letter: string): void {
    const targetIndex = alphabetMap[letter.toUpperCase()];
    if (targetIndex !== undefined) {
      navigateToIndex(targetIndex);
    }
  }

  function handleNavigation(direction: string): void {
    if (isTransitioning) return;
    const increment = direction === 'next' ? 1 : -1;
    const newIndex = currentIndex + increment;
    navigateToIndex(newIndex);
  }

  navButtons.forEach((button) => {
    button.addEventListener('click', (e: Event) => {
      e.preventDefault();
      const direction = (button as HTMLElement).dataset.direction;
      if (direction) handleNavigation(direction);
    });
  });

  document.addEventListener('keydown', (e: KeyboardEvent) => {
    const tag = (e.target as HTMLElement)?.tagName;
    if (tag === 'INPUT' || tag === 'TEXTAREA') return;

    switch (e.key) {
      case 'ArrowLeft':
        e.preventDefault();
        handleNavigation('prev');
        break;
      case 'ArrowRight':
        e.preventDefault();
        handleNavigation('next');
        break;
      case 'Home':
        e.preventDefault();
        navigateToIndex(0);
        break;
      case 'End':
        e.preventDefault();
        navigateToIndex(count - 1);
        break;
      default:
        if (/^[a-zA-Z]$/.test(e.key)) {
          e.preventDefault();
          navigateToLetter(e.key);
        }
        break;
    }
  });

  // Touch support
  let touchStartX = 0;
  let touchEndX = 0;
  const minSwipeDistance = 50;

  container.addEventListener('touchstart', (e: TouchEvent) => {
    touchStartX = e.changedTouches[0].screenX;
  }, { passive: true });

  container.addEventListener('touchend', (e: TouchEvent) => {
    touchEndX = e.changedTouches[0].screenX;
    const deltaX = touchEndX - touchStartX;

    if (Math.abs(deltaX) > minSwipeDistance) {
      handleNavigation(deltaX > 0 ? 'prev' : 'next');
    }
  }, { passive: true });

  let hintTimeout: ReturnType<typeof setTimeout>;
  const keyboardHint = document.querySelector('.keyboard-hint') as HTMLElement | null;

  function hideHintAfterDelay(): void {
    clearTimeout(hintTimeout);
    hintTimeout = setTimeout(() => {
      if (keyboardHint) {
        keyboardHint.style.opacity = '0';
      }
    });
  }

  ['keydown', 'click', 'touchstart'].forEach((event) => {
    document.addEventListener(event, hideHintAfterDelay, { once: true });
  });

  function preloadImages(): void {
    items.forEach((item) => {
      const img = item.querySelector('.item-image') as HTMLImageElement | null;
      if (img && img.src) {
        const preloadImg = new Image();
        preloadImg.src = img.src;
      }
    });
  }

  items.forEach((item) => {
    const img = item.querySelector('.item-image') as HTMLImageElement | null;
    if (img) {
      img.addEventListener('error', () => {
        const parent = img.parentElement as HTMLElement;
        parent.style.backgroundColor = 'rgba(129, 140, 248, 0.1)';
        parent.style.display = 'flex';
        parent.style.alignItems = 'center';
        parent.style.justifyContent = 'center';
        parent.innerHTML = '<span style="color: rgba(241, 245, 249, 0.5); font-size: 2rem;">📷</span>';
      });
    }
  });

  function initializeAlphabet(): void {
    updateItemPositions();
    preloadImages();
  }

  let resizeTimeout: ReturnType<typeof setTimeout>;
  window.addEventListener('resize', () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(() => {
      updateItemPositions();
    }, 250);
  });

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeAlphabet);
  } else {
    initializeAlphabet();
  }

  (window as any).alphabetCleanup = function (): void {
    clearTimeout(hintTimeout);
    clearTimeout(resizeTimeout);
  };
})();
</script>
</Base>