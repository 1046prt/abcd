---
import "@/assets/styles/alphabets/[alphabet]/playground.css";

import Help from "@/components/Help.astro";
import BaseLayout from "@/layouts/Base";
import rawAlphabetData from "@/data/alphabets.json";
import BackButton from "@/components/ui/backButton.astro";

import { type AlphabetsData } from "@/types/alphabet";
const alphabetData = rawAlphabetData as AlphabetsData;

export const prerender = true;

export async function getStaticPaths() {
  const alphabetData = rawAlphabetData as AlphabetsData;
  const categories = Object.keys(alphabetData);
  return categories.map((category) => ({
    params: { alphabet: category }
  }));
}

const { alphabet } = Astro.params;
const currentCategory = alphabetData[alphabet as keyof AlphabetsData];
---

<BaseLayout meta={{ title: `${alphabet?.charAt(0).toUpperCase() + alphabet?.slice(1)} - Playground` }}>
  <Fragment slot="header-right">
    <Help
      title={`${alphabet?.charAt(0).toUpperCase() + alphabet?.slice(1)} Playground`}
      description="Press any letter key (A-Z) or number key (0-9) to see the corresponding information from the selected alphabet category."
    />
  </Fragment>

  <span>
    <BackButton />
    <h1 class="title_header">Press key to see the magic</h1>
  </span>
  <article class="tv container__typing">
    <div id="letter" class="letter">A</div>
    <div class="content__display">
      <div id="emoji" class="emoji">{currentCategory.icon}</div>
      <div id="image-container" class="image__container"></div>
    </div>
    <div id="spelling" class="spelling"></div>
    <div id="description" class="description"></div>
  </article>

  <script is:inline define:vars={{ alphabetData: currentCategory.data, category: alphabet }}>
    const letterDiv = document.getElementById("letter");
    const emojiDiv = document.getElementById("emoji");
    const imageContainer = document.getElementById("image-container");
    const spellDiv = document.getElementById("spelling");
    const descriptionDiv = document.getElementById("description");

    // For Hindi, use vowels + consonants if present
    let dataArray = [];
    if (category === "hindi" && alphabetData.vowels && alphabetData.consonants) {
      dataArray = [...alphabetData.vowels, ...alphabetData.consonants];
    } else {
      dataArray = alphabetData;
    }
    let currentIndex = 0;

    const drawLetter = (letter, color = "pink") => {
      letterDiv.innerHTML = letter;
      letterDiv.style.color = color;
    };

    const drawInfo = (info, color) => {
      if (!info) return;
      drawLetter(info.letter, color);

      spellDiv.style.fontSize = "";
      spellDiv.style.marginTop = "";
      spellDiv.style.display = "block";
      spellDiv.innerHTML = info.text || info.meaning || "";
      spellDiv.style.color = color;

      document.documentElement.style.setProperty("--steps", (info.text || info.meaning || "").length * 2);

      // Animation handling for spelling
      spellDiv.classList.remove("animation");
      void spellDiv.offsetWidth;
      spellDiv.classList.add("animation");
      spellDiv.style.borderRight = "3px solid";

      if (info.description && info.description.trim() !== "") {
        descriptionDiv.innerHTML = info.description;
        descriptionDiv.style.color = color;
        descriptionDiv.style.display = "block";
        document.documentElement.style.setProperty("--steps-desc", info.description.length * 2);

        // Animation handling for description
        descriptionDiv.classList.remove("animation");
        void descriptionDiv.offsetWidth;
        descriptionDiv.classList.add("animation");
      } else {
        descriptionDiv.innerHTML = ""; // Clear the description
        descriptionDiv.style.display = "none";
      }

      if (info.image) {
        const img = new Image();
        img.onload = function () {
          emojiDiv.style.display = "none";
          imageContainer.style.display = "flex";
          imageContainer.innerHTML = "";
          imageContainer.appendChild(img);

          img.style.width = "auto";
          img.style.height = "auto";
          img.style.maxWidth = "100%";
          img.style.maxHeight = "100%";
        };

        img.src = `/assets/images/alphabets/${category}/${info.image}`;
        img.alt = info.text || info.meaning || "";
      } else if (info.emoji) {
        emojiDiv.innerHTML = info.emoji;
        emojiDiv.style.display = "block";
        imageContainer.style.display = "none";
      } else {
        emojiDiv.style.display = "none";
        imageContainer.style.display = "flex";
        imageContainer.innerHTML = `<div class="content__spelling"></div>`; // Keep it empty

        spellDiv.style.display = "none";
      }
    };

    window.addEventListener("DOMContentLoaded", () => {
      // Show the first letter on load
      if (dataArray.length > 0) {
        drawInfo(dataArray[0], "#FF6B6B");
      }
    });

    const colorBox = ["#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4", "#FFEEAD", "#D4A5A5", "#9B59B6", "#3498DB"];
    const random = (arr) => arr[Math.floor(Math.random() * arr.length)];

    document.addEventListener(
      "keydown",
      (e) => {
        // Only use arrow keys for Hindi (or similar) categories
        if (category === "hindi") {
          if (e.key === "ArrowRight") {
            e.preventDefault();
            currentIndex = (currentIndex + 1) % dataArray.length;
            drawInfo(dataArray[currentIndex], random(colorBox));
          } else if (e.key === "ArrowLeft") {
            e.preventDefault();
            currentIndex = (currentIndex - 1 + dataArray.length) % dataArray.length;
            drawInfo(dataArray[currentIndex], random(colorBox));
          }
        } else {
          // Default behavior for other alphabets (A-Z, 0-9)
          const { key, keyCode } = e;
          const isAlphabet = keyCode >= 65 && keyCode <= 90;
          const isNumber = keyCode >= 48 && keyCode <= 57;
          if (isAlphabet) {
            const keyCapital = key.toUpperCase();
            const info = alphabetData.find((item) => item.letter.toUpperCase() === keyCapital || item.letter === key);
            if (info) drawInfo(info, random(colorBox));
          } else if (isNumber) {
            const info = alphabetData.find((item) => item.letter === key);
            if (info) drawInfo(info, random(colorBox));
          }
        }
      },
      false
    );
  </script>
</BaseLayout>
