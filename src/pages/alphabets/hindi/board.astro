---
import BaseLayout from "@/layouts/Base";
import LetterCard from "@/components/LetterCard.astro";
import BackButton from "@/components/BackButton.astro";
import "@/assets/styles/varnmala/greek-alphabet.css";

const vowels = [
  { letter: "рдЕ", code: "0905", meaning: "рдЕрджрд░рдХ (Ginger)", emoji: "ЁЯлЪ", unicode: "U+1F95D" },
  { letter: "рдЖ", code: "0906", meaning: "рдЖрдо (Mango)", emoji: "ЁЯен", unicode: "U+1F96D" },
  { letter: "рдЗ", code: "0907", meaning: "рдЗрдорд▓реА (Tamarind)", emoji: "ЁЯеФ", unicode: "U+1F330" },
  { letter: "рдИ", code: "0908", meaning: "рдИрдЦ (Sugarcane)", emoji: "ЁЯОЛ", unicode: "U+1F36C" },
  { letter: "рдЙ", code: "0909", meaning: "рдЙрд▓реНрд▓реВ (Owl)", emoji: "ЁЯжЙ", unicode: "U+1F989" },
  { letter: "рдК", code: "090A", meaning: "рдКрдБрдЯ (Camel)", emoji: "ЁЯРл", unicode: "U+1F42B" },
  { letter: "рдЛ", code: "090B", meaning: "рдЛрд╖рд┐ (Sage)", emoji: "ЁЯзШтАНтЩВя╕П", unicode: "U+1F9D8" },
  { letter: "рдП", code: "090F", meaning: "рдПрдбрд╝реА (Heel)", emoji: "ЁЯж╢", unicode: "U+1F9B6" },
  { letter: "рдР", code: "0910", meaning: "рдРрдирдХ (Glasses)", emoji: "ЁЯСУ", unicode: "U+1F453" },
  { letter: "рдУ", code: "0913", meaning: "рдУрдЦрд▓реА (Mortar)", emoji: "ЁЯки", unicode: "U+1FAA8" },
  { letter: "рдФ", code: "0914", meaning: "рдФрд░рдд (Woman)", emoji: "ЁЯСй", unicode: "U+1F469" }
];
const consonants = [
  { letter: "рдХ", code: "0915", meaning: "рдХрдмреВрддрд░ (pigeon)", emoji: "ЁЯРж", unicode: "U+1F426" },
  { letter: "рдЦ", code: "0916", meaning: "рдЦрд░рдЧреЛрд╢ (rabbit)", emoji: "ЁЯРЗ", unicode: "U+1F407" },
  { letter: "рдЧ", code: "0917", meaning: "рдЧрдорд▓рд╛ (flower pot)", emoji: "ЁЯк┤", unicode: "U+1F33C" },
  { letter: "рдШ", code: "0918", meaning: "рдШреЛрдбрд╝рд╛ (horse)", emoji: "ЁЯРО", unicode: "U+1F40E" },
  { letter: "рдЪ", code: "091A", meaning: "рдЪрдореНрдордЪ (spoon)", emoji: "ЁЯеД", unicode: "U+1F944" },
  { letter: "рдЫ", code: "091B", meaning: "рдЫрддрд░реА (umbrella)", emoji: "тШВя╕П", unicode: "U+2602" },
  { letter: "рдЬ", code: "091C", meaning: "рдЬрд╣рд╛рдЬрд╝ (ship)", emoji: "ЁЯЪв", unicode: "U+1F6A2" },
  { letter: "рдЭ", code: "091D", meaning: "рдЭрдВрдбрд╛ (flag)", emoji: "ЁЯПБ", unicode: "U+1F3C1" },
  { letter: "рдЯ", code: "091F", meaning: "рдЯрдорд╛рдЯрд░ (tomato)", emoji: "ЁЯНЕ", unicode: "U+1F345" },
  { letter: "рда", code: "0920", meaning: "рдардареЗрд░рд╛ (brass smith)", emoji: "ЁЯФи", unicode: "U+1F44F" },
  { letter: "рдб", code: "0921", meaning: "рдбрдорд░реВ (Shiva's drum)", emoji: "ЁЯеБ", unicode: "U+1F941" },
  { letter: "рдв", code: "0922", meaning: "рдвреЛрд▓рдХ (drum)", emoji: "ЁЯкШ", unicode: "U+1FA98" },
  { letter: "рдг", code: "0923", meaning: "рдг (none)", emoji: "тЩия╕П", unicode: "U+2668" },
  { letter: "рдд", code: "0924", meaning: "рддрд░рдмреВрдЬ (watermelon)", emoji: "ЁЯНЙ", unicode: "U+1F349" },
  { letter: "рде", code: "0925", meaning: "рдерд╛рд▓реА (plate)", emoji: "ЁЯН╜я╕П", unicode: "U+1F37D" },
  { letter: "рдж", code: "0926", meaning: "рджрд┐рд╡рд╛ (lamp)", emoji: "ЁЯкФ", unicode: "U+1FA94" },
  { letter: "рдз", code: "0927", meaning: "рдзрдиреБрд╖ (bow)", emoji: "ЁЯП╣", unicode: "U+1F3F9" },
  { letter: "рди", code: "0928", meaning: "рдирд╛рдЧ (snake)", emoji: "ЁЯРН", unicode: "U+1F40D" },
  { letter: "рдк", code: "092A", meaning: "рдкрддрдВрдЧ (kite)", emoji: "ЁЯкБ", unicode: "U+1FA81" },
  { letter: "рдл", code: "092B", meaning: "рдлрд▓ (fruit)", emoji: "ЁЯНО", unicode: "U+1F34E" },
  { letter: "рдм", code: "092C", meaning: "рдмрдХрд░реА (goat)", emoji: "ЁЯРР", unicode: "U+1F410" },
  { letter: "рдн", code: "092D", meaning: "рднреИрдВрд╕ (buffalo)", emoji: "ЁЯРГ", unicode: "U+1F403" },
  { letter: "рдо", code: "092E", meaning: "рдордХреНрдЦреА (fly)", emoji: "ЁЯк░", unicode: "U+1FAB0" },
  { letter: "рдп", code: "092F", meaning: "рдпрдЬреНрдЮ (fire ritual)", emoji: "ЁЯФе", unicode: "U+1F525" },
  { letter: "рд░", code: "0930", meaning: "рд░рдВрдЧ (color)", emoji: "ЁЯОи", unicode: "U+1F3A8" },
  { letter: "рд▓", code: "0932", meaning: "рд▓рдЯреНрдЯреВ (top)", emoji: "ЁЯкА", unicode: "U+1FA80" },
  { letter: "рд╡", code: "0935", meaning: "рд╡реГрдХреНрд╖ (tree)", emoji: "ЁЯМ│", unicode: "U+1F333" },
  { letter: "рд╢", code: "0936", meaning: "рд╢рдВрдЦ (conch)", emoji: "ЁЯРЪ", unicode: "U+1F41A" },
  { letter: "рд╖", code: "0937", meaning: "рд╖рдЯреНрдХреЛрдг (hexagon)", emoji: "тмб", unicode: "U+1F981" },
  { letter: "рд╕", code: "0938", meaning: "рд╕рд╛рдВрдк (snake)", emoji: "ЁЯРН", unicode: "U+1F40D" },
  { letter: "рд╣", code: "0939", meaning: "рд╣рд╛рдереА (elephant)", emoji: "ЁЯРШ", unicode: "U+1F418" },
  { letter: "рдХреНрд╖", code: "0915+094D+0937", meaning: "рдХреНрд╖рддреНрд░рд┐рдп (warrior)", emoji: "тЪФя╕П", unicode: "U+2694" },
  { letter: "рддреНрд░", code: "0924+094D+0930", meaning: "рддреНрд░рд┐рд╢реВрд▓ (trident)", emoji: "ЁЯФ▒", unicode: "U+1F531" },
  { letter: "рдЬреНрдЮ", code: "091C+094D+091E", meaning: "рдЬреНрдЮрд╛рди (knowledge)", emoji: "ЁЯУЪ", unicode: "U+1F4DA" }
];

const pageTitle = "Hindi Alphabets (рд╣рд┐рдиреНрджреА рд╡рд░реНрдгрдорд╛рд▓рд╛)";
const category = "hindi";
---

<BaseLayout meta={{ title: pageTitle }}>
  <BackButton href="/alphabets/" />
  <article class="container__page alphabet-page-container hindi-alphabet-page">
    <div class="page-header">
      <h1 class="page-main-title">{pageTitle}</h1>
      <button id="flip-all-button" class="flip__all__button">Flip All Cards</button>
    </div>

    <div class="tabs-container">
      <button id="swar-tab" class="tab-button active" data-content="swar-content">Swar (рд╕реНрд╡рд░)</button>
    </div>

    <div id="swar-content" class="tab-content active-content">
      <div class="grid-container alphabet-grid hindi-grid">
        {
          vowels.map((entry, idx) => (
            <LetterCard
              item={{
                id: idx,
                letter: entry.letter,
                text: entry.meaning,
                description: entry.emoji,
                emoji: entry.emoji
              }}
              category={category}
            />
          ))
        }
      </div>
    </div>

    <div class="tabs-container">
      <button id="vyanjan-tab" class="tab-button" data-content="vyanjan-content">Vyanjan (рд╡реНрдпрдВрдЬрди)</button>
    </div>

    <div id="vyanjan-content" class="tab-content">
      <div class="grid-container alphabet-grid hindi-grid">
        {
          consonants.map((entry, idx) => (
            <LetterCard
              item={{
                id: idx,
                letter: entry.letter,
                text: entry.meaning,
                description: entry.emoji,
                emoji: entry.emoji
              }}
              category={category}
            />
          ))
        }
      </div>
    </div>
  </article>
</BaseLayout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const tabButtons = document.querySelectorAll(".tab-button");
    const tabContents = document.querySelectorAll(".tab-content");

    function setActiveTab(activeButton: HTMLButtonElement) {
      tabButtons.forEach((button) => button.classList.remove("active"));
      activeButton.classList.add("active");
      const contentId = activeButton.dataset.content;
      tabContents.forEach((content) => {
        if (content.id === contentId) {
          content.classList.add("active-content");
        } else {
          content.classList.remove("active-content");
        }
      });
    }

    tabButtons.forEach((button) => {
      button.addEventListener("click", () => setActiveTab(button as HTMLButtonElement));
    });

    // Initialize
    const initialTab = document.querySelector(".tab-button.active") as HTMLButtonElement | null;
    if (initialTab) setActiveTab(initialTab);

    // Flip All Cards logic
    const flipAllButton = document.getElementById("flip-all-button");
    let allFlipped = false;
    flipAllButton?.addEventListener("click", () => {
      allFlipped = !allFlipped;
      document.querySelectorAll(".flip__card").forEach((card) => {
        if (allFlipped) {
          card.classList.add("flipped");
        } else {
          card.classList.remove("flipped");
        }
      });
      flipAllButton.textContent = allFlipped ? "Reset All Cards" : "Flip All Cards";
      flipAllButton.classList.add("active");
      setTimeout(() => flipAllButton.classList.remove("active"), 300);
    });
  });
</script>
